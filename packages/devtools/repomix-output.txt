This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  _templates/
    notion/
      signin/
        layout.tsx
        page.tsx
      page.tsx
    shipNow/
      signin/
        layout.tsx
        page.tsx
      page.tsx
  api/
    auth/
      [...nextauth]/
        route.ts
    payment/
      paddle/
        webhooks/
          route.ts
          webhook-processor.ts
      stripe/
        webhooks/
          route.ts
          webhook-processor.ts
      eventEmitter.ts
  payment/
    billing/
      page.tsx
    paddle/
      checkout/
        [priceId]/
          checkout.css
          page.tsx
    success/
      page.tsx
    layout.tsx
  policies/
    privacy-policy/
      page.tsx
    terms-of-use/
      page.tsx
  signin/
    layout.tsx
    page.tsx
  layout.tsx
  page.tsx
components/
  analytics/
    GoogleAnalytics.tsx
  auth/
    SignedIn.tsx
    SignInButton.tsx
    SignOutButton.tsx
  cta/
    NotionLike.tsx
    ShipNowLike.tsx
  faq/
    NotionLike.tsx
    ShipNowLike.tsx
  feature/
    HoverEffect.tsx
    NotionLike.tsx
    ShipNowLike.tsx
  footer/
    NotionLike.tsx
    ShipNowLike.tsx
  header/
    navItem/
      NavDropdownItem.tsx
      NavDropdownItemGroup.tsx
      NavLinkItem.tsx
    NotionLike.tsx
    ShipNowLike.tsx
  hero/
    NotionLike.tsx
    ShipNowLike.tsx
  icons/
    Moon.tsx
    Sun.tsx
  price/
    hooks/
      useActivePlans.ts
      useChangePlan.ts
      useCheckout.ts
      usePriceAmounts.ts
    paddle/
      checkout/
        checkout-contents.tsx
        checkout-header.tsx
        checkout-line-items.tsx
        checkout-price-amount.tsx
        checkout-price-container.tsx
        price-section.tsx
      gradients/
        checkout-form-gradients.tsx
        checkout-gradients.tsx
    NotionLike.tsx
    PriceBtn.tsx
    ShipNow.tsx
  signinForm/
    MagicLink.tsx
    NotionLike.tsx
    ShipNowLike.tsx
  ui/
    accordion.tsx
    alert-dialog.tsx
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    dropdown-menu.tsx
    separator.tsx
    skeleton.tsx
    switch.tsx
  AnimatedGradientText.tsx
  CodeBlock.tsx
  CustomAlertDialog.tsx
  CustomLink.tsx
  MarketingStory.tsx
  PinnedQuote.tsx
  ThemedButton.tsx
  UserAccountNav.tsx
config/
  index.ts
  site.ts
  types.ts
db/
  prisma/
    variants/
      mongodb.prisma
      mysql.prisma
      postgresql.prisma
    schema.prisma
  services/
    customer.ts
    oneTimePayment.ts
    price.ts
    subscription.ts
    user.ts
  client.ts
  index.ts
  types.ts
  utils.ts
emailTemplate/
  magicLinks/
    index.ts
    NotionLike.tsx
    registry.ts
    types.ts
lib/
  actions/
    auth.d.ts
    auth.ts
    payment.ts
    user.ts
  payment/
    paddle/
      config.ts
      server.ts
      types.ts
      utils.ts
    stripe/
      client.ts
      config.ts
      server.ts
      types.ts
    utils.ts
  logger.ts
  utils.ts
providers/
  AuthProvider.tsx
  ThemeProvider.tsx
public/
  notion/
    1password-gr.svg
    affirm-gr.svg
    logo.svg
    remote-gr-v2.svg
  paddle/
    grid-bg.svg
  shipnow/
    credit-card.svg
    google-analytics.svg
    next-auth.svg
    nextjs.svg
    prisma.svg
    react-email.svg
    shadcn-ui.svg
    typescript.svg
  social-icons/
    facebook.svg
    github.svg
    google.svg
    instagram.svg
    linkedin.svg
    mail.svg
    threads.svg
    twitter.svg
    youtube.svg
  logo.svg
scripts/
  custom_stripe_billing_portal.js
styles/
  globals.css
  loading.css
.env.example
.eslintrc.json
.gitignore
.npmrc
auth.ts
components.json
faq.md
next-env.d.ts
next-sitemap.config.js
next.config.mjs
package.json
postcss.config.mjs
README-zh.md
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: app/_templates/notion/signin/layout.tsx
================
import { auth } from "@/auth";
import { authConfig } from "@/config";
import { redirect } from "next/navigation";

export default async function SigninLayout({ children }: { children: React.ReactNode }) {
  const session = await auth();
  if (session) {
    redirect(authConfig.defaultAuthCallbackUrl);
  }
  return children;
}

================
File: app/_templates/notion/signin/page.tsx
================
import type { LoginFormConfig } from "@/components/signinForm/NotionLike";
import { NotionLikeSigninForm } from "@/components/signinForm/NotionLike";
import { siteConfig } from "@/config/site";
import Image from "next/image";
import Link from "next/link";

const defaultConfig: LoginFormConfig = {
  title: "Think it. Make it.",
  subtitle: "Create your Notion account",
  supportEmail: true,
  authButtons: [
    {
      icon: "/social-icons/google.svg",
      text: "Continue with Google",
      provider: "google",
    },
    {
      icon: "/social-icons/github.svg",
      text: "Continue with Github",
      provider: "github",
    }
  ],
};

export default function LoginPage() {
  return (
    <div className="min-h-screen w-full flex flex-col">
      {/* Navigation */}
      <nav className="flex justify-between items-center ml-10">
        <Link href="/" className="flex items-center gap-2">
          <Image
            src={siteConfig.icons.logo}
            alt={siteConfig.name}
            width={32}
            height={32}
            className="w-20 h-20"
          />
        </Link>
      </nav>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center">
        <NotionLikeSigninForm config={defaultConfig} />
      </main>
    </div>
  );
}

================
File: app/_templates/notion/page.tsx
================
import { AnimatedGradientText } from "@/components/AnimatedGradientText";
import { NotionLikeCTA } from "@/components/cta/NotionLike";
import { NotionLikeFAQ } from "@/components/faq/NotionLike";
import { NotionLikeFeature } from "@/components/feature/NotionLike";
import { NotionLikeFooter, NotionLikeFooterProps } from "@/components/footer/NotionLike";
import { NotionLikeHeader } from "@/components/header/NotionLike";
import { NotionLikeHero } from "@/components/hero/NotionLike";
import { PinnedQuote } from "@/components/PinnedQuote";
import { NotionLikePrice } from "@/components/price/NotionLike";
import { siteConfig } from "@/config/site";
import { getSocialIcon } from "@/lib/utils";
import { ChevronRight } from "lucide-react";

export default function Home() {
  const navItems = [
    {
      label: "Product", dropdownItems: [
        { href: "/teams/productA", name: "ProductA" },
        { href: "/teams/productB", name: "ProductB" },
      ]
    },
    {
      label: "Solutions", dropdownItems: [
        { href: "/teams/engineeringA", name: "EngineeringA" },
        { href: "/teams/engineeringB", name: "EngineeringB" },
      ]
    },
    { label: "Pricing", href: "/pricing" },
  ];

  const heroConfig = {
    title: "The happier workspace",
    subtitle: "Write. Plan. Collaborate. With a little help from AI.",
    trustedByText: "Trusted by teams at",
    brands: [
      {
        name: "affirm",
        logo: "/notion/affirm-gr.svg",
      },
      {
        name: "1password",
        logo: "/notion/1password-gr.svg",
      },
      {
        name: "remote",
        logo: "/notion/remote-gr-v2.svg",
      },
    ],
    illustration: "/notion/hero.png",
    button: {
      name: "Try It Free",
      href: "/signin"
    }
  }

  const featuresConfig = [
    {
      title: "Build perfect docs, together.",
      subtitle: "Capture your ideas, get feedback from teammates, and ask AI to add the finishing touches.",
      linkText: "Explore docs & notes",
      linkHref: "/signin",
      features: [
        {
          title: "Building blocks",
          description: "100+ content types to communicate any idea.",
          icon: '/notion/building-blocks.png'
        },
        {
          title: "Collaborative tools",
          description: "Built for teams to share, suggest, and comment.",
          icon: '/notion/collaborative-tools.png'
        },
        {
          title: "AI-assisted",
          description: "Edit, draft, translate. Ask and AI will help.",
          icon: '/notion/ai-assisted.png'
        }
      ],
      screenshot: {
        src: '/notion/feature1-screenshot.png',
        alt: 'Screenshot of the feature1'
      }
    },
    {
      title: "Your workflow. Your way.",
      subtitle: "All your projects, goals, calendars, roadmaps, and more—in one tool—personalized to how you and your team work.",
      linkText: "Explore projects",
      linkHref: "/signin",
      features: [
        {
          title: "Tasks and to-dos",
          description: "Tackle any project, big or small.",
          icon: '/notion/Tasks-and-to-dos.png'
        },
        {
          title: "Custom views",
          description: "Visualize work in any format, from calendars to boards.",
          icon: '/notion/Custom-views.png'
        },
        {
          title: "Automations",
          description: "Put tedious tasks on autopilot.",
          icon: '/notion/Automations.png'
        }
      ],
      screenshot: {
        src: '/notion/feature2-screenshot.png',
        alt: 'Screenshot of the feature2'
      }
    }
  ]

  const plans = [
    {
      name: "Basic",
      isSubscription: true,
      monthlyPriceId: "pri_01j8nz503kqwt0cmq75pfe0pja",
      yearlyPriceId: "pri_01jheevtcd8gpsmp6ddwgnt7bs",
      description: "For individuals to organize personal projects and life",
      buttonText: "Sign up",
      features: [
        "Collaborative workspace",
        "Integrate with Slack, GitHub & more",
        "Basic page analytics",
        "7 day page history",
        "Invite 10 guests",
      ]
    },
    {
      name: "One Time Payment",
      isSubscription: false,
      oneTimePriceId: "pro_01jhef0ds4gwvk82wgdh78jy2z",
      popular: false,
      description: "For Test One Time Payment",
      buttonText: "Get started",
      features: [
        "Everything in Free +",
        "Unlimited blocks for teams",
        "Unlimited file uploads",
        "30 day page history",
        "Invite 100 guests",
        "Synced databases with 3rd party apps",
        "Custom websites",
        "Custom automations",
        "Charts & dashboards",
      ]
    }
  ];
  const faqData = [
    {
      question: "How much usage is included with the Notion AI add-on plan?",
      answer: (
        <>
          <p className="mb-4">
            When you purchase the Notion AI add-on, you're enabling everyone in your workspace (except for guests) to have unlimited use of Notion AI.
          </p>
          <p>
            To ensure optimal performance and <span className="underline">fair usage</span> across all Notion AI users, your access to AI features can be reduced depending on your usage.
          </p>
        </>
      )
    },
    {
      question: "Is there a free trial for Notion AI?",
      answer: (
        <>
          <p className="mb-4">
            Everyone can try Notion AI for free, so you can test most of its capabilities before purchasing the add-on subscription. Please note that some features are not available in the free trial, including AI connectors <span className="text-xs px-1 py-0.5 bg-neutral-100 rounded">BETA</span>, autofilling a database in bulk, and auto-updating of autofilled database properties.
          </p>
          <p>
            The number of complimentary AI responses is shared among the entire workspace. Once you've used all your complimentary AI responses, you will see a message that a Notion AI add-on subscription is necessary to continue using AI features. You'll need to be a workspace owner, and on desktop, to add Notion AI to your plan.
          </p>
        </>
      )
    },
    {
      question: "How does Notion AI use my data?",
      answer: (
        <>
          <p className="mb-4">
            We follow our <a href="#" className="underline">standard data protection practices</a> to keep your data encrypted and private. Notion AI will not use your data to train our models unless you opt in to a request to share your data.
          </p>
          <p>
            Any information used to power Notion AI will be shared with AI subprocessors for the sole purpose of providing you with the Notion AI features. We specifically have contractual agreements in place with our AI subprocessors that prohibit the use of customer data to train their models. <a href="#" className="underline">Learn more about Notion AI security and privacy practices here</a>.
          </p>
        </>
      )
    }
  ];
  const ctaCards = [
    {
      title: "Notion",
      tryButtonText: "Try it free",
      previewImage: "/notion/cta.png"
    },
    {
      title: "Notion Calendar",
      tryButtonText: "Try it free",
      previewImage: "/notion/cta.png"
    }
  ];

  const footerConfig: NotionLikeFooterProps = {
    logo: "/notion/logo.svg",
    socialLinks: Object.entries(siteConfig.socialAccounts)
      .filter(([_, account]) => account?.url)
      .map(([platform, account]) => ({
        icon: getSocialIcon(platform),
        url: account.url,
        label: platform.charAt(0).toUpperCase() + platform.slice(1)
      })),
    columns: [
      {
        title: "Company",
        links: [
          { label: "About us", url: "#" },
          { label: "Careers", url: "#" },
          { label: "Security", url: "#" },
          { label: "Status", url: "#" },
          { label: "Terms & privacy", url: "#" },
        ]
      },
      {
        title: "Download",
        links: [
          { label: "iOS & Android", url: "#" },
          { label: "Mac & Windows", url: "#" },
          { label: "Calendar", url: "#" },
          { label: "Web Clipper", url: "#" },
        ]
      },
      {
        title: "Resources",
        links: [
          { label: "Help center", url: "#" },
          { label: "Pricing", url: "#" },
          { label: "Blog", url: "#" },
          { label: "Community", url: "#" },
          { label: "Integrations", url: "#" },
          { label: "Templates", url: "#" },
          { label: "Affiliates", url: "#" },
        ]
      },
      {
        title: "Notion for",
        links: [
          { label: "Enterprise", url: "#" },
          { label: "Small business", url: "#" },
          { label: "Personal", url: "#" },
        ]
      }
    ]
  };

  return (
    <>
      <NotionLikeHeader loginButtonName="Try It Free" className="h-12" navItems={navItems} />
      <div className="max-w-5xl">
        <div className="z-10 flex items-center justify-center mt-20">
          <AnimatedGradientText>
            🎉 <hr className="mx-2 h-4 w-px shrink-0 bg-gray-300" />{" "}
            <span className="bg-linear-to-r from-[#ffaa40] via-[#9c40ff] to-[#ffaa40] bg-size-[var(--bg-size)_100%] bg-clip-text text-transparent">
              ShipNow Template
            </span>
            <ChevronRight className="ml-1 size-3 transition-transform duration-300 ease-in-out group-hover:translate-x-0.5" />
          </AnimatedGradientText>
        </div>
        <section id="hero">
          <NotionLikeHero {...heroConfig} />
        </section>
        <section id="features">
          {featuresConfig.map((featureConfig, index) => (
            <NotionLikeFeature key={`feature-${index}`} {...featureConfig} />
          ))}
        </section>

        <div className="max-w-2xl mx-auto">
          <PinnedQuote
            quote="Your AI everything app."
            source="Forbes"
          />
        </div>
        <section id="pricing">
          <NotionLikePrice plans={plans} title="One tool for your whole company. Free for teams to try." />
        </section>
        <section id="faq">
          <NotionLikeFAQ faqData={faqData} />
        </section>
        <section id="cta">
          <NotionLikeCTA
            cards={ctaCards}
          />
        </section>
        <NotionLikeFooter footerConfig={footerConfig} />
      </div>
    </>
  );
}

================
File: app/_templates/shipNow/signin/layout.tsx
================
import { auth } from "@/auth";
import { authConfig } from "@/config";
import { redirect } from "next/navigation";

export default async function SigninLayout({ children }: { children: React.ReactNode }) {
  const session = await auth();
  if (session) {
    redirect(authConfig.defaultAuthCallbackUrl);
  }
  return children;
}

================
File: app/_templates/shipNow/signin/page.tsx
================
import type { ShipNowLikeFormConfig } from "@/components/signinForm/ShipNowLike";
import { ShipNowLikeSigninForm } from "@/components/signinForm/ShipNowLike";
import { siteConfig } from "@/config/site";
import Image from "next/image";
import Link from "next/link";

const defaultConfig: ShipNowLikeFormConfig = {
  title: "Welcome to ShipNowKit",
  supportEmail: true,
  socialButtons: [
    {
      icon: "/social-icons/google.svg",
      text: "Continue with Google",
      provider: "google",
    },
    {
      icon: "/social-icons/github.svg",
      text: "Continue with Github",
      provider: "github",
    }
  ],
};

export default function LoginPage() {
  return (
    <div className="min-h-screen w-full flex flex-col">
      {/* Navigation */}
      <nav className="flex justify-between items-center ml-10">
        <Link href="/" className="flex items-center gap-2">
          <Image
            src={siteConfig.icons.logo}
            alt={siteConfig.name}
            width={32}
            height={32}
            className="w-20 h-20"
          />
        </Link>
      </nav>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center">
        <ShipNowLikeSigninForm config={defaultConfig} />
      </main>
    </div>
  );
}

================
File: app/_templates/shipNow/page.tsx
================
import { AnimatedGradientText } from "@/components/AnimatedGradientText";
import { ShipNowLikeCTA, type ShipNowLikeCTAProps } from "@/components/cta/ShipNowLike";
import { ShipNowLikeFAQ, type ShipNowLikeFAQProps } from "@/components/faq/ShipNowLike";
import { HoverEffectFeature } from "@/components/feature/HoverEffect";
import { ShipNowLikeFeature, type ShipNowLikeFeatureProps } from "@/components/feature/ShipNowLike";
import { ShipNowLikeFooter, type ShipNowLikeFooterProps } from "@/components/footer/ShipNowLike";
import { ShipNowLikeHeader } from "@/components/header/ShipNowLike";
import { ShipNowLikeHero } from "@/components/hero/ShipNowLike";
import { MarketingStory } from "@/components/MarketingStory";
import { ShipNowPrice, type ShipNowPriceProps } from "@/components/price/ShipNow";
import { siteConfig } from "@/config/site";
import { getSocialIcon } from "@/lib/utils";
import { ChevronRight } from "lucide-react";

export default function Home() {
  const navItems = [
    { label: "Docs", href: `${siteConfig.baseUrl}/docs` },
    { label: "Templates", href: `${siteConfig.baseUrl}/templates` },
    { label: "Pricing", href: `${siteConfig.baseUrl}#pricing` },
  ];

  const heroConfig = {
    title: "Ship Your SaaS in hours, not days",
    subtitle: "Built with Next.js 15 & React 19 - Packed with auth, payments, emails & more. Focus on your SaaS while we handle the infrastructure.",
    button: {
      name: "Ship Now",
      href: "/signin"
    },
    socialProof: {
      avatars: ["/shipnow/avatar1.png", "/shipnow/avatar2.png", "/shipnow/avatar3.png"],
      description: (<div className="flex flex-col items-center ml-2">
        <div className="flex gap-0.5">
          {[...Array(5)].map((_, i) => (
            <svg
              key={i}
              className="w-5 h-5 text-yellow-400"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
        <span className="text-gray-600">from 200+ happy users</span>
      </div>)
    }
  }

  const marketingStoryConfig = {
    title: "34 Hours of Setup? Not Anymore.",
    content: (
      <>
        <p>
          Ever spent a whole weekend setting up the "basics" for your SaaS, only to realize you haven't even started building your actual product yet? Yeah, I've been there too. Multiple times. 😅
        </p>

        <p>Let me paint you a familiar picture:</p>

        <div className="bg-gray-50 p-6 rounded-lg space-y-2 font-mono text-sm">
          <p>6 hours configuring email settings and choosing templates (why is it so complicated?)</p>
          <p>+ 10 hours perfecting that landing page (only to change it again tomorrow)</p>
          <p>+ 10 hours payment integrations (hello, midnight debugging sessions!)</p>
          <p>+ 2 hours adding SEO tags (Google needs to know you exist)</p>
          <p>+ 6 hours setting up auth (and praying it's secure enough)</p>
          <p>+ ∞ hours overthinking every single decision...</p>
          <p className="font-bold border-t border-gray-200 pt-2 mt-2">= 34+ hours of pure developer "joy" 🥲</p>
        </div>

        <p>
          Sound familiar? After 10+ years of building websites and helping countless developers launch their SaaS dreams, I kept seeing the same pattern: brilliant ideas getting delayed by days (or weeks!) of setup work.
        </p>

        <p>
          Here's a crazy thought: What if you could skip all that? What if you could focus on your unique idea instead of spending hours configuring auth, payments, and email templates?
        </p>

        <p>
          That's exactly why I built ShipNowKit. Think of it as your SaaS launching superpower - everything you need to go from idea to paying customers in hours, not days. No more late-night debugging sessions, no more scattered documentation hunting, and definitely no more infinite configuration loops.
        </p>

        <p className="font-medium">
          Ready to ship your SaaS idea faster than you can say "npm install"?
        </p>
      </>
    )
  }

  const shipNowFeaturesConfig: ShipNowLikeFeatureProps[] = [
    {
      title: "Ready-to-Use Templates",
      subTitle: "Launch your SaaS with professional templates, not blank pages",
      features: [
        "Start with battle-tested templates from popular websites",
        "Professional landing pages, auth flows, and payment screens",
        "Fully customizable components and layouts",
        "Built with modern design principles and best practices"
      ],
      image: "/shipnow/templates-screenshot.png",
      badge: {
        text: "Templates",
        variant: "default" as const
      },
      textPosition: "left" as const
    },
    {
      title: "Unified Payment System",
      subTitle: "Integrate Once, Multiple Payment Methods",
      features: [
        "Multiple payment providers in one unified event handlers",
        "Zero-effort provider switching with consistent interfaces",
        "Automatic price sync between payment dashboard and website",
        "Built-in customer portal for hassle-free billing management",
        "Support both subscription and one-time payments"
      ],
      textPosition: "right" as const,
      badge: {
        text: "Payment",
        variant: "default" as const
      },
      codeBlock: {
        language: "typescript",
        filename: "payment.ts",
        tabs: [
          {
            name: "[step1] config.ts",
            code: `// choose your payment provider
export type PaymentConfig = {
  paymentProvider: "stripe" | "paddle"
}

export const paymentConfig: PaymentConfig = {
  paymentProvider: "stripe"
}
`
          },
          {
            name: "[step2] .env",
            code: `# set your payment provider keys
# Stripe
STRIPE_SECRET_KEY=sk_xxxxx
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_xxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxx

# Paddle
PADDLE_API_KEY=xxxxx
NEXT_PUBLIC_PADDLE_CLIENT_TOKEN=xxxxx
PADDLE_NOTIFICATION_WEBHOOK_SECRET=xxxxx`
          },
          {
            name: "[step3] webhookEventEmitter.ts",
            code: `// register event handlers
eventEmitter.on('subscription.succeeded', async (eventId: string, subscriptionId: string) => {
// handle new succeeded subscription
});

eventEmitter.on('subscription.renewed', async (eventId: string, subscriptionId: string) => {
// handle subscription renewed
});

eventEmitter.on('subscription.plan_updated', async (eventId: string, data) => {
// handle subscription plan update(upgrade or downgrade)
});

eventEmitter.on('payment.succeeded', async (eventId: string, paymentId: string) => {
// handle payment succeeded
});       `
          }
        ]
      }
    },
    {
      title: "Flexible Authentication",
      subTitle: "Enterprise-grade auth without the complexity",
      features: [
        "Multiple auth methods including Social and Magic Links",
        "Pre-built, secure authentication components",
        "Easy-to-use page protection hooks",
        "Role-based access control"
      ],
      badge: {
        text: "Authentication",
        variant: "default" as const
      },
      textPosition: "left" as const,
      codeBlock: {
        language: "typescript",
        filename: "auth.ts",
        tabs: [
          {
            name: ".env",
            code: `// set your auth provider keys
# Google
GOOGLE_CLIENT_ID=xxxxx
GOOGLE_CLIENT_SECRET=xxxxx

# Apple
APPLE_ID=xxxxx
APPLE_SECRET=xxxxx
...`
          },
          {
            name: "demo.tsx",
            code: `// client side auth demo
import { useSession } from "next-auth/react"

export default function ClientSideAuthDemo() {
  const { data: session } = useSession()
  ...
}

// server side auth demo
import { auth } from "@/auth"

export default async function ServerSideAuthDemo() {
  const session = await auth()
  ...
}
`
          },
          {
            name: "protectedPage.tsx",
            code: `// protected page demo
import { SignedIn } from "@/components/auth/SignedIn"

export function ProtectedPage() {
  return (
    <SignedIn>
      <div>Protected Page</div>
    </SignedIn>
  )
}
`
          }
        ]
      }
    }
  ]

  const hoverEffectFeaturesConfig = [
    {
      title: "Next.js 15 Framework",
      description: "Built with the latest App Router architecture for optimal performance and developer experience.",
      icon: '/shipnow/nextjs.svg',
      index: 0
    },
    {
      title: "Secure Authentication",
      description: "Enterprise-grade auth with NextAuth supporting multiple providers and magic links.",
      icon: '/shipnow/next-auth.svg',
      index: 1
    },
    {
      title: "Prisma ORM",
      description: "Type-safe database operations with Prisma's modern database toolkit and migrations.",
      icon: '/shipnow/prisma.svg',
      index: 2
    },
    {
      title: "Shadcn UI Components",
      description: "Beautiful and accessible components built with Radix UI and Tailwind CSS.",
      icon: '/shipnow/shadcn-ui.svg',
      index: 3
    },
    {
      title: "React Email Templates",
      description: "Professional email communications with responsive React-powered templates.",
      icon: '/shipnow/react-email.svg',
      index: 4
    },
    {
      title: "TypeScript Enhanced",
      description: "End-to-end type safety with TypeScript for robust application development.",
      icon: '/shipnow/typescript.svg',
      index: 5
    },
    {
      title: "Payment Integration",
      description: "Unified payment system supporting multiple providers, including Stripe and Paddle",
      icon: '/shipnow/credit-card.svg',
      index: 6
    },
    {
      title: "Analytics Ready",
      description: "Built-in Google Analytics for tracking user behavior and performance metrics.",
      icon: '/shipnow/google-analytics.svg',
      index: 7
    }
  ];

  const shipNowPriceConfig: ShipNowPriceProps = {
    title: "Powerful Features,Simple Pricing",
    subTitle: "Everything you need to start your SaaS. Ship Now, Earn Now.",
    card: {
      title: "Next 15 Starter Kit",
      description: "Pay once. Build unlimited projects!",
      features: [
        "Next.js 15 boilerplate",
        "battle-tested SaaS templates",
        "Components & animations",
        "SEO-friendly",
        "Stripe & Paddle integration",
        "Email integration",
        "Multi database support",
        "Analytics integration",
        "Social Oauth & Magic Links",
        "Technical support for your first ship",
      ],
      price: {
        priceId: "price_1QfjqhFVUKzpyofCDAlWZ6Le",
        isSubscription: false,
      },
      buttonText: "Get access(Sandbox)"
    }
  }

  const faqs: ShipNowLikeFAQProps = {
    categories: [
      {
        id: 'general',
        label: 'General',
        qas: [
          {
            question: "What do I get exactly with ShipNowKit?",
            answer: (
              <>
                <p className="mb-4">
                  After purchase, you will get lifetime access to a complete Next.js 15 & React 19 SaaS starter kit, including:
                </p>
                <ul className="list-disc pl-6 mb-4 space-y-2">
                  <li>Full source code and GitHub repository access</li>
                  <li>Enterprise-grade authentication with social logins and magic links</li>
                  <li>Unified payment system supporting Stripe and Paddle</li>
                  <li>Professional email templates</li>
                  <li>Support multiple databases</li>
                  <li>Pre-built landing pages and marketing components</li>
                  <li>SEO optimization and analytics integration</li>
                </ul>
                <p>
                  Everything is built with the latest App Router architecture and TypeScript for optimal type safety and developer experience. Plus, you'll receive lifetime updates as we continue to enhance the repository.
                </p>
              </>
            )
          },
          {
            question: "Do I need to be an expert to use ShipNowKit?",
            answer: "No, as long as you're comfortable with React & NextJS. We provide a comprehensive guide and support to help you get started and build your SaaS quickly. All components are designed to be configurable, and with the help of AI prompts, you can even complete a full SaaS without writing any code."
          },
          {
            question: "With so many excellent free SaaS Starter Kits available, why should I purchase ShipNowKit?",
            answer: (
              <>
                <ol className="list-decimal pl-6 space-y-2">
                  <li>
                    Open-source projects often lack customization options and scalability, making development more challenging.
                  </li>
                  <li>
                    ShipNowKit provides comprehensive documentation to help you build quickly.
                  </li>
                  <li>
                    Unlike open-source projects that may become outdated, ShipNowKit receives regular updates to keep you on the latest version.
                  </li>
                  <li>
                    You're not just buying code – you're getting technical support from the ShipNowKit team to help you avoid common pitfalls in your SaaS journey. Ship now and let's get connected.
                  </li>
                </ol>
              </>
            )
          },
          {
            question: "How do I access the repository after purchase?",
            answer: (
              <>
                <p className="mb-4">
                  After your purchase, follow these simple steps to access the codebase:
                </p>
                <ol className="list-decimal pl-6 space-y-2">
                  <li>Visit your account dashboard and locate your purchase in the "Orders" section</li>
                  <li>Enter your GitHub username to activate your access</li>
                  <li>Check your GitHub notifications for an invitation to the ShipNowKit repository</li>
                  <li>Accept the invitation to gain immediate access to the complete codebase</li>
                </ol>
              </>
            )
          }
        ]
      },
      {
        id: 'payment',
        label: 'Payment',
        qas: [
          {
            question: "Are there any other costs associated with using ShipNowKit?",
            answer: "No, there are no other subscription or hidden cost from ShipNowKit. Many platforms offer free tiers so that you can launch your saas for free."
          },
          {
            question: "Can I get a refund?",
            answer: "Refunds are available for orders that haven't been activated yet. Once you've activated your order and received access to the private GitHub repository, the purchase becomes final as you get lifetime access to ShipNowKit and all future updates."
          }
        ]
      },
      {
        id: 'license',
        label: 'License',
        qas: [
          {
            question: "How many products can I use ShipNowKit for?",
            answer: "You can use it for unlimited personal and commercial projects."
          },
          {
            question: "What are the usage restrictions?",
            answer: (
              <>
                <p className="mb-2">
                  You are not allowed to provide the boilerplate code as a service to others, for example, you can't sell ShipNowKit Code as a service.
                </p>
                <p>
                  Currently, ShipNowKit is not licensed for use in open source projects unless the original source code is heavily modified. This restriction is in place to protect the value of the product for paying customers.
                </p>
              </>
            )
          },
          {
            question: "Does my license expire?",
            answer: "No, your license does not expire. You will have lifetime access to ShipNowKit and all future updates."
          }
        ]
      }
    ]
  }
  const ctaConfig: ShipNowLikeCTAProps = {
    title: "Ship Now, Earn Now",
    subTitle: "Launch faster with production-ready infrastructure. No more weeks spent on basic setup",
    buttons: [
      {
        text: "Ship Now",
        href: "/signin"
      }
    ]
  }

  const footerConfig: ShipNowLikeFooterProps = {
    slogan: "Ship Now, Earn Now",
    socialLinks: Object.entries(siteConfig.socialAccounts)
      .filter(([_, account]) => account?.url)
      .map(([platform, account]) => ({
        icon: getSocialIcon(platform),
        url: account.url,
        label: platform.charAt(0).toUpperCase() + platform.slice(1)
      })),
    columns: [
      {
        title: "About",
        items: [
          { label: "Features", href: `${siteConfig.baseUrl}#features` },
          { label: "Pricing", href: `${siteConfig.baseUrl}#pricing` },
          { label: "FAQ", href: `${siteConfig.baseUrl}#faq` }
        ]
      },
      {
        title: "Resources",
        items: [
          { label: "Docs", href: `${siteConfig.baseUrl}/docs` },
          { label: "Templates", href: `${siteConfig.baseUrl}/templates` },
        ]
      }
    ],
    ctaButton: {
      text: "Build with ShipNowKit",
      href: `${siteConfig.baseUrl}`
    }
  };

  return (
    <>
      <ShipNowLikeHeader loginButtonName="Try It Free" className="h-14" navItems={navItems} />
      <div className="max-w-8xl mx-auto mt-32">
        <div className="z-10 flex items-center justify-center">
          <AnimatedGradientText>
            🎉 <hr className="mx-2 h-4 w-px shrink-0 bg-gray-300" />{" "}
            <span className="bg-linear-to-r from-[#ffaa40] via-[#9c40ff] to-[#ffaa40] bg-size-[var(--bg-size)_100%] bg-clip-text text-transparent">
              ShipNow Template
            </span>
            <ChevronRight className="ml-1 size-3 transition-transform duration-300 ease-in-out group-hover:translate-x-0.5" />
          </AnimatedGradientText>
        </div>
        <section id="hero">
          <ShipNowLikeHero {...heroConfig} />
        </section>
        <section id="marketing-story">
          <MarketingStory
            title={marketingStoryConfig.title}
            content={marketingStoryConfig.content}
          />
        </section>
        <section id="features">
          {shipNowFeaturesConfig.map((featureConfig, index) => (
            <ShipNowLikeFeature key={`feature-${index} `} {...featureConfig} />
          ))}
        </section>
        <section id="solid-foundation">
          <h2 className="mt-20 text-4xl font-bold text-center">Solid foundation</h2>
          <HoverEffectFeature features={hoverEffectFeaturesConfig} />
        </section>
        <section id="pricing">
          <ShipNowPrice {...shipNowPriceConfig} />
        </section>
        <section id="faq">
          <ShipNowLikeFAQ {...faqs} />
        </section>
        <section id="cta">
          <ShipNowLikeCTA {...ctaConfig} />
        </section>
        <ShipNowLikeFooter {...footerConfig} />
      </div>
    </>
  );
}

================
File: app/api/auth/[...nextauth]/route.ts
================
import { handlers } from "@/auth"

export const { GET, POST } = handlers

================
File: app/api/payment/paddle/webhooks/route.ts
================
import { logger } from '@/lib/logger';
import { getPaddleInstance } from '@/lib/payment/paddle/config';
import { NextRequest } from 'next/server';
import { ProcessWebhook } from './webhook-processor';
export const runtime = 'nodejs';

const webhookProcessor = new ProcessWebhook();

export async function POST(request: NextRequest) {
  const signature = request.headers.get('paddle-signature') || '';
  const rawRequestBody = await request.text();
  const privateKey = process.env['PADDLE_NOTIFICATION_WEBHOOK_SECRET'] || '';

  let status, eventName;
  try {
    if (signature && rawRequestBody) {
      const paddle = getPaddleInstance();
      const eventData = await paddle.webhooks.unmarshal(rawRequestBody, privateKey, signature);
      status = 200;
      eventName = eventData?.eventType ?? 'Unknown event';
      if (eventData) {
        logger.info(`received event: ${eventData.eventType}`);
        await webhookProcessor.processEvent(eventData);
      }
    } else {
      status = 400;
      logger.error('Missing signature from header');
    }
  } catch (e: any) {
    console.log(e);
    // Handle error
    status = 500;
    logger.error(e.message);
  }
  return Response.json({}, { status });
}

================
File: app/api/payment/paddle/webhooks/webhook-processor.ts
================
import { prisma } from '@/db';
import { upsertOneTimePayment } from '@/db/services/oneTimePayment';
import { upsertPrice } from '@/db/services/price';
import { upsertSubscription } from '@/db/services/subscription';
import { getSubscription } from '@/lib/payment/paddle/server';
import {
  EventEntity,
  EventName,
  PriceNotification,
  SubscriptionCanceledEvent,
  SubscriptionUpdatedEvent,
  TransactionCompletedEvent
} from '@paddle/paddle-node-sdk';
import { PaymentProvider, Prisma } from '@prisma/client';
import { eventEmitter } from '../../eventEmitter';
export class ProcessWebhook {
  async processEvent(eventData: EventEntity) {
    switch (eventData.eventType) {
      case EventName.PriceCreated:
      case EventName.PriceUpdated:
        await this.upsertPrice(eventData.data);
        break;
      case EventName.TransactionCompleted:
        await this.handleTransactionCompleted(eventData as TransactionCompletedEvent);
        break;
      case EventName.SubscriptionUpdated:
        const subscriptionId = (eventData as SubscriptionUpdatedEvent).data.id;
        const customerId = (eventData as SubscriptionUpdatedEvent).data.customerId;
        await this.upsertSubscription(subscriptionId, customerId);
        break;
      case EventName.SubscriptionCanceled:
        await eventEmitter.emit('subscription.canceled', eventData.eventId, (eventData as SubscriptionCanceledEvent).data.id);
        break;
    }
  }

  private async upsertPrice(price: PriceNotification) {

    const priceData = {
      id: price.id,
      provider: 'paddle' as PaymentProvider,
      product_id: price.productId,
      active: price.status === 'active',
      currency: price.unitPrice.currencyCode,
      type: price.billingCycle ? 'recurring' : 'one_time',
      unit_amount: parseInt(price.unitPrice.amount),
      billing_cycle_interval: price.billingCycle?.interval ?? null,
      billing_cycle_frequency: price.billingCycle?.frequency ?? null,
      trial_period_interval: price.trialPeriod?.interval ?? null,
      trial_period_frequency: price.trialPeriod?.frequency ?? null
    };
    return await upsertPrice(priceData);
  }

  private async handleTransactionCompleted(eventData: TransactionCompletedEvent) {
    const transactionNotification = eventData.data;
    const origin = transactionNotification.origin;
    if (origin === 'web' && !transactionNotification.subscriptionId) {
      // one-time payment paid
      await this.upsertOneTimePayment(eventData);
      await eventEmitter.emit('payment.succeeded', eventData.eventId, transactionNotification.id);
    } else {
      // subscription payment paid
      await this.upsertSubscription(transactionNotification.subscriptionId as string, transactionNotification.customerId as string, transactionNotification.id);
      // new subscription
      if (origin == "web" || origin === "subscription_charge") {
        await eventEmitter.emit('subscription.succeeded', eventData.eventId, transactionNotification.subscriptionId as string);
      } else if (origin === "subscription_recurring") {
        // renewal
        await eventEmitter.emit('subscription.renewed', eventData.eventId, transactionNotification.subscriptionId as string);
      }
    }
  }

  private async upsertOneTimePayment(eventData: TransactionCompletedEvent) {
    const transactionNotification = eventData.data;
    const customer = await prisma.customer.findFirst({
      where: {
        provider: PaymentProvider.paddle,
        id: transactionNotification.customerId as string
      },
      select: {
        user_id: true
      }
    });
    if (!customer) {
      throw new Error('Customer not found');
    }

    const lineItem = transactionNotification.details?.lineItems?.[0];
    if (!lineItem) {
      throw new Error('Line item not found');
    }
    const details = transactionNotification.details;
    const oneTimePayment = {
      id: transactionNotification.id,
      provider: PaymentProvider.paddle,
      user_id: customer.user_id,
      price_id: lineItem.priceId,
      quantity: lineItem.quantity,
      status: transactionNotification.status,
      amount: details.totals?.subtotal ? parseInt(details.totals.subtotal) : 0,
      currency: details.totals?.currencyCode ?? '',
      created_at: new Date(eventData.occurredAt)
    }
    return await upsertOneTimePayment(oneTimePayment);
  }

  private async upsertSubscription(subscriptionId: string, customerId: string, latestTransactionId?: string) {
    const customer = await prisma.customer.findFirst({
      where: {
        provider: PaymentProvider.paddle,
        id: customerId
      },
      select: {
        user_id: true
      }
    });
    if (!customer) {
      throw new Error('Customer not found');
    }

    const subscription = await getSubscription(subscriptionId);
    const subscriptionItem = subscription.items[0];
    if (!subscriptionItem) {
      throw new Error('Subscription item not found');
    }
    const subscriptionData: Prisma.SubscriptionUncheckedCreateInput = {
      id: subscriptionId,
      provider: PaymentProvider.paddle,
      user_id: customer.user_id,
      status: subscription.status,
      price_id: subscriptionItem.price.id,
      quantity: subscriptionItem.quantity,
      cancel_at_period_end: subscription.canceledAt ? true : false,
      cancel_at: subscription.canceledAt
        ? new Date(subscription.canceledAt)
        : null,
      canceled_at: subscription.canceledAt
        ? new Date(subscription.canceledAt)
        : null,
      current_period_start: new Date(subscription.currentBillingPeriod?.startsAt!),
      current_period_end: new Date(subscription.currentBillingPeriod?.endsAt!),
      created: new Date(subscription.createdAt),
      ended_at: subscription.canceledAt
        ? new Date(subscription.canceledAt)
        : null,
      trial_start: subscriptionItem.trialDates
        ? new Date(subscriptionItem.trialDates.startsAt)
        : null,
      trial_end: subscriptionItem.trialDates
        ? new Date(subscriptionItem.trialDates.endsAt)
        : null
    };
    if (latestTransactionId) {
      subscriptionData.latest_successful_transaction_id = latestTransactionId;
    }
    return await upsertSubscription(subscriptionData);
  }
}

================
File: app/api/payment/stripe/webhooks/route.ts
================
import { logger } from '@/lib/logger';
import { stripe } from '@/lib/payment/stripe/config';
import { NextRequest } from 'next/server';
import Stripe from 'stripe';

import { ProcessWebhook } from './webhook-processor';

const webhookProcessor = new ProcessWebhook();
export async function POST(request: NextRequest) {
  const body = await request.text();
  const sig = request.headers.get('stripe-signature') as string;
  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

  let event: Stripe.Event;
  try {
    if (!sig || !webhookSecret)
      return new Response('Webhook secret not found.', { status: 400 });
    event = stripe.webhooks.constructEvent(body, sig, webhookSecret);
    logger.info(`Webhook received: ${event.type}`);
  } catch (err: any) {
    logger.error(`Webhook Error: ${err.message}`);
    return new Response(`Webhook Error: ${err.message}`, { status: 400 });
  }
  try {
    await webhookProcessor.processEvent(event);
  } catch (error) {
    logger.error(`Error handling webhook: ${error}`);
    return new Response(`Error handling webhook: ${error}`, { status: 500 });
  }
  return new Response(JSON.stringify({ received: true }))
}

================
File: app/api/payment/stripe/webhooks/webhook-processor.ts
================
import { paymentConfig } from '@/config';
import { prisma } from '@/db';
import { upsertOneTimePayment } from '@/db/services/oneTimePayment';
import { deletePrice, upsertPrice } from '@/db/services/price';
import { upsertSubscription } from '@/db/services/subscription';
import { logger } from '@/lib/logger';
import { stripe } from '@/lib/payment/stripe/config';
import { PaymentProvider, Prisma } from '@prisma/client';
import { Stripe } from 'stripe';
import { eventEmitter } from '../../eventEmitter';
export class ProcessWebhook {
  // all event types: https://docs.stripe.com/api/events/types
  async processEvent(eventData: Stripe.Event) {
    switch (eventData.type) {
      case 'price.created':
      case 'price.updated':
        await this.upsertPrice(eventData.data.object as Stripe.Price);
        break;
      case 'price.deleted':
        await this.deletePrice(eventData.data.object as Stripe.Price);
        break;
      case 'customer.subscription.updated':
        let stripeSubscription = await stripe.subscriptions.retrieve(eventData.data.object.id, { expand: ['customer'] })
        let metadata: Record<string, string> | null = (stripeSubscription.customer as Stripe.Customer)?.metadata;
        if (metadata?.system != paymentConfig.systemName) {
          logger.info('metadata.system not match. expected:' + paymentConfig.systemName + 'actual:' + metadata?.system);
          break;
        }
        const previousAttributes = eventData.data.previous_attributes as Stripe.Subscription;
        const oldPriceId = previousAttributes?.items?.data[0]?.price?.id;
        const newPriceId = eventData.data.object.items?.data[0]?.price?.id;
        const needToUpdatePrice = Boolean(oldPriceId && newPriceId && oldPriceId !== newPriceId);
        // upgrade or downgrade
        if (needToUpdatePrice) {
          await eventEmitter.emit('subscription.plan_updated', eventData.id, {
            subscriptionId: eventData.data.object.id,
            oldPriceId: previousAttributes.items.data[0].price.id,
            newPriceId: eventData.data.object.items.data[0].price.id,
          });
        }

        // canceled
        if (eventData.data.object.status === 'canceled' || eventData.data.object.status === 'unpaid') {
          await eventEmitter.emit('subscription.canceled', eventData.id, eventData.data.object.id);
        }
        await this.upsertSubscription(eventData.data.object.id, needToUpdatePrice);
        break;
      case 'checkout.session.completed':
        const checkoutSession = eventData.data.object as Stripe.Checkout.Session;
        metadata = checkoutSession.metadata;
        if (metadata?.system !== paymentConfig.systemName) {
          logger.info('metadata.system not match. expected:' + paymentConfig.systemName + 'actual:' + metadata?.system);
          break;
        }

        if (checkoutSession.mode === 'subscription') {
          const subscriptionId = checkoutSession.subscription as string;
          await this.upsertSubscription(subscriptionId, true);
          await eventEmitter.emit('subscription.succeeded', eventData.id, subscriptionId);
        } else if (checkoutSession.mode === 'payment') {
          await this.upsertOneTimePayment(checkoutSession.id);
          await eventEmitter.emit('payment.succeeded', eventData.id, checkoutSession.payment_intent as string);
        }
        break;
      case 'invoice.paid':
        const invoice = eventData.data.object as Stripe.Invoice;
        const subscriptionId = invoice.subscription as string;
        if (!subscriptionId) {
          logger.info('subscriptionId not found. ignore');
          break;
        }
        stripeSubscription = await stripe.subscriptions.retrieve(subscriptionId, { expand: ['customer'] });
        metadata = (stripeSubscription.customer as Stripe.Customer)?.metadata;
        if (metadata?.system !== paymentConfig.systemName) {
          logger.info('metadata.system not match. expected:' + paymentConfig.systemName + 'actual:' + metadata?.system);
          break;
        }
        await this.upsertSubscription(subscriptionId, true);
        if (invoice.billing_reason === 'subscription_cycle') {
          await eventEmitter.emit('subscription.renewed', eventData.id, subscriptionId);
        }
        break;
    }
  }

  private async upsertPrice(price: Stripe.Price) {
    const priceData = {
      id: price.id,
      provider: 'stripe' as PaymentProvider,
      product_id: typeof price.product === 'string' ? price.product : '',
      active: price.active,
      currency: price.currency,
      type: price.type,
      unit_amount: price.unit_amount ?? null,
      billing_cycle_interval: price.recurring?.interval ?? null,
      billing_cycle_frequency: price.recurring?.interval_count ?? null,
      trial_period_interval: price.recurring?.trial_period_days ? 'day' : null,
      trial_period_frequency: price.recurring?.trial_period_days ?? null
    };
    return await upsertPrice(priceData);
  }

  private async deletePrice(price: Stripe.Price) {
    return await deletePrice(price.id);
  }

  private async upsertSubscription(subscriptionId: string, needToUpdatePrice: boolean) {
    const subscription = await stripe.subscriptions.retrieve(subscriptionId, { expand: ['latest_invoice.payment_intent'] });
    const customer = await prisma.customer.findFirst({
      where: {
        provider: PaymentProvider.stripe,
        id: subscription.customer as string
      },
      select: {
        user_id: true
      }
    });
    if (!customer) {
      throw new Error('Customer not found');
    }

    const subscriptionData: Prisma.SubscriptionUncheckedCreateInput = {
      id: subscription.id,
      provider: PaymentProvider.stripe,
      user_id: customer.user_id,
      metadata: subscription.metadata,
      status: subscription.status,
      price_id: subscription.items.data[0].price.id,
      quantity: subscription.items.data[0].quantity,
      cancel_at_period_end: subscription.cancel_at_period_end,
      cancel_at: subscription.cancel_at
        ? new Date(subscription.cancel_at * 1000)
        : null,
      canceled_at: subscription.canceled_at
        ? new Date(subscription.canceled_at * 1000)
        : null,
      current_period_start: new Date(subscription.current_period_start * 1000),
      current_period_end: new Date(subscription.current_period_end * 1000),
      created: new Date(subscription.created * 1000),
      ended_at: subscription.ended_at
        ? new Date(subscription.ended_at * 1000)
        : null,
      trial_start: subscription.trial_start
        ? new Date(subscription.trial_start * 1000)
        : null,
      trial_end: subscription.trial_end
        ? new Date(subscription.trial_end * 1000)
        : null
    };
    if (needToUpdatePrice) {
      const latestInvoice = subscription.latest_invoice as Stripe.Invoice;
      const paymentIntent = latestInvoice.payment_intent as Stripe.PaymentIntent;
      subscriptionData.latest_successful_transaction_id = paymentIntent.id;
    }
    return await upsertSubscription(subscriptionData);
  }

  private async upsertOneTimePayment(checkoutSessionId: string) {
    const checkoutSession = await stripe.checkout.sessions.retrieve(checkoutSessionId, {
      expand: ['line_items']
    });
    const customer = await prisma.customer.findFirst({
      where: {
        provider: PaymentProvider.stripe,
        id: checkoutSession.customer as string
      },
      select: {
        user_id: true
      }
    });
    if (!customer) {
      throw new Error('Customer not found');
    }
    const paymentIntentId = checkoutSession.payment_intent as string;
    const lineItem = checkoutSession.line_items?.data[0];
    if (!lineItem) {
      throw new Error('Line item not found');
    }
    if (!lineItem.price) {
      throw new Error('Price not found');
    }
    const oneTimePayment = {
      id: paymentIntentId,
      provider: PaymentProvider.stripe,
      user_id: customer.user_id,
      price_id: lineItem.price.id,
      quantity: lineItem.quantity,
      metadata: checkoutSession.metadata || undefined,
      status: checkoutSession.payment_status,
      amount: lineItem.amount_total,
      currency: lineItem.currency,
      created_at: new Date(checkoutSession.created * 1000)
    }
    return await upsertOneTimePayment(oneTimePayment);
  }
}

================
File: app/api/payment/eventEmitter.ts
================
type EventMap = {
  'subscription.succeeded': string;
  'subscription.renewed': string;
  'subscription.plan_updated': {
    subscriptionId: string;
    oldPriceId: string;
    newPriceId: string;
  };
  'subscription.canceled': string;
  'payment.succeeded': string;

}

type EventKey = keyof EventMap;
type EventHandler<T extends EventKey> = (eventId: string, data: EventMap[T]) => Promise<void>;

class EventEmitter {
  private eventHandlers: Map<EventKey, EventHandler<any>[]> = new Map();

  // register an event handler for a given event
  on<T extends EventKey>(event: T, handler: EventHandler<T>) {
    this.eventHandlers.set(event, [...(this.eventHandlers.get(event) || []), handler]);
  }

  // emit an event
  async emit<T extends EventKey>(event: T, eventId: string, data: EventMap[T]) {
    const handlers = this.eventHandlers.get(event) || [];
    for (const handler of handlers) {
      await handler(eventId, data);
    }
  }
}

export const eventEmitter = new EventEmitter();

// register event handlers
eventEmitter.on('subscription.succeeded', async (eventId: string, subscriptionId: string) => {
  // handle new succeeded subscription 
  console.log(`Subscription ${subscriptionId} succeeded`);
});

eventEmitter.on('subscription.renewed', async (eventId: string, subscriptionId: string) => {
  // handle subscription renewed
  console.log(`Subscription ${subscriptionId} renewed`);
});

eventEmitter.on('subscription.plan_updated', async (eventId: string, data) => {
  // handle subscription plan update(upgrade or downgrade)
  console.log(`Subscription ${data.subscriptionId} updated: ${data.oldPriceId} -> ${data.newPriceId}`);
});

eventEmitter.on('payment.succeeded', async (eventId: string, paymentId: string) => {
  // handle payment succeeded
  console.log(`Payment ${paymentId} succeeded`);
});

eventEmitter.on('subscription.canceled', async (eventId: string, subscriptionId: string) => {
  // handle subscription canceled
  console.log(`Subscription ${subscriptionId} canceled`);
});

================
File: app/payment/billing/page.tsx
================
import { auth } from "@/auth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { paymentConfig } from "@/config";
import { getUserActivePlans } from "@/db/services/user";
import { createCustomerPortal } from "@/lib/actions/payment";
import { CircleX } from "lucide-react";
import Link from "next/link";
import { redirect } from "next/navigation";

export default async function BillingPage() {
  const session = await auth();
  if (!session?.user?.id) {
    redirect(`/signin?callbackUrl=${encodeURIComponent("/payment/billing")}`);
  }

  // get user active plans
  const activePlans = await getUserActivePlans(session.user.id, true);
  if (activePlans.length > 0) {
    const portalUrl = await createCustomerPortal("/payment/billing");
    if (portalUrl) {
      redirect(portalUrl);
    }
  }

  return (
    <div className="min-h-[80vh] flex items-center justify-center px-4">
      <Card className="w-full max-w-md">
        <CardContent className="pt-6 text-center">
          <div className="mb-4 flex justify-center">
            <CircleX className="h-12 w-12 text-red-500" />
          </div>

          <h1 className="text-2xl font-bold mb-2">
            No Active Subscription
          </h1>

          <p className="text-muted-foreground mb-6">
            You don't have an active subscription.
          </p>
        </CardContent>

        <CardFooter className="flex flex-col gap-2">
          <Button asChild className="w-full">
            <Link href={paymentConfig.pricePage}>
              View All Plans
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

================
File: app/payment/paddle/checkout/[priceId]/checkout.css
================
.checkout-background-base {
  width: 100%;
  position: absolute;
  z-index: -1;
}

.grid-bg {
  background: url('/paddle/grid-bg.svg') no-repeat;
}

.checkout-yellow-highlight {
  position: absolute;
  left: 96px;
  top: 0;
  width: 248px;
  height: 1px;
  background: linear-gradient(90deg,
      rgba(255, 255, 255, 0) 15%,
      rgba(255, 248, 0, 0.6) 50%,
      rgba(255, 255, 255, 0) 85%);
}

.checkout-hard-blur {
  width: 196px;
  height: 4px;
  position: absolute;
  left: 103px;
  top: -2px;
  background: #fff800;
  opacity: 0.1;
  filter: blur(12px);
}

.checkout-soft-blur {
  width: 296px;
  height: 16.576px;
  position: absolute;
  left: 52px;
  top: -9px;
  border-radius: 296px;
  opacity: 0.3;
  background: #fff800;
  filter: blur(32px);
}

.checkout-mobile-grainy-blur {
  width: 211px;
  height: 245px;
  background: linear-gradient(0deg,
      rgba(255, 251, 229, 0) 0%,
      rgba(21, 227, 227, 0.06) 35.5%,
      rgba(255, 248, 0, 0.48) 80.5%);
  filter: blur(26px);
}

.checkout-mobile-grainy-blur::before {
  content: '';
  left: 55px;
  position: absolute;
  width: 101px;
  height: 167px;
  background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(168, 240, 248, 0.6) 100%);
  filter: blur(26px);
}

.checkout-mobile-top-gradient {
  position: absolute;
  left: 50%;
  margin-left: -105px;
  top: -140px;
  width: 211px;
  height: 280px;
}

.checkout-mobile-bottom-gradient {
  width: 211px;
  height: 280px;
  position: absolute;
  right: -140.023px;
  bottom: -109.977px;
}

.checkout-mobile-bottom-gradient.checkout-mobile-grainy-blur {
  transform: rotate(180deg);
}

.checkout-order-summary-mobile-yellow-highlight::before {
  content: '';
  position: absolute;
  left: 50%;
  margin-left: -124px;
  top: 0;
  width: 248px;
  height: 1px;
  background: linear-gradient(90deg,
      rgba(255, 255, 255, 0) 15%,
      rgba(255, 248, 0, 0.6) 50%,
      rgba(255, 255, 255, 0) 85%);
}

.checkout-success-background {
  position: absolute;
  left: 50%;
  margin-left: -410px;
  top: -338.001px;
  width: 820px;
  height: 938px;
  border-radius: 820px;
  transform: rotate(180deg);
  background: linear-gradient(180deg,
      rgba(255, 251, 229, 0) 0%,
      rgba(21, 227, 227, 0.06) 35.5%,
      rgba(255, 248, 0, 0.18) 80.5%);
  filter: blur(100px);
}

.checkout-success-background::before {
  content: '';
  position: absolute;
  width: 394px;
  top: 350px;
  height: 559px;
  left: 50%;
  margin-left: -197px;
  background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(168, 240, 248, 0.6) 100%);
  filter: blur(100px);
}

.footer-border {
  position: relative;
  background: linear-gradient(90deg, rgba(65, 75, 78, 0) 0%, #414b4e 49.5%, rgba(65, 75, 78, 0) 100%);
}

.footer-border::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: calc(50% - 124px);
  width: 248px;
  height: 1px;
  background: linear-gradient(90deg,
      rgba(255, 255, 255, 0) 15%,
      rgba(255, 248, 0, 0.6) 50%,
      rgba(255, 255, 255, 0) 85%);
}

================
File: app/payment/paddle/checkout/[priceId]/page.tsx
================
import { CheckoutContents } from '@/components/price/paddle/checkout/checkout-contents';
import { CheckoutHeader } from '@/components/price/paddle/checkout/checkout-header';
import { CheckoutGradients } from '@/components/price/paddle/gradients/checkout-gradients';
import './checkout.css';

export default async function CheckoutPage() {
  return (
    <div className={'w-full min-h-screen relative overflow-hidden'}>
      <CheckoutGradients />
      <div
        className={'mx-auto max-w-6xl relative px-[16px] md:px-[32px] py-[24px] flex flex-col gap-6 justify-between'}
      >
        <CheckoutHeader />
        <CheckoutContents />
      </div>
    </div>
  );
}

================
File: app/payment/success/page.tsx
================
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { authConfig } from "@/config";
import { CheckCircle } from "lucide-react";
import Link from "next/link";

export default function PaymentSuccessPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center px-4">
      <Card className="w-full max-w-md">
        <CardContent className="pt-6 text-center">
          <div className="mb-4 flex justify-center">
            <CheckCircle className="h-12 w-12 text-green-500" />
          </div>

          <h1 className="text-2xl font-bold mb-2">
            Payment Success!
          </h1>

          <p className="text-muted-foreground mb-6">
            Your payment is complete, and you’re all set.
          </p>
        </CardContent>

        <CardFooter className="flex flex-col gap-2">
          <Button asChild className="w-full">
            <Link href={authConfig.defaultAuthCallbackUrl}>
              Go to Dashboard
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

================
File: app/payment/layout.tsx
================
import { auth } from "@/auth";
import { authConfig } from "@/config";
import { redirect } from "next/navigation";

export default async function PaymentLayout({ children }: { children: React.ReactNode }) {
  const session = await auth();
  if (!session) {
    redirect(authConfig.signInPage);
  }
  return children;
}

================
File: app/policies/privacy-policy/page.tsx
================
import Link from 'next/link'

export default function PrivacyPolicy() {
    return (
        <div className="max-w-4xl mx-auto py-12 px-4">
            <div
                className="mb-12 h-[200px] bg-gray-100 flex items-center justify-center"
                role="img"
                aria-label="Privacy Policy Header"
            >
                <h1 className="text-4xl font-bold text-gray-800">ShipNow Privacy Policy</h1>
            </div>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">1. Introduction</h2>
                <p className="mb-4">
                    At <Link href="/" className="font-bold hover:underline">ShipNow</Link>, we are committed to protecting your privacy and ensuring you have a positive experience on our website. This policy outlines our data handling practices and how we collect, use, disclose, and protect your personal information.
                </p>
                <p>
                    This policy applies to our website and all related services provided by <Link href="/" className="font-bold hover:underline">ShipNow</Link>.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">2. Information We Collect</h2>
                <p className="mb-4">We collect information in the following ways:</p>
                <ul className="list-disc pl-8 mb-4">
                    <li>Information you provide to us directly when you use our services</li>
                    <li>Information we collect automatically as you use our services</li>
                    <li>Information we receive from third parties</li>
                </ul>
                <p className="mb-4">This information may include: </p>
                <ul className="list-disc pl-8 mb-4">
                    <li>Account Information: Your Google account information when you sign in</li>
                    <li>User Content: The content you create and manage using our services</li>
                    <li>Usage Information: How you use our services and interact with our platform</li>
                    <li>Device Information: Information about the devices you use to access our services</li>
                    <li>Log Data: Information logged when you use our services, including IP address and browser type</li>
                </ul>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">3. How We Use Your Information</h2>
                <p className="mb-4">We use your information to:</p>
                <ul className="list-disc pl-8 mb-4">
                    <li>Provide, maintain, and improve our services</li>
                    <li>Develop new services, features, and functionality</li>
                    <li>Understand and analyze how you use our services</li>
                    <li>Communicate with you, including for customer service, updates, and marketing purposes</li>
                    <li>Monitor and analyze trends, usage, and activities in connection with our services</li>
                    <li>Detect, investigate, and prevent fraudulent transactions and other illegal activities</li>
                    <li>Protect the rights and property of <Link href="/" className="font-bold hover:underline">ShipNow</Link> and others</li>
                </ul>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">4. How We Share Your Information</h2>
                <p className="mb-4">We may share your information in the following situations:</p>
                <ul className="list-disc pl-8 mb-4">
                    <li>With your consent</li>
                    <li>For legal reasons</li>
                    <li>To protect <Link href="/" className="font-bold hover:underline">ShipNow</Link></li>
                    <li>With our service providers</li>
                    <li>In connection with a sale or merger</li>
                </ul>
                <p>
                    We do not sell your personal information to third parties.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">5. Your Choices and Rights</h2>
                <p className="mb-4">You have the following rights regarding your information:</p>
                <ul className="list-disc pl-8 mb-4">
                    <li>Access and update your information</li>
                    <li>Request deletion of your information</li>
                    <li>Object to the processing of your information</li>
                    <li>Request restrictions on our use of your information</li>
                    <li>Request portability of your information</li>
                    <li>Opt-out of certain data sharing scenarios</li>
                </ul>
                <p>
                    To exercise these rights, please contact us at danteisshipping@gmail.com.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">6. Data Retention and Security</h2>
                <p className="mb-4">
                    We retain your information for as long as necessary to provide our services and fulfill the purposes outlined in this policy. We implement appropriate technical and organizational measures to protect your information against unauthorized or unlawful processing, accidental loss, destruction, or damage.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">7. Changes to This Policy</h2>
                <p className="mb-4">
                    We may update this privacy policy from time to time. We will notify you of any changes by posting the new policy on this page and updating the effective date.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">8. Contact Us</h2>
                <p className="mb-4">
                    If you have any questions about this privacy policy or our practices, please contact us at:
                </p>
                <p>Email: danteisshipping@gmail.com</p>
            </section>

            <footer className="text-center text-gray-600 text-sm">
                © {new Date().getFullYear()} <Link href="/" className="font-bold hover:underline">ShipNow</Link>. All rights reserved.
            </footer>
        </div>
    )
}

================
File: app/policies/terms-of-use/page.tsx
================
import Link from 'next/link'

export default function TermsOfUse() {
    return (
        <div className="max-w-4xl mx-auto py-12 px-4">
            <div
                className="mb-12 h-[200px] bg-gray-100 flex items-center justify-center"
                role="img"
                aria-label="ShipNow Terms of Use Header"
            >
                <h1 className="text-4xl font-bold text-gray-800">ShipNow Terms of Use</h1>
            </div>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">1. Introduction</h2>
                <p className="mb-4">
                    Welcome to <Link href="/" className="font-bold hover:underline">ShipNow</Link>. These Terms of Use govern your use of our website and any related services provided by <Link href="/" className="font-bold hover:underline">ShipNow</Link>.
                </p>
                <p className="mb-4">
                    By accessing our website, you agree to abide by these Terms of Use and to comply with all applicable laws and regulations. If you do not agree with these Terms of Use, you are prohibited from using or accessing this website or using any other services provided by <Link href="/" className="font-bold hover:underline">ShipNow</Link>.
                </p>
                <p>
                    We, <Link href="/" className="font-bold hover:underline">ShipNow</Link>, reserve the right to review and amend any of these Terms of Use at our sole discretion. Upon doing so, we will update this page and notify you through the email address you provided during registration. Any changes to these Terms of Use will take effect immediately from the date of publication.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">2. Description of Service</h2>
                <p className="mb-4">
                    <Link href="/" className="font-bold hover:underline">ShipNow</Link> provides a SaaS platform built with Next.js 15 & React 19, featuring authentication, payment processing, email functionality, and other infrastructure components to help you ship your SaaS product quickly and efficiently.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">3. User Accounts</h2>
                <p className="mb-4">
                    You need an account to use <Link href="/" className="font-bold hover:underline">ShipNow</Link>. You are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">4. Subscription Services</h2>
                <p className="mb-4">
                    <Link href="/" className="font-bold hover:underline">ShipNow</Link> offers subscription-based services. Different subscription levels provide varying levels of access and features.
                </p>
                <p className="mb-4">
                    4.1. Billing: By subscribing to a paid service, you agree to pay <Link href="/" className="font-bold hover:underline">ShipNow</Link> the applicable fees as they become due. Fees are non-refundable except as required by law or as explicitly stated in these Terms.
                </p>
                <p className="mb-4">
                    4.2. Automatic Renewal: Subscriptions automatically renew unless cancelled by you before the renewal date. You authorize us to charge your payment method for the renewal term.
                </p>
                <p className="mb-4">
                    4.3. Cancellation: You may cancel your subscription at any time. Cancellation will be effective at the end of your current billing period.
                </p>
                <p className="mb-4">
                    4.4. Changes to Subscription Terms: We reserve the right to change our subscription plans or adjust pricing for our services in any manner and at any time as we may determine in our sole and absolute discretion. Any price changes or changes to your subscription plan will take effect following notice to you.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">5. Intellectual Property</h2>
                <p className="mb-4">
                    The content on <Link href="/" className="font-bold hover:underline">ShipNow</Link>, except for User Content (defined below), including without limitation, the text, software, scripts, graphics, photos, sounds, music, videos, interactive features and the like and the trademarks, service marks and logos contained therein, are owned by or licensed to <Link href="/" className="font-bold hover:underline">ShipNow</Link>. This content is subject to copyright and other intellectual property rights under United States and foreign laws and international conventions.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">6. User Content</h2>
                <p className="mb-4">
                    {`"User Content" means any and all information and content that a user submits to, or uses with, the Site. You are solely responsible for your User Content. You assume all risks associated with use of your User Content, including any reliance on its accuracy, completeness or usefulness by others, or any disclosure of your User Content that personally identifies you or any third party.`}
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">7. Prohibited Uses</h2>
                <p className="mb-4">
                    As a user of <Link href="/" className="font-bold hover:underline">ShipNow</Link>, you agree not to:
                </p>
                <ul className="list-disc pl-8 mb-4">
                    <li>Systematically retrieve data or other content from our services to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us.</li>
                    <li>Make any unauthorized use of our services, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses.</li>
                    <li>Use our services to advertise or offer to sell goods and services unrelated to our platform.</li>
                    <li>Circumvent, disable, or otherwise interfere with security-related features of our services.</li>
                    <li>Engage in unauthorized framing of or linking to the website.</li>
                    <li>Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords.</li>
                </ul>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">8. Limitation of Liability</h2>
                <p className="mb-4">
                    To the fullest extent permitted by applicable law, in no event will <Link href="/" className="font-bold hover:underline">ShipNow</Link>, its affiliates, officers, directors, employees, agents, suppliers or licensors be liable to any person for any indirect, incidental, special, punitive, cover or consequential damages (including, without limitation, damages for lost profits, revenue, sales, goodwill, use of content, impact on business, business interruption, loss of anticipated savings, loss of business opportunity) however caused, under any theory of liability, including, without limitation, contract, tort, warranty, breach of statutory duty, negligence or otherwise, even if <Link href="/" className="font-bold hover:underline">ShipNow</Link> has been advised as to the possibility of such damages or could have foreseen such damages.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">9. Governing Law</h2>
                <p className="mb-4">
                    These Terms shall be governed and construed in accordance with the laws of the United States, without regard to its conflict of law provisions.
                </p>
            </section>

            <section className="mb-8">
                <h2 className="text-2xl font-semibold mb-4">10. Changes to Terms</h2>
                <p className="mb-4">
                    {`We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion.`}
                </p>
            </section>

            <section>
                <h2 className="text-2xl font-semibold mb-4">11. Contact Us</h2>
                <p className="mb-4">
                    If you have any questions about these Terms, please contact us at danteisshipping@gmail.com.
                </p>
            </section>

            <footer className="mt-12 text-center text-sm text-gray-500">
                <p>Last updated: {new Date().toLocaleDateString()}</p>
                <p className="mt-2">
                    © {new Date().getFullYear()} <Link href="/" className="font-bold hover:underline">ShipNow</Link>. All rights reserved.
                </p>
            </footer>
        </div>
    )
}

================
File: app/signin/layout.tsx
================
import { auth } from "@/auth";
import { authConfig } from "@/config";
import { redirect } from "next/navigation";

export default async function SigninLayout({ children }: { children: React.ReactNode }) {
  const session = await auth();
  if (session) {
    redirect(authConfig.defaultAuthCallbackUrl);
  }
  return children;
}

================
File: app/signin/page.tsx
================
import type { ShipNowLikeFormConfig } from "@/components/signinForm/ShipNowLike";
import { ShipNowLikeSigninForm } from "@/components/signinForm/ShipNowLike";
import { siteConfig } from "@/config/site";
import Image from "next/image";
import Link from "next/link";

const defaultConfig: ShipNowLikeFormConfig = {
  title: "Welcome to ShipNow",
  supportEmail: true,
  socialButtons: [
    {
      icon: "/social-icons/google.svg",
      text: "Continue with Google",
      provider: "google",
    },
    {
      icon: "/social-icons/github.svg",
      text: "Continue with Github",
      provider: "github",
    }
  ],
};

export default function LoginPage() {
  return (
    <div className="min-h-screen w-full flex flex-col">
      {/* Navigation */}
      <nav className="flex justify-between items-center ml-10">
        <Link href="/" className="flex items-center gap-2">
          <Image
            src={siteConfig.icons.logo}
            alt={siteConfig.name}
            width={32}
            height={32}
            className="w-20 h-20"
          />
        </Link>
      </nav>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center">
        <ShipNowLikeSigninForm config={defaultConfig} />
      </main>
    </div>
  );
}

================
File: app/layout.tsx
================
import GoogleAnalytics from "@/components/analytics/GoogleAnalytics";
import { siteConfig } from "@/config";
import { cn } from "@/lib/utils";
import AuthProvider from "@/providers/AuthProvider";
import { ThemeProvider } from "@/providers/ThemeProvider";
import "@/styles/globals.css";
import "@/styles/loading.css";
import { Viewport } from "next";
import { Inter } from "next/font/google";

const inter = Inter({
  subsets: ["latin"]
});

export const metadata = {
  title: siteConfig.title,
  description: siteConfig.description,
  icons: siteConfig.icons,
  metadataBase: siteConfig.metadataBase,
  openGraph: siteConfig.openGraph,
  twitter: siteConfig.twitter,
};
export const viewport: Viewport = {
  themeColor: siteConfig.themeColors,
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (

    <html lang="en" suppressHydrationWarning className={inter.className}>
      <head />
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased"
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme={siteConfig.defaultNextTheme}
          enableSystem
        >
          <AuthProvider>
            <main className="flex flex-col items-center">{children}</main>
          </AuthProvider>

        </ThemeProvider>
        {process.env.NODE_ENV === "development" ? (
          <></>
        ) : (
          <>
            <GoogleAnalytics />
          </>
        )}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import { AnimatedGradientText } from "@/components/AnimatedGradientText";
import { ShipNowLikeCTA, type ShipNowLikeCTAProps } from "@/components/cta/ShipNowLike";
import { ShipNowLikeFAQ, type ShipNowLikeFAQProps } from "@/components/faq/ShipNowLike";
import { HoverEffectFeature } from "@/components/feature/HoverEffect";
import { ShipNowLikeFeature, type ShipNowLikeFeatureProps } from "@/components/feature/ShipNowLike";
import { ShipNowLikeFooter, type ShipNowLikeFooterProps } from "@/components/footer/ShipNowLike";
import { ShipNowLikeHeader } from "@/components/header/ShipNowLike";
import { ShipNowLikeHero } from "@/components/hero/ShipNowLike";
import { MarketingStory } from "@/components/MarketingStory";
import { ShipNowPrice, type ShipNowPriceProps } from "@/components/price/ShipNow";
import { siteConfig } from "@/config/site";
import { getSocialIcon } from "@/lib/utils";
import { ChevronRight } from "lucide-react";

export default function Home() {
  const navItems = [
    { label: "Docs", href: `${siteConfig.baseUrl}/docs` },
    { label: "Templates", href: `${siteConfig.baseUrl}/templates` },
    { label: "Pricing", href: `${siteConfig.baseUrl}#pricing` },
  ];

  const heroConfig = {
    title: "Ship Your SaaS in hours, not days",
    subtitle: "Built with Next.js 15 & React 19 - Packed with auth, payments, emails & more. Focus on your SaaS while we handle the infrastructure.",
    button: {
      name: "Ship Now",
      href: "/signin"
    },
    socialProof: {
      avatars: ["/shipnow/avatar1.png", "/shipnow/avatar2.png", "/shipnow/avatar3.png"],
      description: (<div className="flex flex-col items-center ml-2">
        <div className="flex gap-0.5">
          {[...Array(5)].map((_, i) => (
            <svg
              key={i}
              className="w-5 h-5 text-yellow-400"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
        <span className="text-gray-600">from 200+ happy users</span>
      </div>)
    }
  }

  const marketingStoryConfig = {
    title: "34 Hours of Setup? Not Anymore.",
    content: (
      <>
        <p>
          Ever spent a whole weekend setting up the "basics" for your SaaS, only to realize you haven't even started building your actual product yet? Yeah, I've been there too. Multiple times. 😅
        </p>

        <p>Let me paint you a familiar picture:</p>

        <div className="bg-gray-50 p-6 rounded-lg space-y-2 font-mono text-sm">
          <p>6 hours configuring email settings and choosing templates (why is it so complicated?)</p>
          <p>+ 10 hours perfecting that landing page (only to change it again tomorrow)</p>
          <p>+ 10 hours payment integrations (hello, midnight debugging sessions!)</p>
          <p>+ 2 hours adding SEO tags (Google needs to know you exist)</p>
          <p>+ 6 hours setting up auth (and praying it's secure enough)</p>
          <p>+ ∞ hours overthinking every single decision...</p>
          <p className="font-bold border-t border-gray-200 pt-2 mt-2">= 34+ hours of pure developer "joy" 🥲</p>
        </div>

        <p>
          Sound familiar? After 10+ years of building websites and helping countless developers launch their SaaS dreams, I kept seeing the same pattern: brilliant ideas getting delayed by days (or weeks!) of setup work.
        </p>

        <p>
          Here's a crazy thought: What if you could skip all that? What if you could focus on your unique idea instead of spending hours configuring auth, payments, and email templates?
        </p>

        <p>
          That's exactly why I built ShipNow. Think of it as your SaaS launching superpower - everything you need to go from idea to paying customers in hours, not days. No more late-night debugging sessions, no more scattered documentation hunting, and definitely no more infinite configuration loops.
        </p>

        <p className="font-medium">
          Ready to ship your SaaS idea faster than you can say "npm install"?
        </p>
      </>
    )
  }

  const shipNowFeaturesConfig: ShipNowLikeFeatureProps[] = [
    {
      title: "Ready-to-Use Templates",
      subTitle: "Launch your SaaS with professional templates, not blank pages",
      features: [
        "Start with battle-tested templates from popular websites",
        "Professional landing pages, auth flows, and payment screens",
        "Fully customizable components and layouts",
        "Built with modern design principles and best practices"
      ],
      image: "/shipnow/templates-screenshot.png",
      badge: {
        text: "Templates",
        variant: "default" as const
      },
      textPosition: "left" as const
    },
    {
      title: "Unified Payment System",
      subTitle: "Integrate Once, Multiple Payment Methods",
      features: [
        "Multiple payment providers in one unified event handlers",
        "Zero-effort provider switching with consistent interfaces",
        "Automatic price sync between payment dashboard and website",
        "Built-in customer portal for hassle-free billing management",
        "Support both subscription and one-time payments"
      ],
      textPosition: "right" as const,
      badge: {
        text: "Payment",
        variant: "default" as const
      },
      codeBlock: {
        language: "typescript",
        filename: "payment.ts",
        tabs: [
          {
            name: "[step1] config.ts",
            code: `// choose your payment provider
export type PaymentConfig = {
  paymentProvider: "stripe" | "paddle"
}

export const paymentConfig: PaymentConfig = {
  paymentProvider: "stripe"
}
`
          },
          {
            name: "[step2] .env",
            code: `# set your payment provider keys
# Stripe
STRIPE_SECRET_KEY=sk_xxxxx
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_xxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxx

# Paddle
PADDLE_API_KEY=xxxxx
NEXT_PUBLIC_PADDLE_CLIENT_TOKEN=xxxxx
PADDLE_NOTIFICATION_WEBHOOK_SECRET=xxxxx`
          },
          {
            name: "[step3] webhookEventEmitter.ts",
            code: `// register event handlers
eventEmitter.on('subscription.succeeded', async (eventId: string, subscriptionId: string) => {
// handle new succeeded subscription
});

eventEmitter.on('subscription.renewed', async (eventId: string, subscriptionId: string) => {
// handle subscription renewed
});

eventEmitter.on('subscription.plan_updated', async (eventId: string, data) => {
// handle subscription plan update(upgrade or downgrade)
});

eventEmitter.on('payment.succeeded', async (eventId: string, paymentId: string) => {
// handle payment succeeded
});       `
          }
        ]
      }
    },
    {
      title: "Flexible Authentication",
      subTitle: "Enterprise-grade auth without the complexity",
      features: [
        "Multiple auth methods including Social and Magic Links",
        "Pre-built, secure authentication components",
        "Easy-to-use page protection hooks",
        "Role-based access control"
      ],
      badge: {
        text: "Authentication",
        variant: "default" as const
      },
      textPosition: "left" as const,
      codeBlock: {
        language: "typescript",
        filename: "auth.ts",
        tabs: [
          {
            name: ".env",
            code: `// set your auth provider keys
# Google
GOOGLE_CLIENT_ID=xxxxx
GOOGLE_CLIENT_SECRET=xxxxx

# Apple
APPLE_ID=xxxxx
APPLE_SECRET=xxxxx
...`
          },
          {
            name: "demo.tsx",
            code: `// client side auth demo
import { useSession } from "next-auth/react"

export default function ClientSideAuthDemo() {
  const { data: session } = useSession()
  ...
}

// server side auth demo
import { auth } from "@/auth"

export default async function ServerSideAuthDemo() {
  const session = await auth()
  ...
}
`
          },
          {
            name: "protectedPage.tsx",
            code: `// protected page demo
import { SignedIn } from "@/components/auth/SignedIn"

export function ProtectedPage() {
  return (
    <SignedIn>
      <div>Protected Page</div>
    </SignedIn>
  )
}
`
          }
        ]
      }
    }
  ]

  const hoverEffectFeaturesConfig = [
    {
      title: "Next.js 15 Framework",
      description: "Built with the latest App Router architecture for optimal performance and developer experience.",
      icon: '/shipnow/nextjs.svg',
      index: 0
    },
    {
      title: "Secure Authentication",
      description: "Enterprise-grade auth with NextAuth supporting multiple providers and magic links.",
      icon: '/shipnow/next-auth.svg',
      index: 1
    },
    {
      title: "Prisma ORM",
      description: "Type-safe database operations with Prisma's modern database toolkit and migrations.",
      icon: '/shipnow/prisma.svg',
      index: 2
    },
    {
      title: "Shadcn UI Components",
      description: "Beautiful and accessible components built with Radix UI and Tailwind CSS.",
      icon: '/shipnow/shadcn-ui.svg',
      index: 3
    },
    {
      title: "React Email Templates",
      description: "Professional email communications with responsive React-powered templates.",
      icon: '/shipnow/react-email.svg',
      index: 4
    },
    {
      title: "TypeScript Enhanced",
      description: "End-to-end type safety with TypeScript for robust application development.",
      icon: '/shipnow/typescript.svg',
      index: 5
    },
    {
      title: "Payment Integration",
      description: "Unified payment system supporting multiple providers, including Stripe and Paddle",
      icon: '/shipnow/credit-card.svg',
      index: 6
    },
    {
      title: "Analytics Ready",
      description: "Built-in Google Analytics for tracking user behavior and performance metrics.",
      icon: '/shipnow/google-analytics.svg',
      index: 7
    }
  ];

  const shipNowPriceConfig: ShipNowPriceProps = {
    title: "Powerful Features,Simple Pricing",
    subTitle: "Everything you need to start your SaaS. Ship Now, Earn Now.",
    card: {
      title: "Next 15 Starter Kit",
      description: "Pay once. Build unlimited projects!",
      features: [
        "Next.js 15 boilerplate",
        "battle-tested SaaS templates",
        "Components & animations",
        "SEO-friendly",
        "Stripe & Paddle integration",
        "Email integration",
        "Multi database support",
        "Analytics integration",
        "Social Oauth & Magic Links",
        "Technical support for your first ship",
      ],
      price: {
        priceId: "price_1QfjqhFVUKzpyofCDAlWZ6Le",
        isSubscription: false,
      },
      buttonText: "Get access(Sandbox)"
    }
  }

  const faqs: ShipNowLikeFAQProps = {
    categories: [
      {
        id: 'general',
        label: 'General',
        qas: [
          {
            question: "What do I get exactly with ShipNow?",
            answer: (
              <>
                <p className="mb-4">
                  After purchase, you will get lifetime access to a complete Next.js 15 & React 19 SaaS starter kit, including:
                </p>
                <ul className="list-disc pl-6 mb-4 space-y-2">
                  <li>Full source code and GitHub repository access</li>
                  <li>Enterprise-grade authentication with social logins and magic links</li>
                  <li>Unified payment system supporting Stripe and Paddle</li>
                  <li>Professional email templates</li>
                  <li>Support multiple databases</li>
                  <li>Pre-built landing pages and marketing components</li>
                  <li>SEO optimization and analytics integration</li>
                </ul>
                <p>
                  Everything is built with the latest App Router architecture and TypeScript for optimal type safety and developer experience. Plus, you'll receive lifetime updates as we continue to enhance the repository.
                </p>
              </>
            )
          },
          {
            question: "Do I need to be an expert to use ShipNow?",
            answer: "No, as long as you're comfortable with React & NextJS. We provide a comprehensive guide and support to help you get started and build your SaaS quickly. All components are designed to be configurable, and with the help of AI prompts, you can even complete a full SaaS without writing any code."
          },
          {
            question: "With so many excellent free SaaS Starter Kits available, why should I purchase ShipNow?",
            answer: (
              <>
                <ol className="list-decimal pl-6 space-y-2">
                  <li>
                    Open-source projects often lack customization options and scalability, making development more challenging.
                  </li>
                  <li>
                    ShipNow provides comprehensive documentation to help you build quickly.
                  </li>
                  <li>
                    Unlike open-source projects that may become outdated, ShipNow receives regular updates to keep you on the latest version.
                  </li>
                  <li>
                    You're not just buying code – you're getting technical support from the ShipNow team to help you avoid common pitfalls in your SaaS journey. Ship now and let's get connected.
                  </li>
                </ol>
              </>
            )
          },
          {
            question: "How do I access the repository after purchase?",
            answer: (
              <>
                <p className="mb-4">
                  After your purchase, follow these simple steps to access the codebase:
                </p>
                <ol className="list-decimal pl-6 space-y-2">
                  <li>Visit your account dashboard and locate your purchase in the "Orders" section</li>
                  <li>Enter your GitHub username to activate your access</li>
                  <li>Check your GitHub notifications for an invitation to the ShipNow repository</li>
                  <li>Accept the invitation to gain immediate access to the complete codebase</li>
                </ol>
              </>
            )
          }
        ]
      },
      {
        id: 'payment',
        label: 'Payment',
        qas: [
          {
            question: "Are there any other costs associated with using ShipNow?",
            answer: "No, there are no other subscription or hidden cost from ShipNow. Many platforms offer free tiers so that you can launch your saas for free."
          },
          {
            question: "Can I get a refund?",
            answer: "Refunds are available for orders that haven't been activated yet. Once you've activated your order and received access to the private GitHub repository, the purchase becomes final as you get lifetime access to ShipNow and all future updates."
          }
        ]
      },
      {
        id: 'license',
        label: 'License',
        qas: [
          {
            question: "How many products can I use ShipNow for?",
            answer: "You can use it for unlimited personal and commercial projects."
          },
          {
            question: "What are the usage restrictions?",
            answer: (
              <>
                <p className="mb-2">
                  You are not allowed to provide the boilerplate code as a service to others, for example, you can't sell ShipNow Code as a service.
                </p>
                <p>
                  Currently, ShipNow is not licensed for use in open source projects unless the original source code is heavily modified. This restriction is in place to protect the value of the product for paying customers.
                </p>
              </>
            )
          },
          {
            question: "Does my license expire?",
            answer: "No, your license does not expire. You will have lifetime access to ShipNow and all future updates."
          }
        ]
      }
    ]
  }
  const ctaConfig: ShipNowLikeCTAProps = {
    title: "Ship Now, Earn Now",
    subTitle: "Launch faster with production-ready infrastructure. No more weeks spent on basic setup",
    buttons: [
      {
        text: "Ship Now",
        href: "/signin"
      }
    ]
  }

  const footerConfig: ShipNowLikeFooterProps = {
    slogan: "Ship Now, Earn Now",
    socialLinks: Object.entries(siteConfig.socialAccounts)
      .filter(([_, account]) => account?.url)
      .map(([platform, account]) => ({
        icon: getSocialIcon(platform),
        url: account.url,
        label: platform.charAt(0).toUpperCase() + platform.slice(1)
      })),
    columns: [
      {
        title: "About",
        items: [
          { label: "Features", href: `${siteConfig.baseUrl}#features` },
          { label: "Pricing", href: `${siteConfig.baseUrl}#pricing` },
          { label: "FAQ", href: `${siteConfig.baseUrl}#faq` }
        ]
      },
      {
        title: "Resources",
        items: [
          { label: "Docs", href: `${siteConfig.baseUrl}/docs` },
          { label: "Templates", href: `${siteConfig.baseUrl}/templates` },
        ]
      }
    ],
    ctaButton: {
      text: "Build with ShipNow",
      href: `${siteConfig.baseUrl}`
    }
  };

  return (
    <>
      <ShipNowLikeHeader loginButtonName="Try It Free" className="h-14" navItems={navItems} />
      <div className="max-w-8xl mx-auto mt-32">
        <div className="z-10 flex items-center justify-center">
          <AnimatedGradientText>
            🎉 <hr className="mx-2 h-4 w-px shrink-0 bg-gray-300" />{" "}
            <span className="bg-linear-to-r from-[#ffaa40] via-[#9c40ff] to-[#ffaa40] bg-size-[var(--bg-size)_100%] bg-clip-text text-transparent">
              ShipNow Template
            </span>
            <ChevronRight className="ml-1 size-3 transition-transform duration-300 ease-in-out group-hover:translate-x-0.5" />
          </AnimatedGradientText>
        </div>
        <section id="hero">
          <ShipNowLikeHero {...heroConfig} />
        </section>
        <section id="marketing-story">
          <MarketingStory
            title={marketingStoryConfig.title}
            content={marketingStoryConfig.content}
          />
        </section>
        <section id="features">
          {shipNowFeaturesConfig.map((featureConfig, index) => (
            <ShipNowLikeFeature key={`feature-${index} `} {...featureConfig} />
          ))}
        </section>
        <section id="solid-foundation">
          <h2 className="mt-20 text-4xl font-bold text-center">Solid foundation</h2>
          <HoverEffectFeature features={hoverEffectFeaturesConfig} />
        </section>
        <section id="pricing">
          <ShipNowPrice {...shipNowPriceConfig} />
        </section>
        <section id="faq">
          <ShipNowLikeFAQ {...faqs} />
        </section>
        <section id="cta">
          <ShipNowLikeCTA {...ctaConfig} />
        </section>
        <ShipNowLikeFooter {...footerConfig} />
      </div>
    </>
  );
}

================
File: components/analytics/GoogleAnalytics.tsx
================
"use client";

import Script from "next/script";

const GoogleAnalytics = () => {
  const googleTrackingId = process.env.NEXT_PUBLIC_GOOGLE_ID;
  return (
    <>
      {googleTrackingId ? (
        <>
          <Script
            strategy="afterInteractive"
            src={`https://www.googletagmanager.com/gtag/js?id=${googleTrackingId}`}
          />
          <Script
            id="gtag-init"
            strategy="afterInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', '${googleTrackingId}', {
                page_path: window.location.pathname,
                });
              `,
            }}
          />
        </>
      ) : (
        <></>
      )}
    </>
  );
};

export default GoogleAnalytics;

================
File: components/auth/SignedIn.tsx
================
'use client'

import { authConfig } from "@/config"
import { SessionProvider, useSession } from "next-auth/react"
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
export function SignedIn({ children }: { children: React.ReactNode }) {
  const { data: session } = useSession()
  const router = useRouter()

  useEffect(() => {
    if (!session || !session.user) {
      router.push(authConfig.signInPage)
    }
  }, [session, router])

  if (!session) {
    return null
  }

  return (
    <SessionProvider session={session}>
      {children}
    </SessionProvider>
  )
}

================
File: components/auth/SignInButton.tsx
================
"use client"
import { Button } from "@/components/ui/button"
import { signInAction } from "@/lib/actions/auth"
export function SignInButton({
  provider,
  callbackUrl,
  children = "Sign In",
  ...props
}: { provider?: string, callbackUrl?: string, children?: React.ReactNode } & React.ComponentPropsWithRef<typeof Button>) {
  return (
    <Button
      {...props}
      onClick={async () => {
        const redirectUrl = await signInAction(provider, callbackUrl)
        if (redirectUrl) {
          window.location.href = redirectUrl;
        }
      }}
    >
      {children}
    </Button>
  )
}

================
File: components/auth/SignOutButton.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { signOutAction } from "@/lib/actions/auth"
export function SignOutButton({ children = "Sign Out", ...props }: { children?: React.ReactNode } & React.ComponentPropsWithRef<typeof Button>) {
  return (
    <Button {...props}
      onClick={async () => {
        await signOutAction()
      }}
    >
      {children}
    </Button>
  )
}

================
File: components/cta/NotionLike.tsx
================
import { SignInButton } from '@/components/auth/SignInButton';
import Image from 'next/image';
interface CTACard {
  title: string;
  tryButtonText: string;
  previewImage: string;
}

interface Props {
  cards: CTACard[];
}

export const NotionLikeCTA = ({ cards }: Props) => {
  return (
    <div className="w-full mx-auto px-4 sm:px-6 lg:px-8 py-20">
      {/* Get Started Title */}
      <h2 className="text-5xl font-bold mb-12">
        Get started.
      </h2>

      {/* CTA Cards Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {cards.map((card, index) => (
          <div key={index} className="bg-neutral-50 rounded-2xl h-[400px]">
            {/* Content Container */}
            <div className="flex flex-col h-full">
              {/* Title and Buttons */}
              <div className="p-4">
                <h3 className="text-3xl font-bold mb-4">
                  {card.title}
                </h3>
                <div className="flex gap-4">
                  <SignInButton className="bg-[#0066FF] hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium">
                    {card.tryButtonText}
                  </SignInButton>
                </div>
              </div>
              <div className="relative grow">
                <div className="absolute right-0 bottom-0 w-[80%] bg-neutral-50 rounded-xl h-full">
                  <div className="absolute right-0 aspect-4/3 rounded-xl overflow-hidden h-full">
                    <Image
                      width={320}
                      height={240}
                      src={card.previewImage}
                      alt={`${card.title} preview`}
                      className="object-contain object-bottom w-full h-full"
                    />
                  </div>
                </div>
              </div>
              {/* Preview Image Container */}

            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: components/cta/ShipNowLike.tsx
================
import { cn } from "@/lib/utils";
import { LucideIcon } from "lucide-react";

interface ButtonConfig {
  text: string;
  icon?: LucideIcon;
  href?: string;
  onClick?: () => void;
  className?: string;
}

export interface ShipNowLikeCTAProps {
  title: string;
  subTitle?: string;
  buttons: ButtonConfig[];
  className?: string;
}

export function ShipNowLikeCTA({
  title,
  subTitle,
  buttons,
  className,
}: ShipNowLikeCTAProps) {
  return (
    <div className={cn(
      "relative  py-20 px-4 text-center",
      className
    )}>

      <h2 className="text-4xl font-bold mb-6">{title}</h2>

      {subTitle && (
        <p className="text-gray-600 mb-10 max-w-2xl mx-auto">
          {subTitle}
        </p>
      )}

      <div className="flex gap-4 justify-center flex-wrap">
        {buttons.map((button, index) => {
          const ButtonWrapper = button.href ? 'a' : 'button';
          return (
            <ButtonWrapper
              key={index}
              href={button.href}
              onClick={button.onClick}
              className={cn(
                "inline-flex items-center gap-2 px-6 py-3 rounded-full font-medium transition-colors",
                "bg-gray-900 text-white hover:bg-gray-800",
                button.className
              )}
            >
              {button.icon && <button.icon className="w-5 h-5" />}
              {button.text}
            </ButtonWrapper>
          );
        })}
      </div>
    </div>
  );
}

================
File: components/faq/NotionLike.tsx
================
"use client"
import { useState } from 'react';

interface FAQItem {
  question: string;
  answer: React.ReactNode;
}



export function NotionLikeFAQ({ faqData }: { faqData: FAQItem[] }) {
  const [openItems, setOpenItems] = useState<Record<number, boolean>>({});

  const toggleItem = (index: number) => {
    setOpenItems(prev => ({
      ...prev,
      [index]: !prev[index]
    }));
  };

  return (
    <div className="w-full mx-auto px-4 py-16">
      <h2 className="text-5xl font-bold text-center mb-12">
        Questions & answers
      </h2>

      <div className="divide-y divide-neutral-200">
        {faqData.map((item, index) => (
          <div key={index} className="py-4">
            <button
              className="w-full flex justify-between items-start text-left"
              onClick={() => toggleItem(index)}
            >
              <span className="text-base font-medium pr-4">
                {item.question}
              </span>
              <span className="text-xl leading-none">
                {openItems[index] ? '−' : '+'}
              </span>
            </button>

            <div
              className={`mt-2 text-neutral-600 overflow-hidden transition-all duration-300 ease-in-out ${openItems[index] ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                }`}
            >
              {item.answer}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: components/faq/ShipNowLike.tsx
================
"use client"

import { cn } from '@/lib/utils';
import { ChevronDown } from 'lucide-react';
import { useState } from 'react';

type FAQCategory = {
  id: string;
  label: string;
  qas: FAQItem[];
}

type FAQItem = {
  question: string;
  answer: React.ReactNode;
}

export type ShipNowLikeFAQProps = {
  title?: string;
  categories: FAQCategory[];
  className?: string;
  // 样式配置
  styles?: {
    activeTabBg?: string;
    activeTabText?: string;
    inactiveTabBg?: string;
    inactiveTabText?: string;
    questionText?: string;
    answerText?: string;
    dividerColor?: string;
  };
}

export const ShipNowLikeFAQ = ({
  title = "Frequently Asked Questions",
  categories,
  className,
  styles = {
    activeTabBg: 'bg-black dark:bg-white',
    activeTabText: 'text-white dark:text-black',
    inactiveTabBg: 'bg-white dark:bg-black',
    inactiveTabText: 'text-gray-600 dark:text-gray-400',
    questionText: 'text-black dark:text-white',
    answerText: 'text-gray-600 dark:text-gray-400',
    dividerColor: 'border-gray-200 dark:border-gray-700'
  }
}: ShipNowLikeFAQProps) => {
  const [activeCategory, setActiveCategory] = useState(categories[0].id);
  const [openItems, setOpenItems] = useState<string[]>([]);

  const toggleItem = (question: string) => {
    setOpenItems(prev =>
      prev.includes(question)
        ? prev.filter(item => item !== question)
        : [...prev, question]
    );
  };

  const currentQAs = categories.find(cat => cat.id === activeCategory)?.qas || [];

  return (
    <div className={cn("w-full max-w-4xl mx-auto px-4 py-16", className)}>
      <h2 className="text-4xl font-bold text-center mb-12">{title}</h2>

      {/* Categories */}
      <div className="flex flex-wrap justify-center gap-4 mb-8">
        {categories.map((category) => (
          <button
            key={category.id}
            onClick={() => setActiveCategory(category.id)}
            className={cn(
              "px-4 py-1.5 rounded-full transition-colors text-sm",
              activeCategory === category.id
                ? `${styles.activeTabBg} ${styles.activeTabText}`
                : `${styles.inactiveTabBg} ${styles.inactiveTabText} border border-gray-200`
            )}
          >
            {category.label}
          </button>
        ))}
      </div>

      {/* FAQ Items */}
      <div className="space-y-4">
        {currentQAs.map((item) => (
          <div
            key={item.question}
            className={cn("border-b", styles.dividerColor)}
          >
            <button
              onClick={() => toggleItem(item.question)}
              className="w-full flex justify-between items-center py-6"
            >
              <span className={cn("text-lg font-medium text-left", styles.questionText)}>
                {item.question}
              </span>
              <ChevronDown
                className={cn(
                  "w-5 h-5 transition-transform",
                  openItems.includes(item.question) ? "rotate-180" : ""
                )}
              />
            </button>

            {openItems.includes(item.question) && (
              <div className={cn("pb-6", styles.answerText)}>
                {item.answer}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: components/feature/HoverEffect.tsx
================
import { cn } from "@/lib/utils";
import Image from "next/image";
interface FeatureProps {
  title: string;
  description: string;
  icon: string;
  index: number;
}
export const HoverEffectFeature = ({ features }: { features: FeatureProps[] }) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4  relative z-10 py-10 max-w-7xl mx-auto">
      {features.map((feature, index) => (
        <div
          key={`hover-effect-feature-${index}`}
          className={cn(
            "flex flex-col lg:border-r  py-10 relative group/feature dark:border-neutral-800",
            (index === 0 || index === 4) && "lg:border-l dark:border-neutral-800",
            index < 4 && "lg:border-b dark:border-neutral-800"
          )}
        >
          {index < 4 && (
            <div className="opacity-0 group-hover/feature:opacity-100 transition duration-200 absolute inset-0 h-full w-full bg-linear-to-t from-neutral-100 dark:from-neutral-800 to-transparent pointer-events-none" />
          )}
          {index >= 4 && (
            <div className="opacity-0 group-hover/feature:opacity-100 transition duration-200 absolute inset-0 h-full w-full bg-linear-to-b from-neutral-100 dark:from-neutral-800 to-transparent pointer-events-none" />
          )}
          <div className="mb-4 relative z-10 px-10 text-neutral-600 dark:text-neutral-400">
            <Image
              width={24}
              height={24}
              src={feature.icon}
              alt={`${feature.title} icon`}
              className="w-6 h-6" // 设置合适的图标大小
            />
          </div>
          <div className="text-lg font-bold mb-2 relative z-10 px-10">
            <div className="absolute left-0 inset-y-0 h-6 group-hover/feature:h-8 w-1 rounded-tr-full rounded-br-full bg-neutral-300 dark:bg-neutral-700 group-hover/feature:bg-blue-500 transition-all duration-200 origin-center" />
            <span className="group-hover/feature:translate-x-2 transition duration-200 inline-block text-neutral-800 dark:text-neutral-100">
              {feature.title}
            </span>
          </div>
          <p className="text-sm text-neutral-600 dark:text-neutral-300 max-w-xs relative z-10 px-10">
            {feature.description}
          </p>
        </div>
      ))}
    </div>
  )
}

================
File: components/feature/NotionLike.tsx
================
import Image from "next/image";

interface FeatureCard {
  icon: string;
  title: string;
  description: string;
}

interface Props {
  title: string;
  subtitle: string;
  linkText: string;
  linkHref: string;
  features: FeatureCard[];
  screenshot: {
    src: string;
    alt: string;
  };
}

export const NotionLikeFeature = ({
  title,
  subtitle,
  linkText,
  linkHref,
  features,
  screenshot
}: Props) => {
  return (
    <div className="mx-auto px-4 sm:px-6 lg:px-8 py-20">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
        {/* Left Column - Text Content */}
        <div>
          <h3 className="text-5xl font-bold tracking-tight mb-4">
            {title}
          </h3>
          <p className="text-xm text-gray-600 mb-4">
            {subtitle}
          </p>
          <a
            href={linkHref}
            className="inline-flex items-center text-[#0066FF] hover:text-blue-700 font-medium"
          >
            {linkText}
            <svg
              className="ml-2 w-4 h-4"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </a>
        </div>

        {/* Right Column - Feature Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
          {features.map((feature, index) => (
            <div key={index} className="flex flex-col items-start">
              <Image className="mb-4" src={feature.icon} alt={feature.title} width={60} height={60} />
              <h4 className="text-xm font-semibold mb-2">
                {feature.title}
              </h4>
              <p className="text-gray-600 text-sm">
                {feature.description}
              </p>
            </div>
          ))}
        </div>

      </div>
      {/* Screenshot Section */}
      <div className="relative rounded-xl overflow-hidden bg-[#FFF3D1] p-8 mt-6">
        <div className="relative z-10">
          <Image
            width={1024}
            height={768}
            src={screenshot.src}
            alt={screenshot.alt}
            className="w-full rounded-lg shadow-2xl"
          />
        </div>
      </div>
    </div >
  );
};

================
File: components/feature/ShipNowLike.tsx
================
import { CodeBlock, type CodeBlockProps } from "@/components/CodeBlock";
import { Badge } from "@/components/ui/badge";
import { Check } from "lucide-react";
import Image from "next/image";

export interface ShipNowLikeFeatureProps {
  badge: {
    text: string;
    variant?: "default" | "secondary" | "outline";
  };
  textPosition?: "left" | "right";
  title: string;
  subTitle: string;
  features: string[];
  codeBlock?: CodeBlockProps;
  image?: string;
  className?: string;
}

export const ShipNowLikeFeature = ({
  badge,
  title,
  textPosition = "left",
  subTitle,
  features,
  codeBlock,
  image,
  className = "",
}: ShipNowLikeFeatureProps) => {
  return (
    <div className={`w-full py-10 ${className}`}>
      <div className="container mx-auto">
        <div className="grid container p-8 grid-cols-1 gap-16 lg:grid-cols-2">

          <div className={`${textPosition === "right" ? "lg:order-last" : ""}`}>
            {/* Text Content */}
            <div className="flex gap-10 flex-col h-full">
              <div className="flex gap-4 flex-col">
                <div>
                  <Badge variant={badge.variant || "outline"}>{badge.text}</Badge>
                </div>
                <div className="flex gap-2 flex-col">
                  <h2 className="text-3xl lg:text-4xl font-bold tracking-tighter max-w-xl text-left font-regular">
                    {title}
                  </h2>
                  <p className="text-lg leading-relaxed tracking-tight text-muted-foreground max-w-xl text-left">
                    {subTitle}
                  </p>
                </div>
              </div>
              <div className="grid lg:pl-6 grid-cols-1 sm:grid-cols-3 items-start lg:grid-cols-1 gap-6">
                {features.map((feature, index) => (
                  <div key={index} className="flex flex-row gap-6 items-start">
                    <Check className="w-4 h-4 text-primary" />
                    <div className="flex flex-col gap-1">
                      <p className="text-muted-foreground text-sm">
                        {feature}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className={`${textPosition === "right" ? "lg:order-first" : ""} h-full`}>
            {/* Right Content - CodeBlock/Image */}
            <div className="w-full h-full min-h-[400px]">
              {codeBlock && <CodeBlock {...codeBlock} />}
              {image && <Image
                width={1024}
                height={768}
                src={image}
                alt="Feature Image"
                className="w-full h-full object-cover rounded-lg shadow-md"
              />}
            </div>
          </div>

        </div>
      </div>
    </div>
  );
}

================
File: components/footer/NotionLike.tsx
================
import { siteConfig } from '@/config/site';
import Image from 'next/image';
import Link from 'next/link';
interface SocialLink {
  icon: string;
  url: string;
  label: string;
}
interface FooterLink {
  label: string;
  url: string;
}

interface FooterColumn {
  title: string;
  links: FooterLink[];
}

export interface NotionLikeFooterProps {
  logo: string;
  socialLinks: SocialLink[];
  columns: FooterColumn[];
}



export function NotionLikeFooter({ footerConfig }: { footerConfig: NotionLikeFooterProps }) {
  return (
    <footer className="max-w-7xl mx-auto px-6 py-16">
      <div className="grid grid-cols-1 md:grid-cols-[200px_1fr] gap-12">
        {/* Left Column */}
        <div className="space-y-8">
          {/* Logo */}
          <Link href="/" className="block">
            <Image
              src={siteConfig.icons.logo}
              alt={siteConfig.name + " Logo"}
              width={100}
              height={30}
              className="h-8 w-auto"
            />
          </Link>

          {/* Social Links */}
          <div className="flex gap-4">
            {footerConfig.socialLinks.map((social: SocialLink) => (
              <a
                key={social.label}
                href={social.url}
                className="text-neutral-600 hover:text-neutral-900"
                aria-label={social.label}
              >
                <Image
                  src={social.icon}
                  alt={social.label}
                  width={20}
                  height={20}
                />
              </a>
            ))}
          </div>

          {/* Copyright */}
          <p className="text-sm text-neutral-600">Copyright © {new Date().getFullYear()} All Rights Reserved.</p>
        </div>

        {/* Right Columns */}
        <div className="grid grid-cols-2 md:flex md:flex-nowrap gap-8">
          {footerConfig.columns.map((column) => (
            <div key={column.title} className="md:flex-1">
              <h3 className="font-medium mb-4">{column.title}</h3>
              <ul className="space-y-3">
                {column.links.map((link) => (
                  <li key={link.label}>
                    <a
                      href={link.url}
                      className="text-sm text-neutral-600 hover:text-neutral-900"
                    >
                      {link.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>
    </footer>
  );
}

================
File: components/footer/ShipNowLike.tsx
================
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";
import Image from "next/image";
import Link from "next/link";
interface SocialLink {
  icon: string;
  url: string;
  label: string;
}

interface NavItem {
  label: string;
  href: string;
  icon?: string;
}

interface NavColumn {
  title: string;
  items: NavItem[];
}

interface CTAButtonConfig {
  text: string;
  href: string;
  className?: string;
}

export interface ShipNowLikeFooterProps {
  slogan: string;
  socialLinks: SocialLink[];
  columns: NavColumn[];
  ctaButton?: CTAButtonConfig;
  className?: string;
}

export function ShipNowLikeFooter({
  slogan,
  socialLinks,
  columns,
  ctaButton,
  className
}: ShipNowLikeFooterProps) {
  return (
    <footer className={cn("py-12", className)}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-[200px_1fr] gap-40">
          {/* Brand Column */}
          <div className="space-y-4">
            <div className="flex items-center gap-2 mb-4">
              <Image
                src={siteConfig.icons.logo}
                alt={`${siteConfig.name} Logo`}
                width={32}
                height={32}
                className="rounded"
              />
              <span className="font-semibold text-xl">{siteConfig.name}</span>
            </div>
            <p className="text-gray-600 mb-6">{slogan}</p>

            {/* Social Links */}
            <div className="flex gap-4">
              {socialLinks.map((social: SocialLink) => (
                <a
                  key={social.label}
                  href={social.url}
                  className="text-neutral-600 hover:text-neutral-900"
                  aria-label={social.label}
                >
                  <Image
                    src={social.icon}
                    alt={social.label}
                    width={20}
                    height={20}
                  />
                </a>
              ))}
            </div>

            {/* CTA Button */}
            {ctaButton && (
              <div className={cn(`mt-6 inline-flex items-center gap-2 border border-gray-200 rounded-full px-4 py-2 hover:bg-gray-100`, ctaButton.className)}>
                <Link href={ctaButton.href} className="text-sm text-gray-600">
                  {ctaButton.text}
                </Link>
              </div>
            )}
          </div>

          {/* Navigation Columns */}
          <div className="grid grid-cols-2 md:flex md:flex-nowrap gap-8">
            {columns.map((column, index) => (
              <div key={column.title} className="md:flex-1">
                <h3 className="font-semibold light:text-gray-900 mb-4">
                  {column.title}
                </h3>
                <ul className="space-y-3">
                  {column.items.map((item, itemIndex) => (
                    <li key={itemIndex}>
                      <Link
                        href={item.href}
                        className="text-gray-600 hover:text-gray-900 inline-flex items-center gap-2"
                      >
                        {item.icon && <span>{item.icon}</span>}
                        {item.label}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

        </div>
      </div>
      <div className="border-t border-gray-200 mt-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <p className="text-gray-600 text-sm">
              Copyright © {new Date().getFullYear()} All Rights Reserved.
            </p>
            <div className="flex gap-4">
              <Link href="/policies/privacy-policy" className="text-gray-600 hover:text-gray-900 text-sm">
                Privacy Policy
              </Link>
              <Link href="/policies/terms-of-use" className="text-gray-600 hover:text-gray-900 text-sm">
                Terms of Use
              </Link>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}

================
File: components/header/navItem/NavDropdownItem.tsx
================
import Link from "next/link";

export const NavDropdownItem = ({
  href,
  children,
  className,
}: {
  href: string;
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <Link
      href={href}
      className={`block px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-800 ${className}`}
    >
      {children}
    </Link>
  );
};

================
File: components/header/navItem/NavDropdownItemGroup.tsx
================
import { motion } from 'framer-motion';

const transition = {
  type: "spring",
  mass: 0.5,
  damping: 11.5,
  stiffness: 100,
  restDelta: 0.001,
  restSpeed: 0.001,
};

export const NavDropdownItemGroup = ({
  label,
  active,
  setActive,
  children,
  unactiveClassName,
  activeClassName,
  dropdownListClassName,
}: {
  label: string;
  active?: string | null;
  setActive?: (item: string | null) => void;
  children: React.ReactNode;
  unactiveClassName?: string;
  activeClassName?: string;
  dropdownListClassName?: string;
}) => {
  return (
    <div
      className="relative"
      onMouseEnter={() => setActive?.(label)}
    >
      <button className={`
        inline-flex items-center text-sm font-medium rounded-md px-4 py-2
        ${active === label
          ? `bg-neutral-100 dark:bg-neutral-800 text-black dark:text-white ${activeClassName}`
          : `text-neutral-700 hover:text-black dark:text-neutral-300 dark:hover:text-white ${unactiveClassName}`
        }
      `}>
        {label}
        <motion.svg
          className="ml-1 w-4 h-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          animate={{ rotate: active === label ? 180 : 0 }}
          transition={{ duration: 0.2 }}
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </motion.svg>
      </button>

      {active === label && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={transition}
          className="absolute left-0 mt-1 min-w-[180px]"
        >
          <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
            <div className={`relative bg-white dark:bg-black py-2 ${dropdownListClassName}`}>
              {children}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

================
File: components/header/navItem/NavLinkItem.tsx
================
import { CustomLink } from "@/components/CustomLink";
export const NavLinkItem = ({
  label,
  href,
  className,
}: {
  label: string;
  href: string;
  className?: string;
}) => {
  return (
    <CustomLink
      href={href}
      className={`inline-flex items-center text-sm font-medium rounded-md px-4 py-2 text-neutral-700 hover:bg-neutral-100 hover:text-black dark:text-neutral-300 dark:hover:bg-neutral-800 dark:hover:text-white ${className}`}
    >
      {label}
    </CustomLink>
  );
};

================
File: components/header/NotionLike.tsx
================
"use client";
import { SignInButton } from "@/components/auth/SignInButton";
import { NavDropdownItem } from "@/components/header/navItem/NavDropdownItem";
import { NavDropdownItemGroup } from "@/components/header/navItem/NavDropdownItemGroup";
import { NavLinkItem } from "@/components/header/navItem/NavLinkItem";
import { ThemedButton } from "@/components/ThemedButton";
import { authConfig } from "@/config/index";
import { siteConfig } from "@/config/site";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";

interface NavDropdownItem {
  href: string;
  name: string;
}

interface NavItem {
  label: string;
  href?: string;
  dropdownItems?: NavDropdownItem[];
}

export interface NotionLikeHeaderProps {
  navItems: NavItem[];
  loginButtonName?: string;
  className?: string;
}
export const NotionLikeHeader = ({ navItems, loginButtonName, className }: NotionLikeHeaderProps) => {
  const [active, setActive] = useState<string | null>(null);

  return (
    <header className={`fixed z-50 top-0 left-0 right-0 bg-white dark:bg-black border-b border-neutral-200 dark:border-neutral-800 ${className}`}>
      <div className="max-w-8xl mx-auto px-4 sm:px-6 h-full">
        <nav
          className="flex items-center h-full"
          onMouseLeave={() => setActive(null)}
        >

          <Link href="/" className="shrink-0">
            <Image
              src={siteConfig.icons.logo}
              alt="Logo"
              width={100}
              height={30}
              className="h-[22px] w-auto"
            />
          </Link>

          <div className="flex items-center space-x-1 ml-8">
            {navItems.map((item) => (
              item.dropdownItems ? (
                // Render dropdown menu
                <NavDropdownItemGroup
                  key={"nav-item-" + item.label}
                  label={item.label}
                  active={active}
                  setActive={setActive}
                >
                  {item.dropdownItems.map((dropdownItem) => (
                    <NavDropdownItem
                      key={"nav-dropdown-item-" + item.label + "-" + dropdownItem.name}
                      href={dropdownItem.href}
                    >
                      {dropdownItem.name}
                    </NavDropdownItem>
                  ))}
                </NavDropdownItemGroup>
              ) : (
                // Render simple link
                <NavLinkItem
                  key={"nav-link-item-" + item.label}
                  label={item.label}
                  href={item.href || '#'}
                />
              )
            ))}
          </div>

          <div className="ml-auto flex items-center space-x-4">
            <SignInButton
              callbackUrl={authConfig.defaultAuthCallbackUrl}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-black hover:bg-neutral-800 dark:bg-white dark:text-black dark:hover:bg-neutral-200"
            >
              {loginButtonName || "Login"}
            </SignInButton>
            <ThemedButton />
          </div>
        </nav>
      </div>
    </header>
  );
};

================
File: components/header/ShipNowLike.tsx
================
"use client";
import { SignInButton } from "@/components/auth/SignInButton";
import { NavDropdownItem } from "@/components/header/navItem/NavDropdownItem";
import { NavDropdownItemGroup } from "@/components/header/navItem/NavDropdownItemGroup";
import { NavLinkItem } from "@/components/header/navItem/NavLinkItem";
import { ThemedButton } from "@/components/ThemedButton";
import { UserAccountNav } from "@/components/UserAccountNav";
import { siteConfig } from "@/config/site";
import { useSession } from "next-auth/react";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";

interface NavDropdownItem {
  href: string;
  name: string;
}

interface NavItem {
  label: string;
  href?: string;
  dropdownItems?: NavDropdownItem[];
}

export interface ShipNowLikeHeaderProps {
  navItems: NavItem[];
  loginButtonName?: string;
  className?: string;
}
export const ShipNowLikeHeader = ({ navItems, loginButtonName, className }: ShipNowLikeHeaderProps) => {
  const [active, setActive] = useState<string | null>(null);
  const { data: session } = useSession();
  return (
    <header className={`fixed z-50 top-0 left-0 right-0 bg-white dark:bg-black border-b border-neutral-200 dark:border-neutral-800 ${className}`}>
      <div className="max-w-8xl mx-auto px-4 sm:px-6 h-full">
        <nav
          className="flex items-center h-full"
          onMouseLeave={() => setActive(null)}
        >

          <Link href="/" className="shrink-0">
            <Image
              src={siteConfig.icons.logo}
              alt="Logo"
              width={100}
              height={30}
              className="h-[22px] w-auto"
            />
          </Link>

          <div className="flex items-center space-x-1 mx-auto">
            {navItems.map((item) => (
              item.dropdownItems ? (
                // Render dropdown menu
                <NavDropdownItemGroup
                  key={"nav-item-" + item.label}
                  label={item.label}
                  active={active}
                  setActive={setActive}
                >
                  {item.dropdownItems.map((dropdownItem) => (
                    <NavDropdownItem
                      key={"nav-dropdown-item-" + item.label + "-" + dropdownItem.name}
                      href={dropdownItem.href}
                    >
                      {dropdownItem.name}
                    </NavDropdownItem>
                  ))}
                </NavDropdownItemGroup>
              ) : (
                // Render simple link
                <NavLinkItem
                  key={"nav-link-item-" + item.label}
                  label={item.label}
                  href={item.href || '#'}
                />
              )
            ))}
          </div>

          <div className="flex items-center space-x-4">
            {session?.user ? (
              <UserAccountNav user={session.user} />
            ) : (<SignInButton
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-3xl text-white bg-black hover:bg-neutral-800 dark:bg-white dark:text-black dark:hover:bg-neutral-200"
            >
              {loginButtonName || "Login"}
            </SignInButton>)}
            <ThemedButton />
          </div>
        </nav>
      </div>
    </header>
  );
};

================
File: components/hero/NotionLike.tsx
================
import Image from "next/image";

interface Props {
  title: string;
  subtitle: string;
  trustedByText: string;
  brands: Array<{
    name: string;
    logo: string;
  }>;
  button: {
    name: string;
    href: string;
  }
  illustration: string;
}

export const NotionLikeHero = ({
  title,
  subtitle,
  trustedByText,
  brands,
  illustration,
  button
}: Props) => {
  return (
    <div className="mx-auto px-4 sm:px-6 lg:px-8 py-20">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
        {/* Left Column */}
        <div>
          <h1 className="text-7xl font-bold tracking-tight mb-6">
            {title}
          </h1>
          <h2 className="text-xl font-bold mb-8">
            {subtitle}
          </h2>

          <div className="flex flex-wrap gap-4 mb-12">
            <a
              href={button.href}
              className="inline-flex items-center px-6 py-2 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700"
            >
              {button.name}
            </a>
          </div>

          <div>
            <p className="text-sm font-bold text-gray-500 mb-4">
              {trustedByText}
            </p>
            <div className="flex flex-wrap items-center gap-8">
              {brands.map((brand) => (
                <Image
                  width={100}
                  height={100}
                  key={brand.name}
                  src={brand.logo}
                  alt={brand.name}
                  className="h-6 grayscale opacity-60"
                />
              ))}
            </div>
          </div>
        </div>

        {/* Right Column */}
        <div className="relative">
          <Image
            width={1024}
            height={768}
            src={illustration}
            alt="Hero Illustration"
            className="w-full"
          />
        </div>
      </div>
    </div>
  );
};

================
File: components/hero/ShipNowLike.tsx
================
// components/HeroSection.tsx
import Image from 'next/image';
import { ReactNode } from 'react';
interface SocialProofProps {
  avatars: string[];
  description: ReactNode;
}

interface ShipNowLikeHeroProps {
  socialProof?: SocialProofProps;
  title: string;
  subtitle: string;
  button: {
    name: string;
    href: string;
  };
}

export function ShipNowLikeHero({
  socialProof,
  title,
  subtitle,
  button,
}: ShipNowLikeHeroProps) {
  return (
    <div className="flex flex-col items-center text-center px-4 py-16 max-w-4xl mx-auto">


      {/* Title */}
      <div className="relative mb-8">
        <h1 className="text-5xl md:text-7xl font-bold leading-tight">
          {title}
        </h1>
      </div>

      {/* Subtitle */}
      <h2 className="text-xl text-gray-600 mb-12">{subtitle}</h2>

      {/* CTA Button */}
      {button && (
        <a
          href={button.href}
          className="bg-gray-900 text-white px-8 py-4 rounded-full hover:bg-gray-800 transition-colors"
        >
          <span className="font-medium">{button.name}</span>
        </a>
      )}
      {/* Social Proof */}
      {socialProof && (
        <div className="mb-12 mt-8 flex items-center justify-center rounded-3xl">
          <div className="flex -space-x-2">
            {socialProof.avatars.map((avatar, i) => (
              <Image
                key={i}
                width={32}
                height={32}
                src={avatar}
                alt="User avatar"
                className="w-8 h-8 rounded-full border-2 border-white"
              />
            ))}
          </div>
          <div>
            {socialProof.description}
          </div>
        </div>
      )}
    </div>
  );
}

================
File: components/icons/Moon.tsx
================
export function Moon(props: any) {
  return (
    <svg
      width="1.5em"
      height="1.5em"
      viewBox="0 0 256 256"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fill="#000000"
        d="M235.54 150.21a104.84 104.84 0 0 1-37 52.91A104 104 0 0 1 32 120a103.09 103.09 0 0 1 20.88-62.52a104.84 104.84 0 0 1 52.91-37a8 8 0 0 1 10 10a88.08 88.08 0 0 0 109.8 109.8a8 8 0 0 1 10 10Z"
      ></path>
    </svg>
  );
}

================
File: components/icons/Sun.tsx
================
export function Sun(props: any) {
  return (
    <svg
      width="1.5em"
      height="1.5em"
      viewBox="0 0 256 256"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        fill="#ffffff"
        d="M116 32V16a12 12 0 0 1 24 0v16a12 12 0 0 1-24 0Zm80 96a68 68 0 1 1-68-68a68.07 68.07 0 0 1 68 68Zm-24 0a44 44 0 1 0-44 44a44.05 44.05 0 0 0 44-44ZM51.51 68.49a12 12 0 1 0 17-17l-12-12a12 12 0 0 0-17 17Zm0 119l-12 12a12 12 0 0 0 17 17l12-12a12 12 0 1 0-17-17ZM196 72a12 12 0 0 0 8.49-3.51l12-12a12 12 0 0 0-17-17l-12 12A12 12 0 0 0 196 72Zm8.49 115.51a12 12 0 0 0-17 17l12 12a12 12 0 0 0 17-17ZM44 128a12 12 0 0 0-12-12H16a12 12 0 0 0 0 24h16a12 12 0 0 0 12-12Zm84 84a12 12 0 0 0-12 12v16a12 12 0 0 0 24 0v-16a12 12 0 0 0-12-12Zm112-96h-16a12 12 0 0 0 0 24h16a12 12 0 0 0 0-24Z"
      ></path>
    </svg>
  );
}

================
File: components/price/hooks/useActivePlans.ts
================
import { getUserActivePlansAction } from '@/lib/actions/user';
import { OneTimePayment, Subscription } from "@prisma/client";
import { useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';

export function useActivePlans(hasSubscription: boolean, hasOneTimePayment: boolean) {
  const { data: session } = useSession();
  const [userActiveSubscriptions, setUserActiveSubscriptions] = useState<Subscription[]>([]);
  const [userActiveOneTimePayments, setUserActiveOneTimePayments] = useState<OneTimePayment[]>([]);
  useEffect(() => {
    if (session?.user?.id) {
      if (hasSubscription) {
        getUserActivePlansAction(session.user.id, true).then(
          (data) => setUserActiveSubscriptions(data as Subscription[])
        );
      }
      if (hasOneTimePayment) {
        getUserActivePlansAction(session.user.id, false).then(
          (data) => setUserActiveOneTimePayments(data as OneTimePayment[])
        );
      }
    }
  }, [session, hasSubscription, hasOneTimePayment]);
  return { userActiveSubscriptions, userActiveOneTimePayments };
}

================
File: components/price/hooks/useChangePlan.ts
================
import { paymentConfig } from "@/config";
import { changeSubscription } from "@/lib/payment/paddle/server";
import { createStripeCustomerPortal } from "@/lib/payment/stripe/server";
import { usePathname, useRouter } from 'next/navigation';
import { useState } from 'react';
export const useChangeSubscriptionPlan = () => {
  const currentPath = usePathname();
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [showPaddleConfirmDialog, setShowPaddleConfirmDialog] = useState(false);
  const [showSuccessChangePlanDialog, setShowSuccessChangePlanDialog] = useState(false);
  const handleChangePlan = async () => {
    if (paymentConfig.paymentProvider === "stripe") {
      await handleStripeChangePlan();
    } else if (paymentConfig.paymentProvider === "paddle") {
      setShowPaddleConfirmDialog(true);
    } else {
      setError("Payment provider not supported");
    }
  }

  const handleStripeChangePlan = async () => {
    try {
      const portalUrl = await createStripeCustomerPortal(currentPath);
      router.push(portalUrl);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to change plan');
    }
  }

  const confirmChangePaddlePlan = async (currentPriceId: string, targetPriceId: string | undefined) => {
    try {
      if (!targetPriceId) {
        setError("Target Price ID is required");
        return;
      }
      await changeSubscription(currentPriceId, targetPriceId);
      setShowSuccessChangePlanDialog(true);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to change plan');
    } finally {
      setShowPaddleConfirmDialog(false);
    }
  }
  return {
    handleChangePlan,
    confirmChangePaddlePlan,
    error,
    showPaddleConfirmDialog,
    showSuccessChangePlanDialog,
    closePaddleConfirmDialog: () => setShowPaddleConfirmDialog(false),
    closeSuccessChangePlanDialog: () => setShowSuccessChangePlanDialog(false),
    clearError: () => setError(null)
  }
}

================
File: components/price/hooks/useCheckout.ts
================
import { paymentConfig } from "@/config";
import { getStripe } from "@/lib/payment/stripe/client";
import { checkoutWithStripe } from "@/lib/payment/stripe/server";
import { usePathname, useRouter } from 'next/navigation';
import { useState } from 'react';

export const useCheckout = () => {
  const currentPath = usePathname();
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const handleCheckout = async (priceId: string) => {
    if (paymentConfig.paymentProvider === "stripe") {
      await handleStripeCheckout(priceId)
    } else if (paymentConfig.paymentProvider === "paddle") {
      // TODO: Implement paddle checkout
      await handlePaddleCheckout(priceId)
    } else {
      setError("Payment provider not supported");
    }
  }

  const handleStripeCheckout = async (priceId: string) => {
    try {
      const checkoutSessionId = await checkoutWithStripe(priceId, currentPath)
      const stripe = await getStripe()
      stripe?.redirectToCheckout({
        sessionId: checkoutSessionId
      })
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Payment initialization failed, please try again later.')
    }
  }

  const handlePaddleCheckout = async (priceId: string) => {
    router.push(`/payment/paddle/checkout/${priceId}`);
  }

  return {
    handleCheckout,
    error,
    clearError: () => setError(null)
  }
}

================
File: components/price/hooks/usePriceAmounts.ts
================
import { batchGetPriceAmount } from '@/lib/actions/payment';
import { useEffect, useState } from 'react';

interface PriceAmount {
  unit_amount: number;
  currency: string;
}

export function usePriceAmounts(priceIds: string[]) {
  const [priceAmounts, setPriceAmounts] = useState<{ [key: string]: PriceAmount }>({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsLoading(true);
    batchGetPriceAmount(priceIds)
      .then(amounts => setPriceAmounts(amounts))
      .finally(() => setIsLoading(false));
  }, []);

  return { priceAmounts, isLoadingPriceAmounts: isLoading };
}

================
File: components/price/paddle/checkout/checkout-contents.tsx
================
'use client';

import { PriceSection } from '@/components/price/paddle/checkout/price-section';
import { authConfig, paymentConfig } from '@/config';
import { upsertCustomer } from '@/lib/payment/paddle/server';
import { Environments, initializePaddle, Paddle } from '@paddle/paddle-js';
import { CheckoutEventsData } from '@paddle/paddle-js/types/checkout/events';
import { useSession } from 'next-auth/react';
import { useParams, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

interface PathParams {
  priceId: string;
  [key: string]: string | string[];
}

export function CheckoutContents() {
  const { data: session } = useSession();
  const currentUser = session?.user;
  const { priceId } = useParams<PathParams>();
  const [paddle, setPaddle] = useState<Paddle | null>(null);
  const [checkoutData, setCheckoutData] = useState<CheckoutEventsData | null>(null);

  const router = useRouter();
  const handleCheckoutEvents = (event: CheckoutEventsData) => {
    setCheckoutData(event);
  };

  useEffect(() => {
    if (!currentUser || !currentUser.id || !currentUser.email) {
      return router.push(authConfig.signInPage)
    }
    if (!paddle?.Initialized && process.env.NEXT_PUBLIC_PADDLE_CLIENT_TOKEN && process.env.NEXT_PUBLIC_PADDLE_ENV) {
      initializePaddle({
        token: process.env.NEXT_PUBLIC_PADDLE_CLIENT_TOKEN,
        environment: process.env.NEXT_PUBLIC_PADDLE_ENV as Environments,
        eventCallback: (event) => {
          if (event.data && event.name) {
            handleCheckoutEvents(event.data);
          }
        },
        checkout: {
          settings: {
            displayMode: 'inline',
            allowLogout: !currentUser.email,
            frameTarget: 'paddle-checkout-frame',
            frameInitialHeight: 450,
            frameStyle: 'width: 100%; background-color: transparent; border: none',
            successUrl: paymentConfig.successPage,
          },
        },
      }).then(async (paddle) => {
        if (paddle && priceId) {
          setPaddle(paddle);
          const paddleCustomerId = await upsertCustomer(currentUser.id!, currentUser.email!);
          paddle.Checkout.open({
            customer: { id: paddleCustomerId },
            items: [{ priceId: priceId, quantity: 1 }]
          });
        }
      });
    }
  }, [paddle?.Initialized, priceId, currentUser, router]);

  return (
    <div
      className={
        'rounded-lg border border-gray-200 shadow-md bg-background/80 backdrop-blur-xl p-10 md:pl-16 md:pt-16 md:min-h-[400px] flex flex-col justify-between relative'
      }
    >
      <div className={'flex flex-col md:flex-row gap-8 md:gap-16'}>
        <div className={'w-full md:w-[400px]'}>
          <PriceSection checkoutData={checkoutData} />
        </div>
        <div className={'min-w-[375px] lg:min-w-[535px]'}>
          <div className={'text-base leading-[20px] font-semibold mb-8'}>Payment details</div>
          <div className={'paddle-checkout-frame'} />
        </div>
      </div>
    </div>
  );
}

================
File: components/price/paddle/checkout/checkout-header.tsx
================
import { Button } from '@/components/ui/button';
import { siteConfig } from '@/config';
import { ChevronLeft } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';

export function CheckoutHeader() {
  return (
    <div className="flex items-center text-black px-4 space-x-4">
      <Link href={'/'}>
        <Button className="p-1 bg-white hover:bg-white/90 h-[32px] w-[32px]">
          <ChevronLeft className="h-6 w-6 text-black" />
        </Button>
      </Link>
      <div className="flex items-center space-x-2">
        <Image src={siteConfig.icons.logo} alt={siteConfig.name + ' logo'} width={24} height={24} />
        <span className="text-lg font-semibold">{siteConfig.name}</span>
      </div>
    </div>
  );
}

================
File: components/price/paddle/checkout/checkout-line-items.tsx
================
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { formatMoney } from '@/lib/payment/paddle/utils';
import { CheckoutEventsData } from '@paddle/paddle-js/types/checkout/events';

interface LoadingTextProps {
  value: number | undefined;
  currencyCode: string | undefined;
}

function LoadingText({ value, currencyCode }: LoadingTextProps) {
  if (value === undefined) {
    return <Skeleton className="h-[20px] w-[75px] bg-border" />;
  } else {
    return formatMoney(value, currencyCode);
  }
}

interface Props {
  checkoutData: CheckoutEventsData | null;
}

export function CheckoutLineItems({ checkoutData }: Props) {
  return (
    <>
      <div className={'md:pt-12 text-base leading-[20px] font-medium'}>{checkoutData?.items[0].price_name}</div>
      <Separator className={'bg-border/50 mt-6'} />
      <div className={'pt-6 flex justify-between'}>
        <span className={'text-base leading-[20px] font-medium text-muted-foreground'}>Subtotal</span>
        <span className={'text-base leading-[20px] font-semibold'}>
          <LoadingText currencyCode={checkoutData?.currency_code} value={checkoutData?.totals.subtotal} />
        </span>
      </div>
      <div className={'pt-6 flex justify-between'}>
        <span className={'text-base leading-[20px] font-medium text-muted-foreground'}>Tax</span>
        <span className={'text-base leading-[20px] font-semibold'}>
          <LoadingText currencyCode={checkoutData?.currency_code} value={checkoutData?.totals.tax} />
        </span>
      </div>
      <Separator className={'bg-border/50 mt-6'} />
      <div className={'pt-6 flex justify-between'}>
        <span className={'text-base leading-[20px] font-medium text-muted-foreground'}>Due today</span>
        <span className={'text-base leading-[20px] font-semibold'}>
          <LoadingText currencyCode={checkoutData?.currency_code} value={checkoutData?.totals.total} />
        </span>
      </div>
    </>
  );
}

================
File: components/price/paddle/checkout/checkout-price-amount.tsx
================
import { Skeleton } from '@/components/ui/skeleton';
import { formatMoney } from '@/lib/payment/paddle/utils';
import { CheckoutEventsData } from '@paddle/paddle-js/types/checkout/events';

interface Props {
  checkoutData: CheckoutEventsData | null;
}

export function CheckoutPriceAmount({ checkoutData }: Props) {
  const total = checkoutData?.totals.total;
  return (
    <>
      {total !== undefined ? (
        <div className={'pt-8 flex gap-2 items-end'}>
          <span className={'text-5xl'}>{formatMoney(total, checkoutData?.currency_code)}</span>
          <span className={'text-base leading-[16px]'}>inc. tax</span>
        </div>
      ) : (
        <Skeleton className="mt-8 h-[48px] w-full bg-border" />
      )}
    </>
  );
}

================
File: components/price/paddle/checkout/checkout-price-container.tsx
================
import { CheckoutPriceAmount } from '@/components/price/paddle/checkout/checkout-price-amount';
import { formatMoney } from '@/lib/payment/paddle/utils';
import { CheckoutEventsData } from '@paddle/paddle-js/types/checkout/events';

interface Props {
  checkoutData: CheckoutEventsData | null;
}

export function CheckoutPriceContainer({ checkoutData }: Props) {
  const recurringTotal = checkoutData?.recurring_totals?.total;
  const item = checkoutData?.items[0];
  const billintInterval = item?.billing_cycle?.interval == 'year' ? 'yearly' : 'monthly'
  return (
    <>
      <div className={'text-base leading-[20px] font-semibold'}>Order summary</div>
      <CheckoutPriceAmount checkoutData={checkoutData} />
      {recurringTotal !== undefined && (
        <div className={'pt-4 text-base leading-[20px] font-medium text-muted-foreground'}>
          then {formatMoney(checkoutData?.recurring_totals?.total, checkoutData?.currency_code)} {billintInterval}
        </div>
      )}
    </>
  );
}

================
File: components/price/paddle/checkout/price-section.tsx
================
import { CheckoutLineItems } from '@/components/price/paddle/checkout/checkout-line-items';
import { CheckoutPriceAmount } from '@/components/price/paddle/checkout/checkout-price-amount';
import { CheckoutPriceContainer } from '@/components/price/paddle/checkout/checkout-price-container';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Separator } from '@/components/ui/separator';
import { CheckoutEventsData } from '@paddle/paddle-js/types/checkout/events';

interface Props {
  checkoutData: CheckoutEventsData | null;
}

export function PriceSection({ checkoutData }: Props) {
  return (
    <>
      <div className={'hidden md:block'}>
        <CheckoutPriceContainer checkoutData={checkoutData} />
        <CheckoutLineItems checkoutData={checkoutData} />
      </div>
      <div className={'block md:hidden'}>
        <CheckoutPriceAmount checkoutData={checkoutData} />
        <Separator className={'relative bg-border/50 mt-6 checkout-order-summary-mobile-yellow-highlight'} />
        <Accordion type="single" collapsible>
          <AccordionItem className={'border-none'} value="item-1">
            <AccordionTrigger className={'text-base leading-[20px] font-semibold no-underline!'}>Order summary</AccordionTrigger>
            <AccordionContent className={'pb-0'}>
              <CheckoutLineItems checkoutData={checkoutData} />
            </AccordionContent>
          </AccordionItem>
        </Accordion>
        <Separator className={'bg-border/50 mt-6'} />
      </div>
    </>
  );
}

================
File: components/price/paddle/gradients/checkout-form-gradients.tsx
================
export function CheckoutFormGradients() {
  return (
    <>
      <div className={'hidden md:block'}>
        <div className={'checkout-yellow-highlight'} />
        <div className={'checkout-hard-blur'} />
        <div className={'checkout-soft-blur'} />
      </div>
    </>
  );
}

================
File: components/price/paddle/gradients/checkout-gradients.tsx
================
export function CheckoutGradients() {
  return (
    <>
      <div className={'hidden md:block'}>
        <div className={'checkout-background-base min-h-[1280px]'}></div>
        <div className={'checkout-background-base min-h-[1280px]'}></div>
        <div className={'checkout-background-base min-h-[1280px]'}></div>
        <div className={'grid-bg checkout-background-base min-h-[1280px]'}></div>
      </div>
      <div className={'block md:hidden'}>
        <div className={'checkout-mobile-grainy-blur checkout-mobile-top-gradient checkout-background-base'}></div>
        <div className={'checkout-mobile-grainy-blur checkout-mobile-bottom-gradient checkout-background-base'}></div>
        <div className={'checkout-background-base h-full min-h-screen'}></div>
      </div>
    </>
  );
}

================
File: components/price/NotionLike.tsx
================
"use client"
import { PriceBtn } from "@/components/price/PriceBtn";
import { Skeleton } from "@/components/ui/skeleton";
import { useEffect, useState } from "react";
import { useActivePlans } from "./hooks/useActivePlans";
import { usePriceAmounts } from "./hooks/usePriceAmounts";

interface PricePlan {
  name: string;
  isSubscription: boolean;
  oneTimePriceId?: string;
  monthlyPriceId?: string;
  yearlyPriceId?: string;
  popular?: boolean;
  description: string;
  buttonText: string;
  features: string[];
}

function PriceDisplay({ amount, currency, isSubscription, isLoading }: {
  amount: number;
  currency: string;
  isLoading: boolean;
  isSubscription: boolean;
}) {
  if (isLoading) {
    return (
      <div className="flex items-baseline gap-2">
        <Skeleton className="h-8 w-24" />
        <Skeleton className="h-4 w-16" />
      </div>
    );
  }

  return (
    <div className="flex items-baseline gap-2">
      <span className="text-3xl font-bold">
        {currency}{(amount / 100).toFixed(2)}
      </span>
      {isSubscription && <span className="text-sm text-neutral-600 dark:text-neutral-400">per seat/month</span>}
    </div>
  );
}

export function NotionLikePrice({ plans, title }: { plans: PricePlan[], title: string }) {
  const { priceAmounts, isLoadingPriceAmounts } = usePriceAmounts(plans
    .filter(plan => (plan.monthlyPriceId && plan.yearlyPriceId) || plan.oneTimePriceId)
    .flatMap(plan => [
      plan.monthlyPriceId,
      plan.yearlyPriceId,
      plan.oneTimePriceId
    ].filter(Boolean) as string[]));
  const [isYearly, setIsYearly] = useState(false);
  const [hasSubscription, setHasSubscription] = useState(false);
  const [hasOneTimePayment, setHasOneTimePayment] = useState(false);
  const { userActiveSubscriptions, userActiveOneTimePayments } = useActivePlans(hasSubscription, hasOneTimePayment);
  useEffect(() => {
    const subscription = plans.some(plan => plan.isSubscription);
    setHasSubscription(!!subscription);
    const oneTimePayment = plans.some(plan => plan.oneTimePriceId);
    setHasOneTimePayment(!!oneTimePayment);
  }, [plans]);

  const getPriceId = (plan: PricePlan) => {
    if (plan.isSubscription) {
      return isYearly ? plan.yearlyPriceId : plan.monthlyPriceId;
    } else {
      return plan.oneTimePriceId;
    }
  };
  const getAmount = (plan: PricePlan) => {
    const priceId = getPriceId(plan);
    if (!priceId) return 0;
    const price = priceAmounts[priceId as keyof typeof priceAmounts];
    let amount = price?.unit_amount ?? 0;
    if (amount === 0) {
      return 0;
    }
    if (plan.isSubscription && isYearly) {
      return amount / 12;
    }
    return amount;
  };

  const getCurrency = (plan: PricePlan) => {
    const priceId = getPriceId(plan);
    if (!priceId) return 'USD';
    const price = priceAmounts[priceId as keyof typeof priceAmounts];
    return price?.currency ?? 'USD';
  };
  return (
    <div className="w-full mx-auto px-4 py-16">
      {/* Header */}
      <div className="text-center mb-16">
        <h2 className="text-5xl font-bold mb-10 text-neutral-900 dark:text-neutral-100">
          {title}
        </h2>

        {/* Controls */}
        {hasSubscription && (
          <div className="flex justify-center items-center gap-8">
            <div className="flex items-center gap-4 bg-neutral-100 dark:bg-neutral-800 p-1 rounded-3xl">
              <button
                className={`px-4 py-2 rounded transition-all text-neutral-700 dark:text-neutral-300 ${!isYearly ? 'bg-white dark:bg-neutral-700 shadow rounded-3xl text-neutral-900 dark:text-neutral-100' : ''
                  }`}
                onClick={() => setIsYearly(false)}
              >
                Pay monthly
              </button>
              <button
                className={`px-4 py-2 rounded transition-all text-neutral-700 dark:text-neutral-300 ${isYearly ? 'bg-white dark:bg-neutral-700 shadow rounded-3xl text-neutral-900 dark:text-neutral-100' : ''
                  }`}
                onClick={() => setIsYearly(true)}
              >
                Pay yearly
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Price Cards */}
      <div className="grid grid-cols-1 gap-4 md:grid-cols-[repeat(auto-fit,minmax(280px,0.5fr))] justify-center">
        {plans.map((plan) => (
          <div key={plan.name} className="bg-neutral-50 dark:bg-neutral-800 rounded-xl p-8">
            <div className="mb-4">
              <h3 className="text-lg font-semibold flex items-center gap-2 text-neutral-900 dark:text-neutral-100">
                {plan.name}
                {plan.popular && (
                  <span className="text-sm bg-blue-600 text-white px-2 py-0.5 rounded-xl">
                    Popular
                  </span>
                )}
              </h3>
            </div>

            {/* Price */}
            <div className="mb-4">
              <span className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
                <PriceDisplay
                  amount={getAmount(plan)}
                  currency={getCurrency(plan)}
                  isLoading={isLoadingPriceAmounts}
                  isSubscription={plan.isSubscription}
                />
              </span>
            </div>

            {/* Description */}
            <p className="font-bold text-sm mb-4 text-neutral-700 dark:text-neutral-300">{plan.description}</p>

            {/* Button */}
            <PriceBtn
              btnText={plan.buttonText}
              targetPlan={{
                isSubscription: plan.isSubscription,
                name: plan.name,
                priceId: getPriceId(plan),
                isYearly: isYearly
              }}
              activePlans={plan.isSubscription ? userActiveSubscriptions : userActiveOneTimePayments}
              className="w-full max-w-[300px] block mx-auto py-1 px-4 rounded-lg mb-8 bg-white dark:bg-neutral-700 border dark:border-neutral-600 text-sm transition-colors hover:bg-neutral-50 dark:hover:bg-neutral-600 text-neutral-900 dark:text-neutral-100"
            />

            {/* Features */}
            <ul className="space-y-1">
              {plan.features.map((feature) => (
                <li key={feature} className="flex items-start gap-2">
                  <span className="text-neutral-400 dark:text-neutral-500">•</span>
                  <span className="text-sm text-neutral-700 dark:text-neutral-300">{feature}</span>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </div>
  )
}

================
File: components/price/PriceBtn.tsx
================
"use client";

import { useChangeSubscriptionPlan } from "@/components/price/hooks/useChangePlan";
import { useCheckout } from "@/components/price/hooks/useCheckout";
import { authConfig } from "@/config";
import { isSignedIn } from "@/lib/actions/auth";
import { OneTimePayment, Subscription } from "@prisma/client";
import { useRouter } from "next/navigation";
import { CustomAlertDialog } from "../CustomAlertDialog";
export interface PriceBtnProps {
  btnText: string;
  targetPlan: TargetPlan;
  activePlans: Subscription[] | OneTimePayment[];
  [key: string]: any;
}

interface TargetPlan {
  isSubscription: boolean;
  name?: string;
  priceId?: string;
  isYearly?: boolean;
}
export function PriceBtn({ btnText, targetPlan, activePlans, ...props }: PriceBtnProps) {
  const { handleCheckout, error, clearError } = useCheckout();
  const { handleChangePlan, confirmChangePaddlePlan,
    showPaddleConfirmDialog, closePaddleConfirmDialog,
    error: changePlanError, clearError: clearChangePlanError,
    showSuccessChangePlanDialog, closeSuccessChangePlanDialog } = useChangeSubscriptionPlan();
  const router = useRouter();
  const handleClick = async () => {
    if (!await isSignedIn()) {
      return router.push(authConfig.signInPage);
    }

    if (!targetPlan.priceId) {
      return router.push(authConfig.defaultAuthCallbackUrl);
    }

    if (activePlans.length === 0) {
      return handleCheckout(targetPlan.priceId);
    }


    // click a paid plan, redirect to callback url
    if (activePlans.some(plan => plan.price_id === targetPlan.priceId)) {
      return router.push(authConfig.defaultAuthCallbackUrl);
    }

    // click a none-paid subscription, change to target subscription
    if (targetPlan.isSubscription) {
      return await handleChangePlan();
    }
    // click a none-paid one time payment, just checkout
    await handleCheckout(targetPlan.priceId);
  };
  return (
    <>
      <button {...props} onClick={handleClick}>{btnText}</button>
      <CustomAlertDialog isOpen={!!error} title="Checkout Error" description={error || ''} onConfirm={clearError} />
      <CustomAlertDialog isOpen={!!changePlanError} title="Change Plan Error" description={changePlanError || ''} onConfirm={clearChangePlanError} />
      <CustomAlertDialog
        isOpen={showPaddleConfirmDialog}
        title="Confirm Subscription Change"
        description={`Are you sure you want to change your subscription to the ${targetPlan.name} ${targetPlan.isYearly ? 'yearly' : 'monthly'}?`}
        onConfirm={() => confirmChangePaddlePlan(activePlans[0].price_id!, targetPlan.priceId)}
        onCancel={closePaddleConfirmDialog}
      />
      <CustomAlertDialog isOpen={showSuccessChangePlanDialog} title="Subscription Changed" description="Your subscription has been changed successfully" onConfirm={closeSuccessChangePlanDialog} />
    </>
  );
}

================
File: components/price/ShipNow.tsx
================
"use client"
import { PriceBtn } from "@/components/price/PriceBtn";
import { Skeleton } from "@/components/ui/skeleton";
import { Check } from "lucide-react";
import { useActivePlans } from "./hooks/useActivePlans";
import { usePriceAmounts } from "./hooks/usePriceAmounts";
interface PriceCardProps {
  title: string;
  description: string;
  features: string[];
  price: {
    priceId: string;
    isSubscription: boolean;
  };
  buttonText: string;
}

export interface ShipNowPriceProps {
  title: string;
  subTitle: string;
  card: PriceCardProps;
}

export function ShipNowPrice({ title, subTitle, card }: ShipNowPriceProps) {
  const { priceAmounts, isLoadingPriceAmounts } = usePriceAmounts([card.price.priceId]);
  const { unit_amount, currency } = priceAmounts[card.price.priceId as keyof typeof priceAmounts] ?? {};
  const { userActiveSubscriptions, userActiveOneTimePayments } = useActivePlans(card.price.isSubscription, !card.price.isSubscription);
  return (
    <div className="w-full px-4 py-16 mt-16">
      {/* Heading Section */}
      <div className="text-center mb-16">
        <h2 className="text-4xl font-bold mb-6">{title}</h2>
        <p className="text-gray-600 text-lg">{subTitle}</p>
      </div>

      {/* Price Card */}
      <div className="max-w-6xl mx-auto rounded-3xl border border-gray-100 p-8">
        <div className="grid lg:grid-cols-3 gap-8 lg:gap-16">
          {/* Left Column */}
          <div className="lg:col-span-2">
            <h2 className="text-2xl font-bold mb-4">{card.title}</h2>
            <p className="text-gray-600 mb-8 border-b border-gray-100 pb-8">{card.description}</p>

            <div className="mb-6">
              <h3 className="font-medium mb-4">What's included</h3>
              <div className="grid md:grid-cols-2 gap-x-8 gap-y-4">
                {card.features.map((feature, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <Check className="w-5 h-5 text-black" />
                    <span className="text-gray-600 text-sm">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          {/* Right Column */}
          <div className="bg-gray-100 dark:bg-gray-800 rounded-3xl p-8">
            <div className="text-center">
              <div className="mb-4">
                {isLoadingPriceAmounts ? (
                  <>
                    <Skeleton className="h-8 w-24" />
                    <Skeleton className="h-4 w-16 ml-2" />
                  </>
                ) : (
                  <>
                    <span className="text-4xl font-bold">
                      ${(unit_amount / 100).toFixed(2)}
                    </span>
                    <span className="text-gray-600 ml-2">
                      {currency}
                    </span>
                  </>
                )}

              </div>
              <p className="text-gray-600 mb-8">Lifetime updates</p>
              <PriceBtn
                btnText={card.buttonText}
                targetPlan={{
                  isSubscription: card.price.isSubscription,
                  name: card.title,
                  priceId: card.price.priceId
                }}
                activePlans={card.price.isSubscription ? userActiveSubscriptions : userActiveOneTimePayments}
                className="w-full bg-black text-white rounded-full py-3 px-6 font-medium hover:opacity-90 transition-opacity"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: components/signinForm/MagicLink.tsx
================
"use client";

import { sendMagicLinkAction } from "@/lib/actions/auth";
import type { SUBMIT_RESULT } from "@/lib/actions/auth.d";
import { useCallback, useState, useTransition } from "react";
export function MagicLinkForm({ callbackUrl, formLabel = "Email", inputClassName = "", buttonClassName = "" }: { callbackUrl?: string, formLabel?: string, inputClassName?: string, buttonClassName?: string }) {
  const [submitResult, setSubmitResult] = useState<SUBMIT_RESULT>({ success: "", error: "" });
  const [isPending, startTransition] = useTransition();

  const submitAction = useCallback(async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    startTransition(async () => {
      const formData = new FormData(event.currentTarget);
      const result = await sendMagicLinkAction(formData, "resend", callbackUrl);
      setSubmitResult(result);
    });
  }, [callbackUrl]);
  return (
    <form
      className="space-y-4 mt-4"
      onSubmit={submitAction}
    >
      <div>
        <label htmlFor="email" className="block text-sm mb-1 text-gray-700 dark:text-gray-300">
          {formLabel}
        </label>
        <input
          type="email"
          id="email"
          name="email"
          placeholder="Enter your email address..."
          className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary dark:bg-gray-800 dark:text-white ${inputClassName}`}
          required
        />
        {submitResult?.error && <p className="text-red-500">{submitResult.error}</p>}
        {submitResult?.success && (
          <p className="text-green-500">{submitResult.success}</p>
        )}
      </div>
      <button
        type="submit"
        disabled={isPending}
        className={`w-full flex items-center justify-center bg-primary hover:bg-primary-dark dark:bg-primary dark:hover:bg-primary-dark text-white py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${buttonClassName}`}
      >
        {isPending ? "Sending..." : "Continue"}
      </button>

    </form>
  )
}

================
File: components/signinForm/NotionLike.tsx
================
"use client"
import { SignInButton } from "@/components/auth/SignInButton";
import Image from "next/image";
import { MagicLinkForm } from "./MagicLink";
interface AuthButtonConfig {
  icon: string;
  text: string;
  provider: string;
}

export interface LoginFormConfig {
  title: string;
  subtitle: string;
  authButtons: AuthButtonConfig[];
  privacyNode?: React.ReactNode;
  defaultCallbackUrl?: string;
  supportEmail?: boolean;
}



export function NotionLikeSigninForm({ config }: {
  config: LoginFormConfig;
}) {
  return (
    <div className="max-w-[350px] mx-auto px-4">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">{config.title}</h1>
        <h2 className="text-xl text-neutral-400 font-bold">{config.subtitle}</h2>
      </div>

      {/* Auth Buttons */}
      <div className="space-y-3 mb-8 border-b border-neutral-200 pb-8">
        {config.authButtons.map((button) => (
          <SignInButton
            key={button.text}
            provider={button.provider}
            callbackUrl={config.defaultCallbackUrl || "/"}
            className="w-full flex items-center justify-center gap-3 px-4 py-2.5 border rounded-lg hover:bg-neutral-50 transition-colors"
            variant="outline"
          >
            <Image
              width={20}
              height={20}
              src={button.icon}
              alt=""
              className="w-5 h-5"
            />
            <span>{button.text}</span>
          </SignInButton>
        ))}
      </div>

      {/* Email Form */}
      {config.supportEmail && (
        <MagicLinkForm />
      )}
      {config.privacyNode ? config.privacyNode : (
        <div className="text-center text-sm text-neutral-400 mt-4">
          <p>
            By clicking continue, you agree to our <a href="/policies/terms-of-use" className="underline">Terms of Service</a> and <a href="/policies/privacy-policy" className="underline">Privacy Policy</a>.
          </p>
        </div>
      )}
    </div>
  );
}

================
File: components/signinForm/ShipNowLike.tsx
================
"use client"
import { SignInButton } from "@/components/auth/SignInButton";
import Image from "next/image";
import { MagicLinkForm } from "./MagicLink";
interface SocialButton {
  provider: string;
  icon: string;
  text: string;
}

export interface ShipNowLikeFormConfig {
  title: string;
  socialButtons?: SocialButton[];
  defaultCallbackUrl?: string;
  privacyNode?: React.ReactNode;
  supportEmail?: boolean;
}

export function ShipNowLikeSigninForm({ config }: {
  config: ShipNowLikeFormConfig;
}) {

  return (
    <div className="w-full max-w-md mx-auto p-6 bg-white dark:bg-gray-900 rounded-xl border border-gray-200 shadow-md">
      {/* Header */}
      <h1 className="text-2xl font-semibold mb-8">
        {config.title}
      </h1>

      {/* Social Buttons */}
      {config.socialButtons && config.socialButtons.length > 0 && (
        <div className="space-y-3">
          {config.socialButtons.map((button) => (
            <SignInButton
              key={button.provider}
              provider={button.provider}
              callbackUrl={config.defaultCallbackUrl || "/"}
              className="w-full flex items-center gap-3 px-4 py-2.5 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <Image
                width={20}
                height={20}
                src={button.icon}
                alt=""
                className="w-5 h-5"
              />
              <span className="text-gray-700">{button.text}</span>
            </SignInButton>
          ))}
        </div>
      )}

      {config.supportEmail && (
        <>
          <div className="border-b border-gray-200 my-8"></div>
          <MagicLinkForm
            buttonClassName="w-full flex items-center gap-3 px-4 py-2.5 rounded-lg bg-gray-900 hover:bg-gray-800 transition-colors"
          />
        </>
      )}

      {config.privacyNode ? config.privacyNode : (
        <div className="text-center text-sm text-neutral-400 mt-4">
          <p>
            By clicking continue, you agree to our <a href="/policies/terms-of-use" className="underline">Terms of Service</a> and <a href="/policies/privacy-policy" className="underline">Privacy Policy</a>.
          </p>
        </div>
      )}
    </div>
  );
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-px w-full" : "h-full w-px",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/AnimatedGradientText.tsx
================
import { ReactNode } from "react";

import { cn } from "@/lib/utils";

export function AnimatedGradientText({
  children,
  className,
}: {
  children: ReactNode;
  className?: string;
}) {
  return (
    <div
      className={cn(
        "group relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-2xl bg-white/40 px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#8fdfff1f] backdrop-blur-sm transition-shadow duration-500 ease-out [--bg-size:300%] hover:shadow-[inset_0_-5px_10px_#8fdfff3f] dark:bg-black/40",
        className,
      )}
    >
      <div
        className={`absolute inset-0 block h-full w-full animate-gradient bg-linear-to-r from-[#ffaa40]/50 via-[#9c40ff]/50 to-[#ffaa40]/50 bg-size-[var(--bg-size)_100%] p-px mask-subtract! rounded-[inherit] [mask:linear-gradient(#fff_0_0)_content-box,linear-gradient(#fff_0_0)]`}
      />

      {children}
    </div>
  );
}

================
File: components/CodeBlock.tsx
================
"use client";
import { IconCheck, IconCopy } from "@tabler/icons-react";
import React from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneDark, oneLight } from "react-syntax-highlighter/dist/cjs/styles/prism";
export type CodeBlockProps = {
  language: string;
  filename: string;
  highlightLines?: number[];
  theme?: 'light' | 'dark';
} & (
    | {
      code: string;
      tabs?: never;
    }
    | {
      code?: never;
      tabs: Array<CodeBlockTabProps>;
    }
  );

type CodeBlockTabProps = {
  name: string;
  code: string;
  language?: string;
  highlightLines?: number[];
}

export const CodeBlock = ({
  language,
  filename,
  code,
  highlightLines = [],
  theme = 'light',
  tabs = [],
}: CodeBlockProps) => {
  const [copied, setCopied] = React.useState(false);
  const [activeTab, setActiveTab] = React.useState(0);

  const tabsExist = tabs.length > 0;

  const copyToClipboard = async () => {
    const textToCopy = tabsExist ? tabs[activeTab].code : code;
    if (textToCopy) {
      await navigator.clipboard.writeText(textToCopy);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const activeCode = tabsExist ? tabs[activeTab].code : code;
  const activeLanguage = tabsExist
    ? tabs[activeTab].language || language
    : language;
  const activeHighlightLines = tabsExist
    ? tabs[activeTab].highlightLines || []
    : highlightLines;

  return (
    <div className={`relative w-full rounded-lg border p-4 font-mono text-sm h-full ${theme === "dark" ? "bg-slate-900" : "bg-white"}`}>
      <div className="flex flex-col gap-2 mb-4">
        {tabsExist && (
          <div className="flex  overflow-x-auto border-b">
            {tabs.map((tab, index) => (
              <button
                key={index}
                onClick={() => setActiveTab(index)}
                className={`px-3 py-2! text-xs transition-colors font-sans ${activeTab === index
                  ? theme === "dark" ? "text-white" : "text-black"
                  : "text-zinc-400 hover:text-zinc-200"
                  }`}
              >
                {tab.name}
              </button>
            ))}
          </div>
        )}
        {!tabsExist && filename && (
          <div className="flex justify-between items-center py-2">
            <div className="text-xs text-zinc-400">{filename}</div>
            <button
              onClick={copyToClipboard}
              className="flex items-center gap-1 text-xs text-zinc-400 hover:text-zinc-200 transition-colors font-sans"
            >
              {copied ? <IconCheck size={14} /> : <IconCopy size={14} />}
            </button>
          </div>
        )}
      </div>
      <SyntaxHighlighter
        language={activeLanguage}
        style={theme === 'dark' ? oneDark : oneLight}
        customStyle={{
          margin: 0,
          padding: 0,
          background: "transparent",
          fontSize: "0.875rem", // text-sm equivalent
        }}
        wrapLines={true}
        showLineNumbers={true}
        lineProps={(lineNumber) => ({
          style: {
            backgroundColor: activeHighlightLines.includes(lineNumber)
              ? "rgba(255,255,255,0.1)"
              : "transparent",
            display: "block",
            width: "100%",
          },
        })}
        PreTag="div"
      >
        {String(activeCode)}
      </SyntaxHighlighter>
    </div>
  );
};

================
File: components/CustomAlertDialog.tsx
================
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface CustomAlertDialogProps {
  title: string;
  description: string;
  onConfirm: () => void;
  onCancel?: () => void;
  isOpen: boolean;
}

export function CustomAlertDialog({ isOpen, title, description, onConfirm, onCancel }: CustomAlertDialogProps) {
  return (
    <AlertDialog open={isOpen} onOpenChange={onCancel ? onCancel : onConfirm}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          {onCancel && <AlertDialogCancel onClick={onCancel}>Cancel</AlertDialogCancel>}
          <AlertDialogAction onClick={onConfirm}>Confirm</AlertDialogAction>

        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog >
  )
}

================
File: components/CustomLink.tsx
================
import { cn } from "@/lib/utils"
import { ExternalLink } from "lucide-react"
import Link from "next/link"

interface CustomLinkProps extends React.LinkHTMLAttributes<HTMLAnchorElement> {
  href: string
}

export const CustomLink = ({
  href,
  children,
  className,
  ...rest
}: CustomLinkProps) => {
  const isInternalLink = href.startsWith("/")
  const isAnchorLink = href.startsWith("#")

  if (isInternalLink || isAnchorLink) {
    return (
      <Link href={href} className={className} {...rest}>
        {children}
      </Link>
    )
  }

  return (
    <Link
      href={href}
      target="_blank"
      rel="noopener noreferrer"
      className={cn(
        "inline-flex items-center gap-1 align-baseline",
        className
      )}
      {...rest}
    >
      <span>{children}</span>
      <ExternalLink className="ml-0.5 inline-block h-4 w-4" />
    </Link>
  )
}

================
File: components/MarketingStory.tsx
================
import Image from 'next/image';
import { ReactNode } from 'react';

interface AuthorInfo {
  avatar: string;
  name: string;
  twitterHandle?: string;
  description: string[];
}

interface MarketingStoryProps {
  title: ReactNode;
  content: ReactNode;
  author?: AuthorInfo;
  className?: string;
}

export function MarketingStory({
  title,
  content,
  author,
  className = '',
}: MarketingStoryProps) {
  return (
    <div className={`rounded-2xl p-8 max-w-2xl mx-auto shadow-2xl ${className}`}>
      {/* Title */}
      <h2 className="text-3xl font-medium mb-6 leading-tight">
        {title}
      </h2>

      {/* Content */}
      <div className="space-y-6 text-gray-700">
        {content}
      </div>

      {/* Author */}
      {author && (<div className="flex items-center gap-4 mt-8">
        <Image
          src={author.avatar}
          alt={author.name}
          width={48}
          height={48}
          className="w-12 h-12 rounded-full"
        />
        <div>
          <div className="flex items-center gap-2">
            <span className="font-medium">{author.name}</span>
            {author.twitterHandle && (
              <a
                href={`https://twitter.com/${author.twitterHandle.replace('@', '')}`}
                className="text-blue-500 hover:underline"
                target="_blank"
                rel="noopener noreferrer"
              >
                {author.twitterHandle}
              </a>
            )}
          </div>
          {author.description.map((line, index) => (
            <p key={index} className="text-gray-600 text-sm">
              {line}
            </p>
          ))}
        </div>
      </div>
      )}
    </div>
  );
}

================
File: components/PinnedQuote.tsx
================
import { cn } from "@/lib/utils";
import Image from "next/image";

interface Props {
  quote: string;
  source: string;
  className?: string;
  containerClassName?: string;
  quoteClassName?: string;
  sourceClassName?: string;
}

export const PinnedQuote = ({
  quote,
  source,
  className,
  containerClassName,
  quoteClassName,
  sourceClassName
}: Props) => {
  return (
    <div className={cn("w-full mx-auto py-20 px-4", className)}>
      <div className={cn(
        "relative bg-neutral-50 dark:bg-neutral-800 p-12 rounded-lg transform rotate-2 shadow-lg",
        containerClassName
      )}>
        {/* Pin Icon */}
        <div className="absolute -top-6 left-1/2 -translate-x-1/2">
          <Image
            src="/pin.png"
            alt="Pin icon"
            width={40}
            height={40}
            className="transform -rotate-12"
          />
        </div>

        {/* Quote Content */}
        <div className="text-center">
          <blockquote className={cn(
            "text-4xl font-serif mb-6 text-neutral-800 dark:text-neutral-100",
            quoteClassName
          )}>
            "{quote}"
          </blockquote>
          <cite className={cn(
            "text-xl font-bold not-italic text-neutral-700 dark:text-neutral-200",
            sourceClassName
          )}>
            {source}
          </cite>
        </div>
      </div>
    </div>
  );
};

================
File: components/ThemedButton.tsx
================
"use client";
import { Moon } from "@/components/icons/Moon";
import { Sun } from "@/components/icons/Sun";
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

export function ThemedButton() {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <Sun />;
  }

  return (
    <div onClick={() => setTheme(theme === "light" ? "dark" : "light")}>
      {theme === "light" ? <Moon /> : <Sun />}
    </div>
  );
}

================
File: components/UserAccountNav.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { LogOut } from "lucide-react";
import { signOut } from "next-auth/react";
import { FC, ReactNode } from 'react';
interface UserAccountNavProps {
  user?: {
    name?: string | null
    image?: string | null
    email?: string | null
  }
  children?: ReactNode
}

export const UserAccountNav: FC<UserAccountNavProps> = ({ user, children }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger>
        <Avatar className="h-10 w-10">
          <AvatarImage
            src={user?.image || ''}
            alt="User Avatar"
          />
          <AvatarFallback>
            {user?.name?.[0]?.toUpperCase() ?? 'U'}
          </AvatarFallback>
        </Avatar>
      </DropdownMenuTrigger>

      <DropdownMenuContent>
        <DropdownMenuLabel>
          {user?.name && <p>{user.name}</p>}
          {user?.email && (
            <p className="text-sm text-muted-foreground">{user.email}</p>
          )}
        </DropdownMenuLabel>

        <DropdownMenuSeparator />

        {children}

        {children && <DropdownMenuSeparator />}

        <DropdownMenuItem
          onClick={() => signOut({ callbackUrl: '/' })}
          className="text-bold cursor-pointer flex items-center justify-center"
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

export default UserAccountNav

================
File: config/index.ts
================
import { siteConfig } from "./site"
import { AuthConfig, PaymentConfig } from "./types"
export * from "./site"

export const authConfig: AuthConfig = {
  signInPage: "/signin",
  defaultAuthCallbackUrl: "/",
}

export const paymentConfig: PaymentConfig = {
  paymentProvider: "stripe",
  systemName: "shipnowkit",
  successPage: "/payment/success",
  pricePage: `${siteConfig.baseUrl}/#pricing`
}

================
File: config/site.ts
================
import { getURL } from "@/lib/utils";
import { BaseSiteConfig, SiteConfig } from "./types";
const baseSiteConfig: BaseSiteConfig = {
  name: "ShipNow",
  // title of landing page
  title: "Ship Your SaaS in hours, not days",
  // description of landing page
  description:
    "Built with Next.js 15 & React 19 - Packed with auth, payments, emails & more. Focus on your SaaS while we handle the infrastructure.",
  baseUrl: getURL(),
  metadataBase: '/',
  socialAccounts: {
    twitter: {
      url: 'https://x.com/danteisshipping',
      account: '@danteisshipping',
    }
  },
  themeColors: [
    { media: '(prefers-color-scheme: light)', color: 'white' },
    { media: '(prefers-color-scheme: dark)', color: 'black' },
  ],
  defaultNextTheme: 'system',
  icons: {
    icon: "/favicon.ico",
    logo: "/logo.svg",
  },
}

export const siteConfig: SiteConfig = {
  ...baseSiteConfig,
  openGraph: {
    type: "website",
    locale: "en-US",
    url: baseSiteConfig.baseUrl,
    title: baseSiteConfig.name,
    description: baseSiteConfig.description,
    siteName: baseSiteConfig.name,
    images: ["https://shipnow-1253247883.cos.na-siliconvalley.myqcloud.com/shipnow-og.png"],
  },
  twitter: {
    card: "summary_large_image",
    title: baseSiteConfig.name,
    site: baseSiteConfig.baseUrl,
    description: baseSiteConfig.description,
    images: ["https://shipnow-1253247883.cos.na-siliconvalley.myqcloud.com/shipnow-og.png"],
    creator: baseSiteConfig.socialAccounts?.twitter?.account || '',
  },
}

================
File: config/types.ts
================
type SocialAccountsConfig = {
  url: string
  account?: string
}


export type BaseSiteConfig = {
  name: string
  title: string
  description: string
  baseUrl: string
  socialAccounts: Record<string, SocialAccountsConfig>
  metadataBase: URL | string
  themeColors: { media: string, color: string }[]
  defaultNextTheme: string
  icons: {
    icon: string
    logo: string
  }
}

export type SiteConfig = BaseSiteConfig & {
  openGraph: {
    type: string
    locale: string
    url: string
    title: string
    description: string
    siteName: string
    images?: string[]
  },
  twitter: {
    card: string
    title: string
    site: string
    description: string
    images?: string[]
    creator: string
  },
}

export type AuthConfig = {
  signInPage: string
  defaultAuthCallbackUrl: string
}

export type PaymentConfig = {
  paymentProvider: "stripe" | "paddle"
  systemName?: string
  successPage: string
  pricePage: string
}

================
File: db/prisma/variants/mongodb.prisma
================
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid()) @map("_id")
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  customers          Customer[]
  subscriptions      Subscription[]
  oneTimePayments    OneTimePayment[]
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String  @id @default(cuid()) @map("_id")
  provider    PaymentProvider
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Subscription {
  id                              String            @id @default(cuid()) @map("_id")
  latest_successful_transaction_id String?
  provider                        PaymentProvider
  user_id                         String
  price_id                        String?
  status                          SubscriptionStatus
  quantity                        Int?
  cancel_at                       DateTime?
  cancel_at_period_end           Boolean?
  canceled_at                     DateTime?
  created                        DateTime
  current_period_start           DateTime
  current_period_end             DateTime
  ended_at                       DateTime?
  trial_start                    DateTime?
  trial_end                      DateTime?
  metadata                       Json?
  user                          User               @relation(fields: [user_id], references: [id])
  @@map("subscriptions")
}

model OneTimePayment {
  id         String               @id @default(cuid()) @map("_id")
  provider   PaymentProvider
  user_id    String
  price_id   String
  quantity   Int?
  status     OneTimePaymentStatus
  amount     Int
  currency   String
  metadata   Json?
  created_at DateTime
  user       User                @relation(fields: [user_id], references: [id])
  @@map("one_time_payments")
}

model Price {
  id                      String          @id @default(cuid()) @map("_id")
  provider                PaymentProvider
  product_id              String?
  active                  Boolean?
  currency                String?
  unit_amount             Int?
  billing_cycle_interval  String?
  billing_cycle_frequency Int?
  trial_period_interval   String?
  trial_period_frequency  Int?
  type                    String?

  @@map("prices")
}

enum SubscriptionStatus {
  // stripe
  incomplete
  incomplete_expired
  unpaid
  // common
  past_due
  paused
  trialing
  active
  canceled
}

enum OneTimePaymentStatus {
  // stripe
  no_payment_required
  unpaid
  // paddle
  draft
  ready
  billed
  completed
  canceled
  past_due
  // common
  paid
}

enum PaymentProvider {
  stripe
  paddle
}

================
File: db/prisma/variants/mysql.prisma
================
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  customers          Customer[]
  subscriptions       Subscription[]
  oneTimePayments     OneTimePayment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String  @id
  provider             PaymentProvider
  user_id String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Subscription {
  id                   String                    @id
  latest_successful_transaction_id String?
  provider             PaymentProvider
  user_id              String
  price_id             String?
  status               SubscriptionStatus
  quantity             Int?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  created              DateTime
  current_period_start DateTime
  current_period_end   DateTime
  ended_at             DateTime?
  trial_start          DateTime?
  trial_end            DateTime?
  metadata             Json?
  user                 User                      @relation(fields: [user_id], references: [id])
  @@map("subscriptions")
}

model OneTimePayment {
  id String @id
  provider PaymentProvider
  user_id String
  price_id String
  quantity             Int?
  status OneTimePaymentStatus
  amount Int
  currency String
  metadata             Json?
  created_at          DateTime
  user User @relation(fields: [user_id], references: [id])
  @@map("one_time_payments")
}

model Price {
  id                String               @id
  provider          PaymentProvider
  product_id        String?
  active            Boolean?
  currency          String?
  unit_amount       Int?                // Prisma 中货币金额通常用 Int 表示（最小单位，如分）
  billing_cycle_interval          String?
  billing_cycle_frequency    Int?
  trial_period_interval          String?
  trial_period_frequency    Int?
  type              String?

  @@map("prices")
}

enum SubscriptionStatus {
  // stripe
  incomplete
  incomplete_expired
  unpaid
  // common
  past_due
  paused
  trialing
  active
  canceled
}

enum OneTimePaymentStatus {
  // stripe
  no_payment_required
  unpaid
  // paddle
  draft
  ready
  billed
  completed
  canceled
  past_due
  // common
  paid
}

enum PaymentProvider {
  stripe
  paddle
}

================
File: db/prisma/variants/postgresql.prisma
================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  customers          Customer[]
  subscriptions      Subscription[]
  oneTimePayments    OneTimePayment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String  @id
  provider    PaymentProvider
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Subscription {
  id                              String             @id
  latest_successful_transaction_id String?
  provider                        PaymentProvider
  user_id                         String
  price_id                        String?
  status                          SubscriptionStatus
  quantity                        Int?
  cancel_at                       DateTime?
  cancel_at_period_end           Boolean?
  canceled_at                     DateTime?
  created                        DateTime
  current_period_start           DateTime
  current_period_end             DateTime
  ended_at                       DateTime?
  trial_start                    DateTime?
  trial_end                      DateTime?
  metadata                       Json?              @db.JsonB
  user                           User               @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model OneTimePayment {
  id          String               @id
  provider    PaymentProvider
  user_id     String
  price_id    String
  quantity    Int?
  status      OneTimePaymentStatus
  amount      Int
  currency    String
  metadata    Json?               @db.JsonB
  created_at  DateTime
  user        User                @relation(fields: [user_id], references: [id])

  @@map("one_time_payments")
}

model Price {
  id                      String          @id
  provider                PaymentProvider
  product_id              String?
  active                  Boolean?
  currency                String?
  unit_amount             Int?
  billing_cycle_interval  String?
  billing_cycle_frequency Int?
  trial_period_interval   String?
  trial_period_frequency  Int?
  type                    String?

  @@map("prices")
}

enum SubscriptionStatus {
  // stripe
  incomplete
  incomplete_expired
  unpaid
  // common
  past_due
  paused
  trialing
  active
  canceled
}

enum OneTimePaymentStatus {
  // stripe
  no_payment_required
  unpaid
  // paddle
  draft
  ready
  billed
  completed
  canceled
  past_due
  // common
  paid
}

enum PaymentProvider {
  stripe
  paddle
}

================
File: db/prisma/schema.prisma
================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  customers          Customer[]
  subscriptions      Subscription[]
  oneTimePayments    OneTimePayment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String  @id
  provider    PaymentProvider
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Subscription {
  id                              String             @id
  latest_successful_transaction_id String?
  provider                        PaymentProvider
  user_id                         String
  price_id                        String?
  status                          SubscriptionStatus
  quantity                        Int?
  cancel_at                       DateTime?
  cancel_at_period_end           Boolean?
  canceled_at                     DateTime?
  created                        DateTime
  current_period_start           DateTime
  current_period_end             DateTime
  ended_at                       DateTime?
  trial_start                    DateTime?
  trial_end                      DateTime?
  metadata                       Json?              @db.JsonB
  user                           User               @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model OneTimePayment {
  id          String               @id
  provider    PaymentProvider
  user_id     String
  price_id    String
  quantity    Int?
  status      OneTimePaymentStatus
  amount      Int
  currency    String
  metadata    Json?               @db.JsonB
  created_at  DateTime
  user        User                @relation(fields: [user_id], references: [id])

  @@map("one_time_payments")
}

model Price {
  id                      String          @id
  provider                PaymentProvider
  product_id              String?
  active                  Boolean?
  currency                String?
  unit_amount             Int?
  billing_cycle_interval  String?
  billing_cycle_frequency Int?
  trial_period_interval   String?
  trial_period_frequency  Int?
  type                    String?

  @@map("prices")
}

enum SubscriptionStatus {
  // stripe
  incomplete
  incomplete_expired
  unpaid
  // common
  past_due
  paused
  trialing
  active
  canceled
}

enum OneTimePaymentStatus {
  // stripe
  no_payment_required
  unpaid
  // paddle
  draft
  ready
  billed
  completed
  canceled
  past_due
  // common
  paid
}

enum PaymentProvider {
  stripe
  paddle
}

================
File: db/services/customer.ts
================
import { prisma } from "@/db";
import { stripe } from "@/lib/payment/stripe/config";
import { createCustomer } from "@/lib/payment/stripe/server";
import { PaymentProvider } from "@prisma/client";
import { handleDatabaseError } from "../utils";
export async function upsertStripeCustomer(userId: string, email: string) {
  try {
    const customer = await prisma.customer.findFirst({
      where: { user_id: userId, provider: PaymentProvider.stripe },
    });
    if (customer) {
      return customer.id;
    }
    // retrive customer from email
    const stripeCustomers = await stripe.customers.list({ email: email });
    let stripeCustomerId =
      stripeCustomers.data.length > 0 ? stripeCustomers.data[0].id : undefined;
    // create customer in stripe
    if (!stripeCustomerId) {
      stripeCustomerId = await createCustomer(userId, email);
    }
    // create customer in db
    await prisma.customer.create({
      data: { user_id: userId, provider: PaymentProvider.stripe, id: stripeCustomerId },
    });
    return stripeCustomerId;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: db/services/oneTimePayment.ts
================
import { Prisma } from "@prisma/client";
import { prisma } from "../client";
import { handleDatabaseError } from "../utils";

export async function upsertOneTimePayment(record: Prisma.OneTimePaymentUncheckedCreateInput) {
  try {
    const upsertedOneTimePayment = await prisma.oneTimePayment.upsert({
      where: {
        id: record.id
      },
      create: record,
      update: record
    });
    return upsertedOneTimePayment;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: db/services/price.ts
================
import { Prisma } from '@prisma/client';
import { prisma } from "../client";
import { handleDatabaseError } from "../utils";
const Price = prisma.price;

export async function upsertPrice(price: Prisma.PriceCreateInput) {
  try {
    const upsertedPrice = await Price.upsert({
      where: {
        id: price.id,
      },
      create: price,
      update: price
    });
    return upsertedPrice;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

export async function deletePrice(priceId: string) {
  try {
    await Price.delete({ where: { id: priceId, provider: 'stripe' } });
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

export async function getPriceById(priceId: string) {
  try {
    const price = await Price.findUnique({ where: { id: priceId } });
    return price;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

export async function getPriceByIds(priceIds: string[]) {
  try {
    const prices = await Price.findMany({ where: { id: { in: priceIds } } });
    return prices;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: db/services/subscription.ts
================
import { Prisma } from "@prisma/client";
import { prisma } from "../client";
import { handleDatabaseError } from "../utils";

export async function upsertSubscription(subscription: Prisma.SubscriptionUncheckedCreateInput) {
  try {
    const upsertedSubscription = await prisma.subscription.upsert({
      where: {
        id: subscription.id
      },
      create: subscription,
      update: subscription
    });
    return upsertedSubscription;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: db/services/user.ts
================
"use server"
import { paymentConfig } from "@/config";
import { OneTimePaymentStatus, SubscriptionStatus } from "@prisma/client";
import { prisma } from "../client";
import { handleDatabaseError } from "../utils";
export async function getUserActivePlans(userId: string, isSubscription: boolean) {
  if (isSubscription) {
    return await prisma.subscription.findMany({
      where: {
        user_id: userId,
        provider: paymentConfig.paymentProvider,
        status: {
          in: [SubscriptionStatus.active, SubscriptionStatus.trialing, SubscriptionStatus.paused, SubscriptionStatus.past_due]
        }
      }
    });
  } else {
    return await prisma.oneTimePayment.findMany({
      where: {
        user_id: userId,
        provider: paymentConfig.paymentProvider,
        status: OneTimePaymentStatus.paid
      }
    });
  }
}

export async function getUserActiveSubscription(userId: string, priceId: string) {
  try {
    return await prisma.subscription.findFirst({
      where: {
        user_id: userId,
        price_id: priceId,
        provider: paymentConfig.paymentProvider,
        status: {
          in: [SubscriptionStatus.active, SubscriptionStatus.trialing]
        }
      }
    });
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: db/client.ts
================
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: [
      {
        emit: 'event',
        level: 'query',
      },
      {
        emit: 'event',
        level: 'error',
      },
      {
        emit: 'event',
        level: 'info',
      },
      {
        emit: 'event',
        level: 'warn',
      },
    ],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

================
File: db/index.ts
================
import { logger } from '@/lib/logger'
import { Prisma } from '@prisma/client'
import { prisma } from './client'
// 日志处理
prisma.$on('query' as never, (e: Prisma.QueryEvent) => {
  logger.debug('Query: ' + e.query)
  logger.debug('Params: ' + e.params)
  logger.debug('Duration: ' + e.duration + 'ms')
})

prisma.$on('error' as never, (e: Prisma.LogEvent) => {
  logger.error('Prisma Error: ' + e.message)
})

prisma.$on('info' as never, (e: Prisma.LogEvent) => {
  logger.info('Prisma Info: ' + e.message)
})

prisma.$on('warn' as never, (e: Prisma.LogEvent) => {
  logger.warn('Prisma Warn: ' + e.message)
})

export * from '@prisma/client'
export * from './client'
export * from './utils'

================
File: db/types.ts
================
// Database error type
export type DatabaseError = {
  code: string
  message: string
  details?: unknown
}

================
File: db/utils.ts
================
import { logger } from '@/lib/logger'
import { Prisma } from '@prisma/client'
import { prisma } from './client'
import { DatabaseError } from './types'

// 错误处理
export async function handleDatabaseError(error: unknown): Promise<DatabaseError> {
  if (error instanceof Prisma.PrismaClientKnownRequestError) {
    logger.error(`Database Error: ${error.code} - ${error.message}`)
    return {
      code: error.code,
      message: error.message,
      details: error.meta
    }
  }

  logger.error(`Unknown Database Error: ${error}`)
  return {
    code: 'UNKNOWN_ERROR',
    message: error instanceof Error ? error.message : 'An unknown error occurred'
  }
}

// 事务包装器
export async function withTransaction<T>(
  fn: (tx: Prisma.TransactionClient) => Promise<T>
): Promise<T> {
  try {
    return await prisma.$transaction(fn)
  } catch (error) {
    throw await handleDatabaseError(error)
  }
}

================
File: emailTemplate/magicLinks/index.ts
================
import { logger } from "@/lib/logger";
import { templateRegistry } from "./registry";
import { MagicLinkEmailProps } from "./types";

export async function getMagicLinkEmailTemplate(props: MagicLinkEmailProps) {
  try {
    const templateName = (process.env.MAGIC_LINK_TEMPLATE || 'NotionLike').toLowerCase();
    let template = templateRegistry.get(templateName);

    if (!template) {
      logger.warn(`Template "${templateName}" not found, falling back to default template`);
      template = templateRegistry.get('notionlike');
      if (!template) {
        throw new Error('Default template not found');
      }
      return template(props);
    }
    return template(props);
  } catch (error) {
    logger.error('Error loading email template:', error);
    throw new Error(`Failed to load email template: ${error}`);
  }
}

================
File: emailTemplate/magicLinks/NotionLike.tsx
================
import {
  Body,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Text
} from "@react-email/components";

import { siteConfig } from "@/config";
import { MagicLinkEmailProps } from "./types";

export const NotionMagicLinkEmail = ({
  magicLink,
}: MagicLinkEmailProps) => (
  <Html>
    <Head />
    <Preview>Log in with this magic link</Preview>
    <Body style={main}>
      <Container style={container}>
        <Heading style={h1}>Login</Heading>
        <Link
          href={magicLink}
          target="_blank"
          style={{
            ...link,
            display: "block",
            marginBottom: "16px",
          }}
        >
          Click here to log in with this magic link
        </Link>
        <Text
          style={{
            ...text,
            color: "#ababab",
            marginTop: "14px",
            marginBottom: "16px",
          }}
        >
          If you didn&apos;t try to login, you can safely ignore this email.
        </Text>
        <img
          src={siteConfig.icons.logo}
          width="32"
          height="32"
          alt="Notion's Logo"
        />
        <Text style={footer}>
          <Link
            href={siteConfig.baseUrl}
            target="_blank"
            style={{ ...link, color: "#898989" }}
          >
            {siteConfig.name}
          </Link>
          <br />
          {siteConfig.description}
        </Text>
      </Container>
    </Body>
  </Html>
);
const main = {
  backgroundColor: "#ffffff",
};

const container = {
  paddingLeft: "12px",
  paddingRight: "12px",
  margin: "0 auto",
};

const h1 = {
  color: "#333",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "24px",
  fontWeight: "bold",
  margin: "40px 0",
  padding: "0",
};

const link = {
  color: "#2754C5",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "14px",
  textDecoration: "underline",
};

const text = {
  color: "#333",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "14px",
  margin: "24px 0",
};

const footer = {
  color: "#898989",
  fontFamily:
    "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  fontSize: "12px",
  lineHeight: "22px",
  marginTop: "12px",
  marginBottom: "24px",
};

================
File: emailTemplate/magicLinks/registry.ts
================
import * as React from 'react';
import { NotionMagicLinkEmail } from "./NotionLike";
import { MagicLinkEmailProps } from "./types";

export const templateRegistry = new Map<string, (props: MagicLinkEmailProps) => React.ReactNode>();

function registerTemplate(name: string, template: (props: MagicLinkEmailProps) => React.ReactNode) {
  templateRegistry.set(name.toLowerCase(), template);
}

registerTemplate('NotionLike', NotionMagicLinkEmail);

================
File: emailTemplate/magicLinks/types.ts
================
export type MagicLinkEmailProps = {
  magicLink: string;
}

================
File: lib/actions/auth.d.ts
================
export interface SUBMIT_RESULT {
  success: string;
  error: string;
}

export interface VerificationRequestParams {
  identifier: string;
  url: string;
}

================
File: lib/actions/auth.ts
================
'use server'

import { auth, signIn, signOut } from "@/auth";
import { authConfig } from "@/config";
import { getMagicLinkEmailTemplate } from "@/emailTemplate/magicLinks";
import { logger } from '@/lib/logger';
import { Resend } from 'resend';
import { z } from "zod";
import type { SUBMIT_RESULT, VerificationRequestParams } from "./auth.d";
export async function signInAction(provider?: string, callbackUrl: string = authConfig.defaultAuthCallbackUrl) {
  return await signIn(provider, { redirectTo: callbackUrl, redirect: false })
}

export async function signOutAction() {
  await signOut()
}

export async function isSignedIn() {
  const session = await auth();
  return !!session && !!session.user;
}

const authSchema = z.object({
  email: z.string().email("Invalid email address"),
});

export async function sendMagicLinkAction(
  formData: FormData,
  provider: string,
  callbackUrl: string = authConfig.defaultAuthCallbackUrl) {
  const validated = authSchema.safeParse({
    email: formData.get("email"),
  });

  if (!validated.success) {
    return <SUBMIT_RESULT>{
      success: "",
      error: validated.error.errors[0]?.message,
    };
  }

  try {
    await signIn(provider, {
      email: validated.data.email,
      redirectTo: callbackUrl,
      redirect: false,
    });
    return <SUBMIT_RESULT>{
      error: "",
      success: "Magic link sent! Check your email.",
    };
  } catch (error) {
    logger.error(error);
    return <SUBMIT_RESULT>{
      success: "",
      error: "Failed to send magic link. Please try again.",
    };
  }
};

export async function resendVerificationRequest(params: VerificationRequestParams) {
  const { identifier: to, url } = params
  const { host } = new URL(url)
  const resend = new Resend(process.env.RESEND_API_KEY!)
  try {
    const { data, error } = await resend.emails.send({
      from: process.env.AUTH_EMAIL_FROM!,
      to: [to],
      subject: process.env.MAGIC_LINK_EMAIL_SUBJECT || `Sign in to ${host}`,
      react: getMagicLinkEmailTemplate({ magicLink: url }),
    });

    if (error) {
      logger.error(error);
      return Response.json({ error }, { status: 500 });
    }
    return Response.json(data);
  } catch (error) {
    logger.error(error);
    return Response.json({ error }, { status: 500 });
  }
}

================
File: lib/actions/payment.ts
================
"use server"

import { paymentConfig } from "@/config";
import { getPriceByIds } from "@/db/services/price";
import { createPaddleCustomerPortal } from "@/lib/payment/paddle/server";
import { createStripeCustomerPortal } from "@/lib/payment/stripe/server";
export async function batchGetPriceAmount(priceIds: string[]) {
  const prices = await getPriceByIds(priceIds)
  const priceAmounts = prices
    .filter(price => price.active)
    .reduce((acc, price) => ({
      ...acc,
      [price.id]: {
        unit_amount: price.unit_amount,
        currency: price.currency?.toUpperCase() ?? 'USD'
      }
    }), {})
  return priceAmounts
}

export async function createCustomerPortal(currentPath: string) {
  if (paymentConfig.paymentProvider === "stripe") {
    return createStripeCustomerPortal(currentPath);
  } else if (paymentConfig.paymentProvider === "paddle") {
    return createPaddleCustomerPortal();
  }
}

================
File: lib/actions/user.ts
================
"use server"

import { getUserActivePlans } from "@/db/services/user";

export async function getUserActivePlansAction(userId: string, isSubscription: boolean) {
  return await getUserActivePlans(userId, isSubscription);
}

================
File: lib/payment/paddle/config.ts
================
import { Environment, LogLevel, Paddle, PaddleOptions } from '@paddle/paddle-node-sdk';

export function getPaddleInstance() {
  const paddleOptions: PaddleOptions = {
    environment: (process.env.NEXT_PUBLIC_PADDLE_ENV as Environment) ?? Environment.sandbox,
    logLevel: LogLevel.error,
  };

  if (!process.env.PADDLE_API_KEY) {
    console.error('Paddle API key is missing');
  }

  return new Paddle(process.env.PADDLE_API_KEY!, paddleOptions);
}

================
File: lib/payment/paddle/server.ts
================
'use server';
import { eventEmitter } from '@/app/api/payment/eventEmitter';
import { auth } from '@/auth';
import { authConfig } from '@/config';
import { prisma } from '@/db';
import { getUserActiveSubscription } from '@/db/services/user';
import { handleDatabaseError } from '@/db/utils';
import { logger } from '@/lib/logger';
import { UpdateSubscriptionRequestBody } from '@paddle/paddle-node-sdk';
import { PaymentProvider } from '@prisma/client';
import { getPaddleInstance } from './config';

export async function upsertCustomer(userId: string, email: string) {
  try {
    const customer = await prisma.customer.findFirst({
      where: { user_id: userId, provider: PaymentProvider.paddle },
    });
    if (customer) {
      return customer.id;
    }
    // retrive customer from email
    const paddle = getPaddleInstance();
    const paddleCustomers = await paddle.customers.list({
      email: [email],
    }).next();
    let paddleCustomerId = paddleCustomers.length > 0 ? paddleCustomers[0].id : undefined;
    if (!paddleCustomerId) {
      const newCustomer = await paddle.customers.create({
        email: email,
      });
      paddleCustomerId = newCustomer.id;
    }
    // create customer in db
    await prisma.customer.create({
      data: { user_id: userId, provider: PaymentProvider.paddle, id: paddleCustomerId },
    });
    return paddleCustomerId;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

export async function getSubscription(subscriptionId: string) {
  try {
    return await getPaddleInstance().subscriptions.get(subscriptionId, {
      include: ['next_transaction', 'recurring_transaction_details'],
    });
  } catch (error) {
    logger.error(error);
    throw new Error('Failed to get subscription');
  }
}

export async function changeSubscription(currentPriceId: string, targetPriceId: string) {
  if (currentPriceId === targetPriceId) {
    return;
  }
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error('User not found');
  }
  // check if user has currentPriceId subscription
  const userCurrentActiveSubscription = await getUserActiveSubscription(session.user.id, currentPriceId);
  if (!userCurrentActiveSubscription) {
    throw new Error('User does not have currentPriceId subscription');
  }
  // check if user has targetPriceId subscription
  const userTargetActiveSubscription = await getUserActiveSubscription(session.user.id, targetPriceId);
  if (userTargetActiveSubscription) {
    return;
  }

  const body: UpdateSubscriptionRequestBody = {
    prorationBillingMode: 'prorated_immediately',
    onPaymentFailure: 'prevent_change',
    items: [
      {
        priceId: targetPriceId,
        quantity: 1,
      },
    ]
  };
  const paddle = getPaddleInstance();
  try {
    await paddle.subscriptions.update(userCurrentActiveSubscription.id, body);
    await eventEmitter.emit('subscription.plan_updated', `${userCurrentActiveSubscription.id}_${Date.now()}`, {
      subscriptionId: userCurrentActiveSubscription.id,
      oldPriceId: currentPriceId,
      newPriceId: targetPriceId,
    });
  } catch (error) {
    logger.error(error);
    throw new Error('Failed to change subscription');
  }
}

export async function createPaddleCustomerPortal() {
  try {
    const session = await auth();
    if (!session || !session.user || !session.user.id) {
      return authConfig.signInPage;
    }
    const customer = await prisma.customer.findFirst({
      where: { user_id: session.user.id, provider: PaymentProvider.paddle },
    });
    if (!customer) {
      throw new Error('Customer not found');
    }

    const paddle = getPaddleInstance();
    const portalSession = await paddle.customerPortalSessions.create(customer.id, []);
    return portalSession.urls.general.overview;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}

================
File: lib/payment/paddle/types.ts
================
import { Subscription, Transaction } from '@paddle/paddle-node-sdk';
declare global {
  export interface SubscriptionResponse {
    data?: Subscription[];
    hasMore: boolean;
    totalRecords: number;
    error?: string;
  }

  export interface TransactionResponse {
    data?: Transaction[];
    hasMore: boolean;
    totalRecords: number;
    error?: string;
  }

  export interface SubscriptionDetailResponse {
    data?: Subscription;
    error?: string;
  }

}

================
File: lib/payment/paddle/utils.ts
================
export function convertAmountFromLowestUnit(amount: string, currency: string) {
  switch (currency) {
    case 'JPY':
    case 'KRW':
      return parseFloat(amount);
    default:
      return parseFloat(amount) / 100;
  }
}

export function parseMoney(amount: string = '0', currency: string = 'USD') {
  const parsedAmount = convertAmountFromLowestUnit(amount, currency);
  return formatMoney(parsedAmount, currency);
}

export function formatMoney(amount: number = 0, currency: string = 'USD') {
  const language = typeof navigator !== 'undefined' ? navigator.language : 'en-US';
  return new Intl.NumberFormat(language ?? 'en-US', {
    style: 'currency',
    currency: currency,
  }).format(amount);
}

export function parseSDKResponse<T>(response: T): T {
  return JSON.parse(JSON.stringify(response));
}

export const ErrorMessage = 'Something went wrong, please try again later';

export function getErrorMessage() {
  return { error: ErrorMessage, data: [], hasMore: false, totalRecords: 0 };
}

export function getPaymentReason(origin: string) {
  if (origin === 'web' || origin === 'subscription_charge') {
    return 'New';
  } else {
    return 'Renewal of ';
  }
}

================
File: lib/payment/stripe/client.ts
================
import { loadStripe, Stripe } from '@stripe/stripe-js';

let stripePromise: Promise<Stripe | null>;

export const getStripe = () => {
  if (!stripePromise) {
    stripePromise = loadStripe(
      process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ??
      ''
    );
  }

  return stripePromise;
};

================
File: lib/payment/stripe/config.ts
================
import Stripe from 'stripe';

export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY ?? '');

================
File: lib/payment/stripe/server.ts
================
'use server';
import { auth } from '@/auth';
import { paymentConfig } from '@/config';
import { prisma } from '@/db';
import { getPriceById } from '@/db/services/price';
import { handleDatabaseError } from '@/db/utils';
import { logger } from '@/lib/logger';
import { calculateTrialEndUnixTimestamp } from '@/lib/payment/utils';
import { getURL } from '@/lib/utils';
import { PaymentProvider } from '@prisma/client';
import Stripe from 'stripe';
import { stripe } from './config';
export async function upsertCustomer(userId: string, email: string) {
  try {
    const customer = await prisma.customer.findFirst({
      where: { user_id: userId, provider: PaymentProvider.stripe },
    });
    if (customer) {
      return customer.id;
    }
    // retrive customer from email
    const stripeCustomers = await stripe.customers.list({ email: email });
    let stripeCustomerId = stripeCustomers.data
      .filter(customer => customer.metadata?.system === paymentConfig.systemName)
      .map(customer => customer.id)[0];
    // create customer in stripe
    if (!stripeCustomerId) {
      stripeCustomerId = await createCustomer(userId, email);
    }
    // create customer in db
    await prisma.customer.create({
      data: { user_id: userId, provider: PaymentProvider.stripe, id: stripeCustomerId },
    });
    return stripeCustomerId;
  } catch (error) {
    throw handleDatabaseError(error);
  }
}
export async function checkoutWithStripe(priceId: string, currentPath: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.email || !session.user.id) {
    throw new Error('Could not get user session.');
  }
  const customer = await upsertCustomer(session.user.id, session.user.email);
  const price = await getPriceById(priceId);
  if (!price) {
    throw new Error('Price not found');
  }
  let params: Stripe.Checkout.SessionCreateParams = {
    allow_promotion_codes: true,
    billing_address_collection: 'required',
    customer,
    customer_update: {
      address: 'auto'
    },
    metadata: {
      system: paymentConfig.systemName || '',
    },
    line_items: [
      {
        price: priceId,
        quantity: 1
      }
    ],
    cancel_url: getURL(currentPath),
    success_url: getURL(paymentConfig.successPage)
  };
  if (price.type === 'recurring') {
    params = {
      ...params,
      mode: 'subscription',
      subscription_data: {
        trial_end: calculateTrialEndUnixTimestamp(price.trial_period_frequency)
      }
    };
  } else if (price.type === 'one_time') {
    params = {
      ...params,
      mode: 'payment'
    };
  }
  try {
    let checkoutSession = await stripe.checkout.sessions.create(params);
    return checkoutSession.id;
  } catch (error) {
    logger.error(`Failed to create checkout session: ${error}`);
    throw new Error('Failed to create checkout session');
  }
}

export async function createStripeCustomerPortal(currentPath: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.email || !session.user.id) {
    throw new Error('Could not get user session.');
  }
  const customer = await upsertCustomer(session.user.id, session.user.email);
  try {
    const { url } = await stripe.billingPortal.sessions.create({
      configuration: process.env.STRIPE_BILLING_PORTAL_CONFIGURATION_ID as string,
      customer,
      return_url: getURL(currentPath)
    });
    return url;
  } catch (error) {
    logger.error(`Failed to create billing portal session: ${error}`);
    throw new Error('Failed to create billing portal session');
  }
}

export async function createCustomer(userId: string, email: string) {
  const customer = await stripe.customers.create({ metadata: { userId, system: paymentConfig.systemName || '' }, email });
  if (!customer) {
    throw new Error('Failed to create customer');
  }
  return customer.id;
}

================
File: lib/payment/stripe/types.ts
================
export type CheckoutResponse = {
  errorRedirect?: string;
  sessionId?: string;
};

================
File: lib/payment/utils.ts
================
export const calculateTrialEndUnixTimestamp = (
  trialPeriodDays: number | null | undefined
) => {
  // Check if trialPeriodDays is null, undefined, or less than 2 days
  if (
    trialPeriodDays === null ||
    trialPeriodDays === undefined ||
    trialPeriodDays < 2
  ) {
    return undefined;
  }

  const currentDate = new Date(); // Current date and time
  const trialEnd = new Date(
    currentDate.getTime() + (trialPeriodDays + 1) * 24 * 60 * 60 * 1000
  ); // Add trial days
  return Math.floor(trialEnd.getTime() / 1000); // Convert to Unix timestamp in seconds
};

================
File: lib/logger.ts
================
import * as fs from 'fs';
import winston from 'winston';
import 'winston-daily-rotate-file';

const enableFileLog = process.env.FILE_LOG === 'true';
const logDir = process.env.LOG_DIR || 'logs';

// Create logger instance
const createLogger = () => {
  const transports: winston.transport[] = [];

  // Add file transport if FILE_LOG is true
  if (enableFileLog) {
    // Create log directory if it doesn't exist
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }

    transports.push(
      new winston.transports.DailyRotateFile({
        filename: `${logDir}/%DATE%.log`,
        datePattern: 'YYYY-MM-DD',
        zippedArchive: true,
        maxSize: '20m',
        maxFiles: '3d',
        level: 'info',
      })
    );
  }

  return winston.createLogger({
    level: 'info',
    format: winston.format.combine(
      winston.format.timestamp(),
      winston.format.json()
    ),
    transports
  });
};

const fileLogger = createLogger();

// Create a combined logger
export const logger = {
  info: (...args: any[]) => {
    console.log(...args);
    if (enableFileLog) {
      fileLogger.info(args.map(arg =>
        typeof arg === 'object' ? JSON.stringify(arg) : arg
      ).join(' '));
    }
  },
  warn: (...args: any[]) => {
    console.warn(...args);
    if (enableFileLog) {
      fileLogger.warn(args.map(arg =>
        typeof arg === 'object' ? JSON.stringify(arg) : arg
      ).join(' '));
    }
  },
  error: (...args: any[]) => {
    console.error(...args);
    if (enableFileLog) {
      fileLogger.error(args.map(arg =>
        typeof arg === 'object' ? JSON.stringify(arg) : arg
      ).join(' '));
    }
  },
  debug: (...args: any[]) => {
    console.debug(...args);
    if (enableFileLog) {
      fileLogger.debug(args.map(arg =>
        typeof arg === 'object' ? JSON.stringify(arg) : arg
      ).join(' '));
    }
  }
};

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function getURL(path?: string) {
  // Check if NEXT_PUBLIC_SITE_URL is set and non-empty. Set this to your site URL in production env.
  let url =
    process?.env?.NEXT_PUBLIC_SITE_URL &&
      process.env.NEXT_PUBLIC_SITE_URL.trim() !== ''
      ? process.env.NEXT_PUBLIC_SITE_URL
      : // If not set, check for NEXT_PUBLIC_VERCEL_URL, which is automatically set by Vercel.
      process?.env?.NEXT_PUBLIC_VERCEL_URL &&
        process.env.NEXT_PUBLIC_VERCEL_URL.trim() !== ''
        ? process.env.NEXT_PUBLIC_VERCEL_URL
        : // If neither is set, default to localhost for local development.
        'http://localhost:3000/';

  // Trim the URL and remove trailing slash if exists.
  url = url.replace(/\/+$/, '');
  // Make sure to include `https://` when not localhost.
  url = url.includes('http') ? url : `https://${url}`;
  // Ensure path starts without a slash to avoid double slashes in the final URL.
  path = path?.replace(/^\/+/, '');

  // Concatenate the URL and the path.
  return path ? `${url}/${path}` : url;
}

export function getSocialIcon(platform: string) {
  const platformMap = {
    "twitter": "/social-icons/twitter.svg",
    "instagram": "/social-icons/instagram.svg",
    "linkedin": "/social-icons/linkedin.svg",
    "facebook": "/social-icons/facebook.svg",
    "youtube": "/social-icons/youtube.svg",
  }

  const platform_formatted = platform.toLowerCase();
  return platformMap[platform_formatted as keyof typeof platformMap] || "";
}

================
File: providers/AuthProvider.tsx
================
'use client'

import { SessionProvider } from 'next-auth/react'

export default function AuthProvider({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>
}

================
File: providers/ThemeProvider.tsx
================
"use client";

import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from "next-themes";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: public/notion/1password-gr.svg
================
<svg width="262" height="51" viewBox="0 0 262 51" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_3_661)">
<mask id="mask0_3_661" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="262" height="51">
<path d="M262 0H0V51H262V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_3_661)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.063 25.0169C50.063 11.2006 38.8559 0 25.0315 0C11.2072 0 0 11.2006 0 25.0169C0 38.8338 11.2072 50.0337 25.0315 50.0337C38.8559 50.0337 50.063 38.8338 50.063 25.0169ZM20.4755 11.1186C20.2787 11.5046 20.2787 12.0099 20.2787 13.0205V18.7483C20.2787 19.0007 20.2787 19.127 20.3106 19.2437C20.3388 19.347 20.3853 19.4446 20.4478 19.5317C20.5183 19.63 20.6163 19.7096 20.8124 19.8687L22.2621 21.0457C22.4984 21.2376 22.6165 21.3335 22.6594 21.449C22.697 21.5503 22.697 21.6617 22.6594 21.763C22.6165 21.8785 22.4984 21.9744 22.2621 22.1662L20.8124 23.3432C20.6163 23.5024 20.5183 23.5819 20.4478 23.6803C20.3853 23.7674 20.3388 23.8649 20.3106 23.9683C20.2787 24.085 20.2787 24.2112 20.2787 24.4637V37.013C20.2787 38.0236 20.2787 38.5289 20.4755 38.9149C20.6486 39.2545 20.9248 39.5305 21.2645 39.7035C21.6508 39.9002 22.1564 39.9002 23.1676 39.9002H26.8954C27.9066 39.9002 28.4122 39.9002 28.7985 39.7035C29.1382 39.5305 29.4144 39.2545 29.5875 38.9149C29.7843 38.5289 29.7843 38.0236 29.7843 37.013V31.2853C29.7843 31.0328 29.7843 30.9066 29.7524 30.7899C29.7242 30.6865 29.6777 30.589 29.6153 30.5018C29.5447 30.4035 29.4467 30.3239 29.2506 30.1648L27.8009 28.9878C27.5646 28.796 27.4465 28.7 27.4036 28.5845C27.366 28.4833 27.366 28.3719 27.4036 28.2706C27.4465 28.1551 27.5646 28.0592 27.8009 27.8673L29.2506 26.6903C29.4467 26.5312 29.5447 26.4516 29.6153 26.3533C29.6777 26.2662 29.7242 26.1686 29.7524 26.0652C29.7843 25.9485 29.7843 25.8223 29.7843 25.5699V13.0205C29.7843 12.0099 29.7843 11.5046 29.5875 11.1186C29.4144 10.7791 29.1382 10.503 28.7985 10.33C28.4122 10.1333 27.9066 10.1333 26.8954 10.1333H23.1676C22.1564 10.1333 21.6508 10.1333 21.2645 10.33C20.9248 10.503 20.6486 10.7791 20.4755 11.1186Z" fill="#888888"/>
<path d="M70.1577 39.9831C70.4057 39.9831 70.6068 39.7822 70.6068 39.5343V10.148C70.6068 9.90015 70.4057 9.69922 70.1577 9.69922H65.8245C65.6639 9.69922 65.517 9.78606 65.4288 9.92013C64.4352 11.43 62.5878 12.1905 60.0559 12.2697C59.8081 12.2774 59.6064 12.4775 59.6064 12.7254V17.1206C59.6064 17.3684 59.8075 17.5694 60.0555 17.5694H63.5575C63.8055 17.5694 64.0066 17.7703 64.0066 18.0181V39.5343C64.0066 39.7822 64.2076 39.9831 64.4556 39.9831H70.1577Z" fill="#888888"/>
<path d="M87.4573 15.7744C89.7948 15.7744 91.6741 17.0171 91.6741 20.1467C91.6741 23.1843 89.7948 24.519 87.4573 24.519H82.3696V15.7744H87.4573ZM87.4573 30.18C94.3325 30.18 98.3201 25.9918 98.3201 19.9626C98.3201 14.2556 94.3325 10.0674 87.4573 10.0674H76.2643C76.0163 10.0674 75.8152 10.2683 75.8152 10.5162V39.5343C75.8152 39.7822 76.0163 39.9831 76.2643 39.9831H81.9206C82.1685 39.9831 82.3696 39.7822 82.3696 39.5343V30.6287C82.3696 30.3809 82.5706 30.18 82.8186 30.18H87.4573Z" fill="#888888"/>
<path d="M108.486 35.7484C106.561 35.7484 105.369 34.8739 105.369 33.3091C105.369 31.9284 106.194 31.0079 108.165 31.0079H113.528V31.4681C113.528 34.1375 111.236 35.7484 108.486 35.7484ZM114.032 39.5338C114.032 39.7817 114.233 39.9826 114.481 39.9826H119.404C119.652 39.9826 119.853 39.7817 119.853 39.5338V26.5436C119.853 20.2843 116.324 16.6484 109.953 16.6484C105.222 16.6484 101.601 19.1745 100.116 23.2356C100.027 23.4795 100.175 23.7425 100.427 23.8044L105.387 25.0201C105.611 25.075 105.839 24.9506 105.926 24.7372C106.679 22.8948 107.934 21.8031 109.953 21.8031C112.061 21.8031 113.528 23.1838 113.528 25.6691V25.9913C113.528 26.6816 113.299 26.9578 112.474 26.9578H106.744C101.977 26.9578 99.0898 29.4891 99.0898 33.4932C99.0898 37.7734 102.39 40.5349 106.973 40.5349C109.28 40.5349 111.495 39.777 113.057 38.0892C113.364 37.7573 114.032 37.9596 114.032 38.4115V39.5338Z" fill="#888888"/>
<path d="M132.048 35.9325C129.821 35.9325 128.194 35.008 127.392 33.3093C127.294 33.1031 127.068 32.9832 126.847 33.0392L122.211 34.2127C121.973 34.2731 121.826 34.5147 121.897 34.75C123.071 38.648 126.996 40.5349 131.819 40.5349C138.006 40.5349 141.536 37.3592 141.536 33.033C141.536 24.6566 128.289 27.5101 128.289 23.3679C128.289 21.9872 129.435 21.1127 131.498 21.1127C133.551 21.1127 134.925 22.2346 135.584 23.9549C135.666 24.1683 135.885 24.3022 136.109 24.2597L140.841 23.364C141.094 23.3161 141.256 23.0651 141.183 22.8183C140.097 19.1537 137.047 16.6484 131.544 16.6484C125.494 16.6484 122.285 19.8701 122.285 23.9202C122.285 32.5727 135.577 29.9954 135.577 33.5852C135.577 35.012 134.386 35.9325 132.048 35.9325Z" fill="#888888"/>
<path d="M152.64 35.9325C150.412 35.9325 148.785 35.008 147.983 33.3093C147.886 33.1031 147.66 32.9832 147.439 33.0392L142.803 34.2127C142.564 34.2731 142.418 34.5147 142.488 34.75C143.662 38.648 147.588 40.5349 152.41 40.5349C158.598 40.5349 162.127 37.3592 162.127 33.033C162.127 24.6566 148.881 27.5101 148.881 23.3679C148.881 21.9872 150.027 21.1127 152.09 21.1127C154.142 21.1127 155.517 22.2346 156.176 23.9549C156.257 24.1683 156.476 24.3022 156.701 24.2597L161.433 23.364C161.686 23.3161 161.847 23.0651 161.774 22.8183C160.689 19.1537 157.639 16.6484 152.135 16.6484C146.085 16.6484 142.877 19.8701 142.877 23.9202C142.877 32.5727 156.169 29.9954 156.169 33.5852C156.169 35.012 154.977 35.9325 152.64 35.9325Z" fill="#888888"/>
<path d="M167.922 39.6404C167.97 39.8415 168.151 39.9831 168.358 39.9831H175.487C175.695 39.9831 175.876 39.8398 175.924 39.637L179.555 24.1968L183.187 39.637C183.234 39.8398 183.415 39.9831 183.624 39.9831H190.983C191.189 39.9831 191.369 39.842 191.419 39.6412L196.79 17.7569C196.86 17.4741 196.646 17.2012 196.354 17.2012H191.288C191.075 17.2012 190.891 17.3506 190.848 17.559L187.256 34.9204L182.804 17.5387C182.753 17.3401 182.574 17.2012 182.369 17.2012H176.702C176.494 17.2012 176.313 17.3439 176.265 17.5461L172.13 34.9204L168.583 17.5601C168.54 17.3512 168.356 17.2012 168.143 17.2012H163.03C162.739 17.2012 162.525 17.4735 162.594 17.756L167.922 39.6404Z" fill="#888888"/>
<path d="M208.9 40.5349C215.775 40.5349 220.496 35.1961 220.496 28.6146C220.496 21.9872 215.775 16.6484 208.9 16.6484C202.071 16.6484 197.304 21.9872 197.304 28.6146C197.304 35.1961 202.071 40.5349 208.9 40.5349ZM208.9 35.058C206.058 35.058 203.858 32.6648 203.858 28.6146C203.858 24.5645 206.058 22.1252 208.9 22.1252C211.742 22.1252 213.988 24.5645 213.988 28.6146C213.988 32.6648 211.742 35.058 208.9 35.058Z" fill="#888888"/>
<path d="M229.537 27.9243C229.537 24.0122 231.508 23.0917 234.533 23.0917C235.113 23.0917 235.75 23.1493 236.354 23.2644C236.61 23.3132 236.863 23.1499 236.908 22.8935L237.868 17.4735C237.902 17.2831 237.811 17.0901 237.633 17.0143C237.081 16.7796 236.399 16.6484 235.587 16.6484C232.516 16.6484 230.133 18.4433 228.987 22.0792V17.6494C228.987 17.4016 228.786 17.2007 228.538 17.2007H223.569C223.321 17.2007 223.12 17.4016 223.12 17.6494V39.5338C223.12 39.7817 223.321 39.9826 223.569 39.9826H229.088C229.336 39.9826 229.537 39.7817 229.537 39.5338V27.9243Z" fill="#888888"/>
<path d="M249.727 35.196C246.427 35.196 244.685 32.4806 244.685 28.6145C244.685 24.7485 246.427 21.9871 249.727 21.9871C253.027 21.9871 254.769 24.7485 254.769 28.6145C254.769 32.4806 253.027 35.196 249.727 35.196ZM255.136 39.5337C255.136 39.7816 255.337 39.9825 255.585 39.9825H260.737C260.985 39.9825 261.186 39.7816 261.186 39.5337V10.5825C261.186 10.3347 260.985 10.1338 260.737 10.1338H255.401C255.153 10.1338 254.952 10.3347 254.952 10.5825V20.3762C253.532 17.7068 251.148 16.6483 248.123 16.6483C242.21 16.6483 238.177 21.803 238.177 28.6145C238.177 35.4261 242.21 40.5348 248.123 40.5348C251.331 40.5348 253.807 39.2461 255.136 35.9324V39.5337Z" fill="#888888"/>
</g>
</g>
<defs>
<clipPath id="clip0_3_661">
<rect width="262" height="51" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: public/notion/affirm-gr.svg
================
<svg width="429" height="171" viewBox="0 0 429 171" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_76_1580" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="429" height="171">
<path d="M428.55 0H0V171H428.55V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_76_1580)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M28.1 156.27C22.8 156.27 20.1 153.66 20.1 149.37C20.1 141.37 29.02 138.68 45.29 136.95C45.29 147.61 38.08 156.27 28.05 156.27H28.1ZM35.1 96.3198C23.47 96.3198 10.1 101.79 2.83998 107.58L9.46998 121.58C15.29 116.25 24.7 111.69 33.19 111.69C41.26 111.69 45.72 114.39 45.72 119.83C45.72 123.48 42.77 125.33 37.19 126.06C16.33 128.76 -0.0200195 134.52 -0.0200195 150.59C-0.0200195 163.33 9.04998 171.04 23.22 171.04C33.34 171.04 42.34 165.42 46.62 158.04V169.04H65.48V122.95C65.48 103.95 52.29 96.2798 35.11 96.2798L35.1 96.3198Z" fill="#888888"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M224.39 98.3902V168.95H244.57V134.95C244.57 118.8 254.35 114.05 261.16 114.05C264.226 114.026 267.229 114.914 269.79 116.6L273.48 97.9502C270.62 96.8056 267.559 96.2511 264.48 96.3202C254.11 96.3202 247.59 100.91 243.29 110.25V98.3902H224.39Z" fill="#888888"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M367 96.3198C356.33 96.3198 348.35 102.62 344.2 108.7C340.35 100.85 332.2 96.3198 322.4 96.3198C311.74 96.3198 304.35 102.24 300.94 109.06V98.3898H281.48V168.95H301.68V132.62C301.68 119.62 308.51 113.33 314.88 113.33C320.65 113.33 325.95 117.06 325.95 126.69V168.95H346.11V132.62C346.11 119.43 352.77 113.33 359.44 113.33C364.78 113.33 370.44 117.21 370.44 126.55V168.95H390.6V120.17C390.6 104.32 379.93 96.3198 367.04 96.3198" fill="#888888"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M175.28 98.3901H157V91.2201C157 81.8801 162.33 79.2201 166.92 79.2201C170.054 79.261 173.135 80.0313 175.92 81.4701L182.14 67.2401C182.14 67.2401 175.83 63.1201 164.36 63.1201C151.47 63.1201 136.8 70.3901 136.8 93.2001V98.3901H106.25V91.2201C106.25 81.8801 111.57 79.2201 116.17 79.2201C119.309 79.2199 122.4 79.9926 125.17 81.4701L131.39 67.2401C127.68 65.0701 121.71 63.1201 113.62 63.1201C100.73 63.1201 86.0599 70.3901 86.0599 93.2001V98.3901H74.3799V113.95H86.0899V168.95H106.25V113.95H136.84V168.95H157V113.95H175.28V98.3901Z" fill="#888888"/>
<path d="M207.46 98.3901H187.32V168.92H207.46V98.3901Z" fill="#888888"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.06 86.4H207.79C219.3 50.21 258.35 18.4 304.79 18.4C361.27 18.4 410.08 61.4 410.08 128.34C410.252 142.08 408.364 155.769 404.48 168.95H423.63L423.82 168.29C427.047 155.241 428.639 141.842 428.56 128.4C428.56 53.75 374.16 0.0200195 304.83 0.0200195C250.37 0.0200195 201.83 37.82 188.07 86.42L188.06 86.4Z" fill="#888888"/>
</g>
</svg>

================
File: public/notion/logo.svg
================
<svg class="wordmark_wordmark__gPyj1" viewBox="0 0 105 30" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#a)"><mask id="b" width="29" height="30" x="0" y="0" maskUnits="userSpaceOnUse"><path fill="#fff" d="M28.714 0H0v29.995h28.714V0Z"></path></mask><g mask="url(#b)"><path fill="#fff" d="M1.805 1.29 18.403.069c2.038-.175 2.563-.057 3.844.873l5.298 3.724c.874.64 1.166.815 1.166 1.513v20.424c0 1.28-.467 2.037-2.097 2.153L7.34 29.919c-1.224.058-1.806-.116-2.447-.931L.99 23.925c-.7-.931-.99-1.628-.99-2.444V3.326c0-1.046.466-1.92 1.805-2.035Z"></path><path class="wordmark_fill__RZFeq" fill="#000" fill-rule="evenodd" d="M18.403.068 1.805 1.291C.466 1.406 0 2.28 0 3.326v18.155c0 .816.29 1.513.99 2.444l3.902 5.063c.64.815 1.223.99 2.447.93l19.275-1.163c1.63-.116 2.097-.873 2.097-2.153V6.178c0-.662-.262-.853-1.034-1.416a89.567 89.567 0 0 1-.132-.097L22.247.941C20.966.011 20.44-.107 18.403.068ZM7.776 5.843c-1.574.106-1.931.13-2.825-.596L2.678 3.443c-.232-.233-.115-.524.467-.581l15.957-1.164c1.339-.117 2.038.35 2.562.756l2.737 1.979c.116.058.407.407.058.407l-16.48.99-.203.013ZM5.94 26.427V9.087c0-.756.233-1.105.932-1.164l18.926-1.105c.642-.058.933.35.933 1.105v17.223c0 .758-.117 1.398-1.166 1.456L7.455 27.65c-1.05.058-1.515-.29-1.515-1.223Zm17.88-16.41c.116.525 0 1.049-.526 1.108l-.872.174v12.8c-.758.408-1.457.64-2.039.64-.932 0-1.165-.29-1.864-1.163l-5.707-8.96v8.67l1.806.407s0 1.047-1.458 1.047l-4.017.233c-.117-.233 0-.815.408-.931l1.048-.29V12.287l-1.456-.117c-.116-.524.174-1.28.99-1.338l4.31-.29 5.94 9.077v-8.03l-1.514-.174c-.117-.641.349-1.107.931-1.164l4.02-.234Z" clip-rule="evenodd"></path></g><path class="wordmark_fill__RZFeq" fill="#000" d="M50.995 7.02V23.23h-2.587L40.739 12.14h-.134V23.23h-2.913V7.02h2.612l7.652 11.087h.15V7.021h2.89Zm7.715 16.446c-1.187 0-2.216-.261-3.087-.784a5.269 5.269 0 0 1-2.018-2.192c-.474-.939-.712-2.036-.712-3.292 0-1.256.237-2.356.712-3.3s1.148-1.678 2.018-2.2c.87-.522 1.9-.784 3.087-.784 1.182 0 2.208.262 3.078.784.87.522 1.544 1.256 2.018 2.2.48.944.72 2.044.72 3.3 0 1.256-.24 2.353-.72 3.292a5.269 5.269 0 0 1-2.018 2.193c-.87.522-1.896.783-3.078.783Zm.008-2.28c.654 0 1.197-.176 1.63-.53.433-.358.757-.838.973-1.44.217-.607.325-1.282.325-2.026 0-.744-.108-1.419-.325-2.026-.216-.607-.54-1.09-.973-1.448-.433-.364-.976-.546-1.63-.546-.66 0-1.209.182-1.646.546-.438.359-.765.841-.982 1.448-.21.607-.316 1.282-.316 2.026 0 .744.105 1.42.316 2.026.217.602.544 1.082.982 1.44.438.354.986.53 1.646.53ZM72.33 11.074v2.2h-6.964v-2.2h6.964ZM67.09 8.16h2.842v11.42c0 .385.058.68.174.887.121.205.28.345.475.419.195.074.414.11.657.11a2.8 2.8 0 0 0 .49-.039c.148-.026.264-.05.349-.071l.474 2.224a6.49 6.49 0 0 1-.648.174c-.28.063-.623.1-1.03.11-.712.022-1.355-.086-1.93-.324a3.04 3.04 0 0 1-1.361-1.116c-.333-.506-.496-1.142-.491-1.907V8.16Zm6.983 15.069V11.073h2.85v12.156h-2.85Zm1.433-13.89c-.454 0-.842-.15-1.164-.45a1.456 1.456 0 0 1-.483-1.093c0-.427.161-.791.483-1.092a1.645 1.645 0 0 1 1.163-.459c.454 0 .842.153 1.164.46.327.3.49.664.49 1.091 0 .422-.163.786-.49 1.092-.322.301-.71.452-1.163.452Zm8.99 14.127c-1.187 0-2.216-.261-3.087-.784a5.268 5.268 0 0 1-2.018-2.192c-.474-.939-.712-2.036-.712-3.292 0-1.256.238-2.356.712-3.3.475-.944 1.148-1.678 2.018-2.2.871-.522 1.9-.784 3.087-.784 1.182 0 2.208.262 3.078.784.871.522 1.544 1.256 2.019 2.2.48.944.72 2.044.72 3.3 0 1.256-.24 2.353-.72 3.292a5.267 5.267 0 0 1-2.019 2.193c-.87.522-1.896.783-3.078.783Zm.008-2.28c.654 0 1.197-.176 1.63-.53.433-.358.757-.838.974-1.44.216-.607.324-1.282.324-2.026 0-.744-.108-1.419-.324-2.026-.217-.607-.541-1.09-.974-1.448-.433-.364-.976-.546-1.63-.546-.66 0-1.208.182-1.646.546-.438.359-.765.841-.982 1.448-.21.607-.316 1.282-.316 2.026 0 .744.105 1.42.316 2.026.217.602.544 1.082.982 1.44.438.354.986.53 1.646.53Zm10.406-5.088v7.13h-2.848V11.074h2.722v2.057h.143a3.48 3.48 0 0 1 1.337-1.614c.617-.401 1.38-.602 2.288-.602.833 0 1.561.18 2.184.539a3.63 3.63 0 0 1 1.456 1.559c.348.68.522 1.506.522 2.477v7.74h-2.84v-7.305c0-.813-.212-1.448-.634-1.907-.423-.464-1.006-.697-1.75-.697-.5 0-.946.111-1.337.333-.39.216-.696.532-.918.95-.216.41-.325.91-.325 1.495Z"></path></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h104.229v30H0z"></path></clipPath></defs></svg>

================
File: public/notion/remote-gr-v2.svg
================
<svg width="90" height="21" viewBox="0 0 90 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.7214 15.4396H14.9721V20.0283H14.2214C9.3466 20.0283 6.5261 17.2477 6.5261 12.7081V10.3737L8.1101 9.9754C8.574 9.8579 8.9956 9.6125 9.327 9.2669C9.6584 8.9214 9.8862 8.4897 9.9846 8.0209C10.0829 7.5522 10.0478 7.0652 9.8832 6.6154C9.7186 6.1657 9.4312 5.7712 9.0537 5.4769C8.6761 5.1826 8.2236 5.0003 7.7477 4.9508C7.2717 4.9013 6.7915 4.9865 6.3615 5.1968C5.9316 5.4071 5.5693 5.7339 5.3158 6.1402C5.0623 6.5465 4.9279 7.0158 4.9278 7.4948V17.496H-4.05389e-07V7.3215C-0.000300405 7.0153 0.0191993 6.7095 0.0580993 6.4058C0.518099 2.7949 3.6681 0 7.486 0C10.9474 0 13.8609 2.2982 14.7214 5.4203C15.1687 7.0555 15.0236 8.7965 14.3118 10.3349C13.7087 11.6332 12.7419 12.7281 11.5288 13.4867C11.9358 15.1383 12.8015 15.4435 14.7214 15.4435" fill="#888888"/>
<path d="M26.9254 6.6218V9.4257H26.4667C25.5029 9.4257 24.7509 9.6908 24.2109 10.2211C23.6708 10.7514 23.4016 11.4717 23.4033 12.3822V17.4378H20.6901V6.7951H23.4033V8.1712C24.2182 7.1365 25.2402 6.6192 26.4693 6.6192L26.9254 6.6218Z" fill="#888888"/>
<path d="M38.5809 13.0988H30.3467C30.5162 13.7418 30.9012 14.307 31.4372 14.6999C32.0071 15.1048 32.6935 15.3123 33.3921 15.291C33.9802 15.2976 34.562 15.1703 35.0937 14.9185C35.5682 14.7027 35.9865 14.38 36.3159 13.9757L38.1248 15.5664C37.556 16.2429 36.84 16.78 36.0317 17.1365C35.1735 17.5149 34.2444 17.705 33.3068 17.6939C32.2529 17.7094 31.2122 17.4571 30.2821 16.9606C29.4033 16.4944 28.6703 15.7939 28.1645 14.9366C27.6677 14.0738 27.4041 13.0963 27.3996 12.1005C27.3951 11.1047 27.6498 10.1249 28.1387 9.2576C28.6223 8.4195 29.3267 7.7305 30.1749 7.2659C31.0553 6.7795 32.0467 6.5299 33.0523 6.5417C34.6475 6.5417 35.9787 7.0732 37.0459 8.1363C38.1131 9.1994 38.6476 10.5324 38.6493 12.1353C38.648 12.4576 38.6251 12.7795 38.5809 13.0988ZM34.7564 9.515C34.2648 9.1288 33.6579 8.9189 33.0329 8.9189C32.4079 8.9189 31.801 9.1288 31.3093 9.515C30.813 9.9233 30.4655 10.4844 30.3209 11.111H35.7474C35.6031 10.484 35.255 9.9226 34.7577 9.515H34.7564Z" fill="#888888"/>
<path d="M56.0371 7.6216C56.7632 8.3415 57.1263 9.305 57.1263 10.5121V17.4443H54.413V11.3179C54.413 10.6643 54.2243 10.1427 53.8471 9.753C53.4698 9.3632 52.9655 9.1675 52.3341 9.1658C51.6691 9.1658 51.1295 9.3667 50.7152 9.7685C50.3009 10.1703 50.0937 10.7005 50.0937 11.3593V17.4379H47.3804V11.3179C47.3804 10.6721 47.1888 10.1522 46.8055 9.7581C46.4222 9.3641 45.9097 9.1667 45.268 9.1658C44.9727 9.1541 44.678 9.2019 44.4015 9.3063C44.1249 9.4107 43.8722 9.5696 43.6581 9.7737C43.4508 9.9807 43.2887 10.2285 43.182 10.5014C43.0752 10.7743 43.0262 11.0664 43.0379 11.3593V17.4379H40.3298V6.7938H43.0431V7.8932C43.8433 6.9887 44.892 6.5369 46.1892 6.5378C46.8754 6.524 47.5544 6.6799 48.166 6.9917C48.7309 7.2846 49.2046 7.727 49.5356 8.2708C50.4141 7.1155 51.62 6.5378 53.1533 6.5378C54.3566 6.5404 55.3178 6.9016 56.0371 7.6216Z" fill="#888888"/>
<path d="M70.1169 12.1184C70.1169 13.7015 69.5703 15.0267 68.4773 16.0941C67.3842 17.1615 66.0258 17.6939 64.4022 17.6914C62.7794 17.6914 61.4197 17.1581 60.3232 16.0915C59.2267 15.025 58.6776 13.6997 58.6759 12.1159C58.6759 10.5328 59.225 9.2072 60.3232 8.1389C61.4215 7.0706 62.7811 6.5373 64.4022 6.5391C66.025 6.5391 67.3833 7.0723 68.4773 8.1389C69.5712 9.2055 70.1177 10.532 70.1169 12.1184ZM66.4992 14.2227C67.029 13.6501 67.3234 12.8983 67.3234 12.1178C67.3234 11.3373 67.029 10.5855 66.4992 10.0129C66.2254 9.7384 65.9003 9.5205 65.5423 9.3719C65.1844 9.2233 64.8007 9.1468 64.4132 9.1468C64.0257 9.1468 63.642 9.2233 63.284 9.3719C62.9261 9.5205 62.6009 9.7384 62.3272 10.0129C61.7912 10.5804 61.4925 11.3317 61.4925 12.1126C61.4925 12.8936 61.7912 13.6449 62.3272 14.2123C62.886 14.7539 63.6334 15.0567 64.4112 15.0567C65.1891 15.0567 65.9364 14.7539 66.4953 14.2123L66.4992 14.2227Z" fill="#888888"/>
<path d="M75.0723 9.2731V13.6989C75.0723 14.6094 75.5611 15.0646 76.5387 15.0646C77.024 15.0467 77.4998 14.925 77.9341 14.7077V17.2374C77.3211 17.5545 76.6381 17.712 75.9483 17.6952C74.7596 17.6952 73.8646 17.3779 73.2634 16.7433C72.6622 16.1087 72.3607 15.2405 72.359 14.1386V9.2757H70.6677V6.7951H72.359V5.022L75.0723 4.0934V6.7951H77.9341V9.2731H75.0723Z" fill="#888888"/>
<path d="M89.943 13.0988H81.7024C81.8719 13.7418 82.2569 14.307 82.7929 14.6999C83.3627 15.105 84.0492 15.3125 84.7477 15.2909C85.335 15.2978 85.917 15.1704 86.448 14.9185C86.923 14.703 87.342 14.3803 87.672 13.9756L89.48 15.5664C88.912 16.2429 88.196 16.78 87.387 17.1365C86.529 17.5157 85.6 17.7067 84.6624 17.6965C83.6085 17.7121 82.5678 17.4598 81.6378 16.9632C80.7588 16.4966 80.0256 15.7962 79.5189 14.9392C79.0227 14.0761 78.7595 13.0987 78.7552 12.1029C78.7509 11.1072 79.0056 10.1275 79.4943 9.2602C79.9779 8.4217 80.6823 7.7323 81.5306 7.2672C82.411 6.7808 83.4024 6.5312 84.4079 6.5429C86.003 6.5429 87.334 7.0749 88.4 8.1389C89.467 9.2029 90 10.5367 90 12.1404C90.002 12.4608 89.983 12.7809 89.943 13.0988ZM86.122 9.515C85.631 9.1288 85.024 8.9189 84.3989 8.9189C83.7739 8.9189 83.167 9.1288 82.6753 9.515C82.179 9.9233 81.8315 10.4844 81.6869 11.1109H87.113C86.968 10.4823 86.617 9.92 86.117 9.5124L86.122 9.515Z" fill="#888888"/>
</svg>

================
File: public/paddle/grid-bg.svg
================
<svg width="1440" height="919" viewBox="0 0 1440 919" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g style="mix-blend-mode:screen" opacity="0.2">
    <mask id="mask0_180_8292" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="1440" height="919">
      <rect width="1440" height="919" fill="url(#paint0_radial_180_8292)"/>
    </mask>
    <g mask="url(#mask0_180_8292)">
      <rect x="0.511001" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="0.511001" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="45.479" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M180.382 90.447H225.35V113.442C225.35 125.577 215.512 135.415 203.377 135.415H180.382V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M225.351 90.447H270.319V135.415H247.324C235.188 135.415 225.351 125.577 225.351 113.442V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M585.097 90.447H630.065V113.442C630.065 125.577 620.227 135.415 608.092 135.415H585.097V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M630.066 90.447H675.034V135.415H652.039C639.903 135.415 630.066 125.577 630.066 113.442V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M989.808 90.447H1034.78V113.442C1034.78 125.577 1024.94 135.415 1012.8 135.415H989.808V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M1034.78 90.447H1079.74V135.415H1056.75C1044.61 135.415 1034.78 125.577 1034.78 113.442V90.447Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="90.447" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M180.382 135.415H203.377C215.513 135.415 225.35 145.253 225.35 157.388V180.383H180.382V135.415Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M225.351 157.388C225.351 145.253 235.189 135.415 247.324 135.415H270.319V180.383H225.351V157.388Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M585.097 135.415H608.092C620.227 135.415 630.065 145.253 630.065 157.388V180.383H585.097V135.415Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M630.066 157.388C630.066 145.253 639.903 135.415 652.039 135.415H675.034V180.383H630.066V157.388Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M989.808 135.415H1012.8C1024.94 135.415 1034.78 145.253 1034.78 157.388V180.383H989.808V135.415Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M1034.78 157.388C1034.78 145.253 1044.61 135.415 1056.75 135.415H1079.74V180.383H1034.78V157.388Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="135.415" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="180.383" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M899.87 225.351H944.838V248.346C944.838 260.482 935.001 270.319 922.865 270.319H899.87V225.351Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M944.839 225.351H989.807V270.319H966.812C954.677 270.319 944.839 260.482 944.839 248.346V225.351Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="225.351" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M360.257 270.319H405.225V293.314C405.225 305.45 395.387 315.287 383.252 315.287H360.257V270.319Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M405.222 270.319H450.19V315.287H427.195C415.06 315.287 405.222 305.45 405.222 293.314V270.319Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M899.87 270.319H922.865C935.001 270.319 944.838 280.157 944.838 292.292V315.287H899.87V270.319Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M944.839 292.292C944.839 280.157 954.677 270.319 966.812 270.319H989.807V315.287H944.839V292.292Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M1259.62 270.319H1304.58V293.314C1304.58 305.45 1294.75 315.287 1282.61 315.287H1259.62V270.319Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M1304.59 270.319H1349.55V315.287H1326.56C1314.42 315.287 1304.59 305.45 1304.59 293.314V270.319Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="270.319" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M360.257 315.287H383.252C395.388 315.287 405.225 325.125 405.225 337.26V360.255H360.257V315.287Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M405.222 337.26C405.222 325.125 415.06 315.287 427.195 315.287H450.19V360.255H405.222V337.26Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M1259.62 315.287H1282.61C1294.75 315.287 1304.58 325.125 1304.58 337.26V360.255H1259.62V315.287Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M1304.59 337.26C1304.59 325.125 1314.42 315.287 1326.56 315.287H1349.55V360.255H1304.59V337.26Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="315.287" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M180.382 360.256H225.35V383.251C225.35 395.386 215.512 405.224 203.377 405.224H180.382V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M225.351 360.256H270.319V405.224H247.324C235.188 405.224 225.351 395.386 225.351 383.251V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M585.097 360.256H630.065V405.224H585.097V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M630.066 360.256H675.034V405.224H630.066V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M944.839 360.256H989.807V383.251C989.807 395.386 979.97 405.224 967.834 405.224H944.839V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M989.808 360.256H1034.78V405.224H1011.78C999.646 405.224 989.808 395.386 989.808 383.251V360.256Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="360.256" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M180.382 405.224H203.377C215.513 405.224 225.35 415.061 225.35 427.197V450.192H180.382V405.224Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M225.351 427.197C225.351 415.061 235.189 405.224 247.324 405.224H270.319V450.192H225.351V427.197Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M585.097 405.224H630.065V450.192H585.097V405.224Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M630.066 405.224H675.034V450.192H630.066V405.224Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M944.839 405.224H967.834C979.97 405.224 989.807 415.061 989.807 427.197V450.192H944.839V405.224Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M989.808 427.197C989.808 415.061 999.646 405.224 1011.78 405.224H1034.78V450.192H989.808V427.197Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="405.224" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="450.192" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M809.937 495.16H854.905V518.155C854.905 530.29 845.067 540.128 832.932 540.128H809.937V495.16Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M854.906 495.16H899.874V540.128H876.879C864.743 540.128 854.906 530.29 854.906 518.155V495.16Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="495.16" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <path d="M809.937 540.128H832.932C845.067 540.128 854.905 549.965 854.905 562.101V585.096H809.937V540.128Z" stroke="#535353" stroke-width="1.022"/>
      <path d="M854.906 562.101C854.906 549.965 864.743 540.128 876.879 540.128H899.874V585.096H854.906V562.101Z" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="540.128" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="585.096" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="630.064" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="675.032" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="720" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="764.968" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="809.936" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="0.511001" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="45.4798" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="90.4485" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="135.413" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="180.382" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="225.351" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="270.32" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="315.288" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="360.257" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="405.222" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="450.191" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="495.159" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="540.128" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="585.097" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="630.066" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="675.031" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="719.999" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="764.968" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="809.937" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="854.906" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="899.87" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="944.839" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="989.808" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1034.78" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1079.75" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1124.71" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1169.68" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1214.65" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1259.62" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1304.59" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1349.55" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
      <rect x="1394.52" y="854.904" width="44.9681" height="44.9681" stroke="#535353" stroke-width="1.022"/>
    </g>
  </g>
  <defs>
    <radialGradient id="paint0_radial_180_8292" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(720 132.5) rotate(90) scale(626 980.892)">
      <stop stop-color="#D9D9D9"/>
      <stop offset="1" stop-color="#737373" stop-opacity="0"/>
    </radialGradient>
  </defs>
</svg>

================
File: public/shipnow/credit-card.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-credit-card"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>

================
File: public/shipnow/google-analytics.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="-14 0 284 284" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
    <g>
        <path d="M256.003159,247.933017 C256.055907,258.030289 251.77298,267.664804 244.241349,274.390297 C236.709718,281.11579 226.653817,284.285366 216.626905,283.094249 C198.58347,280.424364 185.360959,264.722632 185.800619,246.488035 L185.800619,36.8452103 C185.364944,18.5907614 198.619678,2.88144681 216.687112,0.238996295 C226.704325,-0.933476157 236.743571,2.24455542 244.261279,8.9678962 C251.778988,15.691237 256.053811,25.3147619 256.003159,35.4002282 L256.003159,247.933017 Z" fill="#F9AB00">
</path>
        <path d="M35.1010243,213.193238 C54.4867848,213.193238 70.2020487,228.908502 70.2020487,248.294263 C70.2020487,267.680023 54.4867848,283.395287 35.1010243,283.395287 C15.7152639,283.395287 0,267.680023 0,248.294263 C0,228.908502 15.7152639,213.193238 35.1010243,213.193238 Z M127.459466,106.806429 C107.981896,107.874068 92.8698765,124.212107 93.3217628,143.713681 L93.3217628,237.998765 C93.3217628,263.58699 104.580582,279.120548 121.077461,282.431965 C131.434034,284.530959 142.185473,281.860819 150.356699,275.160414 C158.527925,268.460009 163.252393,258.439904 163.222912,247.872809 L163.222912,142.088076 C163.240039,132.641687 159.462041,123.584285 152.737293,116.950107 C146.012546,110.315928 136.904752,106.661084 127.459466,106.806429 L127.459466,106.806429 Z" fill="#E37400">
</path>
    </g>
</svg>

================
File: public/shipnow/next-auth.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="28" height="auto" fill="none" viewBox="0 0 210 232"><path fill="url(#paint0_linear_128_61)" fill-rule="evenodd" d="M208.687 31.859L30.095 167.73C8.164 127.966.568 79.998 0 51.228v-17.61c0-2.561 2.779-4.055 4.169-4.482C33.562 20.278 93.247 2.306 96.838 1.28 100.429.256 103.464 0 104.534 0h.097c1.069 0 4.104.256 7.696 1.28 3.591 1.025 63.276 18.998 92.669 27.856 1.034.317 2.836 1.225 3.691 2.723z" clip-rule="evenodd"></path><path fill="url(#paint1_linear_128_61)" fill-rule="evenodd" d="M30.094 167.952l178.592-135.87c.295.516.478 1.102.478 1.759V51.45c-.962 48.773-22.126 152.722-99.083 178.336-1.068.427-3.591 1.281-5.13 1.281h-.739c-1.539 0-4.062-.854-5.13-1.281-31.563-10.505-53.74-34.186-68.988-61.834z" clip-rule="evenodd"></path><path fill="url(#paint2_linear_128_61)" fill-opacity="0.21" d="M111.74 1.283C108.147.257 105.11 0 104.04 0l-.321 231.305h.642c1.54 0 4.064-.855 5.133-1.283 76.995-25.665 98.169-129.822 99.131-178.692V33.685c0-2.566-2.78-4.063-4.171-4.491-29.407-8.876-89.121-26.884-92.714-27.91z"></path><ellipse cx="104.905" cy="114.209" fill="#E3E2FA" rx="47.801" ry="47.48"></ellipse><path fill="url(#paint3_linear_128_61)" fill-rule="evenodd" d="M96.243 124.475c-3.635.321-12.832-1.283-17.323-5.133-4.823-4.134-7.379-9.624-7.379-17.645 0-9.95 8.983-20.532 21.495-20.21 11.883.304 19.898 7.002 21.494 17.644.833 5.553-.016 8.222-.676 10.295-.102.323-.2.631-.286.933-.321 1.07-.77 3.401 0 4.171.769.77 12.511 12.084 18.286 17.644.534.642 1.604 2.246 1.604 3.529v6.096c0 .962-.257 1.283-1.283 1.283h-12.833c-.748-.107-2.246-.834-2.246-2.887 0-2.189-.233-2.511-.7-3.156-.08-.111-.168-.232-.262-.373-.642-.963-1.925-.963-3.208-.963-1.283 0-2.246-.321-2.887-.962-.642-.642-.642-1.604-.321-2.887.321-1.284 0-2.567-.642-2.888a7.71 7.71 0 01-.353-.194c-.704-.4-1.827-1.038-3.176-.768-1.604.321-3.85 0-5.133-1.283-1.283-1.284-2.887-2.32-4.17-2.246zm-8.662-24.381a4.812 4.812 0 100-9.625 4.812 4.812 0 000 9.625z" clip-rule="evenodd"></path><defs><linearGradient id="paint0_linear_128_61" x1="19.57" x2="97.527" y1="96.564" y2="15.078" gradientUnits="userSpaceOnUse"><stop stop-color="#45FFC8"></stop><stop offset="1" stop-color="#1DBBF1"></stop></linearGradient><linearGradient id="paint1_linear_128_61" x1="73.786" x2="170.671" y1="143.724" y2="190.884" gradientUnits="userSpaceOnUse"><stop stop-color="#D14AE8"></stop><stop offset="0.552" stop-color="#B628E3"></stop><stop offset="1" stop-color="#8315FD"></stop></linearGradient><linearGradient id="paint2_linear_128_61" x1="155.914" x2="155.914" y1="21.815" y2="182.542" gradientUnits="userSpaceOnUse"><stop stop-color="#20ABF5"></stop><stop offset="0.398" stop-color="#2A8CC3"></stop><stop offset="1" stop-color="#A104DC"></stop></linearGradient><linearGradient id="paint3_linear_128_61" x1="90.148" x2="129.287" y1="99.452" y2="138.912" gradientUnits="userSpaceOnUse"><stop stop-color="#FE5B01"></stop><stop offset="1" stop-color="#FFB200"></stop></linearGradient></defs></svg>

================
File: public/shipnow/nextjs.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="28" viewBox="0.5 -0.2 1023 1024.1" fill="currentColor"><path d="M478.5.6c-2.2.2-9.2.9-15.5 1.4C317.7 15.1 181.6 93.5 95.4 214c-48 67-78.7 143-90.3 223.5C1 465.6.5 473.9.5 512s.5 46.4 4.6 74.5C32.9 778.6 169.6 940 355 999.8c33.2 10.7 68.2 18 108 22.4 15.5 1.7 82.5 1.7 98 0 68.7-7.6 126.9-24.6 184.3-53.9 8.8-4.5 10.5-5.7 9.3-6.7-.8-.6-38.3-50.9-83.3-111.7l-81.8-110.5L487 587.7c-56.4-83.4-102.8-151.6-103.2-151.6-.4-.1-.8 67.3-1 149.6-.3 144.1-.4 149.9-2.2 153.3-2.6 4.9-4.6 6.9-8.8 9.1-3.2 1.6-6 1.9-21.1 1.9h-17.3l-4.6-2.9c-3-1.9-5.2-4.4-6.7-7.3l-2.1-4.5.2-200.5.3-200.6 3.1-3.9c1.6-2.1 5-4.8 7.4-6.1 4.1-2 5.7-2.2 23-2.2 20.4 0 23.8.8 29.1 6.6 1.5 1.6 57 85.2 123.4 185.9s157.2 238.2 201.8 305.7l81 122.7 4.1-2.7c36.3-23.6 74.7-57.2 105.1-92.2 64.7-74.3 106.4-164.9 120.4-261.5 4.1-28.1 4.6-36.4 4.6-74.5s-.5-46.4-4.6-74.5C991.1 245.4 854.4 84 669 24.2 636.3 13.6 601.5 6.3 562.5 1.9c-9.6-1-75.7-2.1-84-1.3zM687.9 310c4.8 2.4 8.7 7 10.1 11.8.8 2.6 1 58.2.8 183.5l-.3 179.8-31.7-48.6-31.8-48.6V457.2c0-84.5.4-132 1-134.3 1.6-5.6 5.1-10 9.9-12.6 4.1-2.1 5.6-2.3 21.3-2.3 14.8 0 17.4.2 20.7 2z"></path><path d="M784.3 945.1c-3.5 2.2-4.6 3.7-1.5 2 2.2-1.3 5.8-4 5.2-4.1-.3 0-2 1-3.7 2.1zm-6.9 4.5c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-7.6 4c-3.8 2-3.6 2.8.2.9 1.7-.9 3-1.8 3-2 0-.7-.1-.6-3.2 1.1z"></path></svg>

================
File: public/shipnow/prisma.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="28" height="auto" fill="none" viewBox="0 0 159 194"><path fill="#2D3748" fill-rule="evenodd" d="M2.397 122.867a9.632 9.632 0 00.077 10.192l35.622 56.193a9.633 9.633 0 0010.905 4.069l102.797-30.839c5.61-1.683 8.432-7.941 5.98-13.26L91.695 5.872c-3.222-6.99-12.938-7.564-16.961-1.001L2.397 122.867zM89.94 38.644c-1.404-3.25-6.16-2.75-6.857.722L57.64 166.044c-.537 2.671 1.964 4.952 4.575 4.173l71.025-21.202a3.61 3.61 0 002.282-4.894L89.94 38.644z" clip-rule="evenodd"></path></svg>

================
File: public/shipnow/react-email.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill-rule="evenodd" clip-rule="evenodd" image-rendering="optimizeQuality" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" viewBox="0 0 180 180"><path fill="#242323" d="M36.5-.5h102c21.496 3.49 35.163 15.823 41 37v104c-4.762 21.762-18.095 34.762-40 39h-102c-21.214-5.214-33.88-18.547-38-40v-102c4.886-19.887 17.22-32.553 37-38z"></path><path fill="#e9e9e8" d="M52.5 41.5a45.188 45.188 0 0116 2.5A118.773 118.773 0 0189 54.5 107.213 107.213 0 01115.5 42c15.355-.978 22.189 6.189 20.5 21.5a93.656 93.656 0 01-12.5 26 109.629 109.629 0 0112.5 25c1.483 18.184-6.683 25.351-24.5 21.5a185.074 185.074 0 01-23-11.5c-8.42 6.04-17.753 10.206-28 12.5-15.963.331-22.13-7.502-18.5-23.5 2.861-8.724 7.028-16.724 12.5-24-5.477-7.286-9.644-15.286-12.5-24-3.22-11.207.28-19.207 10.5-24z"></path><path fill="#262525" d="M52.5 49.5c11.288-.182 21.288 3.318 30 10.5C74 67.167 66.167 75 59 83.5c-6.8-8.914-10.133-18.914-10-30a19.568 19.568 0 003.5-4z"></path><path fill="#272626" d="M113.5 49.5a72.442 72.442 0 0112 .5c3.63 3.05 4.797 6.883 3.5 11.5-1.936 7.872-5.436 14.872-10.5 21a244.47 244.47 0 00-23-22.5c5.603-4.297 11.603-7.797 18-10.5z"></path><path fill="#252424" d="M87.5 64.5c9.919 6.916 18.585 15.25 26 25a147.822 147.822 0 01-25 25 147.833 147.833 0 01-25-25 212.97 212.97 0 0124-25z"></path><path fill="#262525" d="M58.5 95.5a266.655 266.655 0 0024 23.5c-8.71 7.348-18.71 10.681-30 10-3.76-3.743-4.926-8.243-3.5-13.5 2.392-7.114 5.559-13.781 9.5-20z"></path><path fill="#272626" d="M117.5 96.5c5.559 5.424 9.393 12.091 11.5 20 1.167 11.536-3.999 15.703-15.5 12.5-6.613-2.305-12.613-5.638-18-10a140.39 140.39 0 0022-22.5z"></path></svg>

================
File: public/shipnow/shadcn-ui.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" width="28" height="auto"><rect width="256" height="256" fill="none"></rect><line x1="208" y1="128" x2="128" y2="208" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><line x1="192" y1="40" x2="40" y2="192" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line></svg>

================
File: public/shipnow/typescript.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="none" viewBox="0 0 512 512"><rect width="512" height="512" fill="#3178c6" rx="50"></rect><rect width="512" height="512" fill="#3178c6" rx="50"></rect><path fill="#fff" fill-rule="evenodd" d="M316.939 407.424v50.061c8.138 4.172 17.763 7.3 28.875 9.386S368.637 470 380.949 470c11.999 0 23.397-1.147 34.196-3.442 10.799-2.294 20.268-6.075 28.406-11.342 8.138-5.266 14.581-12.15 19.328-20.65S470 415.559 470 403.044c0-9.074-1.356-17.026-4.069-23.857s-6.625-12.906-11.738-18.225c-5.112-5.319-11.242-10.091-18.389-14.315s-15.207-8.213-24.18-11.967c-6.573-2.712-12.468-5.345-17.685-7.9-5.217-2.556-9.651-5.163-13.303-7.822-3.652-2.66-6.469-5.476-8.451-8.448-1.982-2.973-2.974-6.336-2.974-10.091 0-3.441.887-6.544 2.661-9.308s4.278-5.136 7.512-7.118c3.235-1.981 7.199-3.52 11.894-4.615 4.696-1.095 9.912-1.642 15.651-1.642 4.173 0 8.581.313 13.224.938 4.643.626 9.312 1.591 14.008 2.894a97.514 97.514 0 0113.694 4.928c4.434 1.982 8.529 4.276 12.285 6.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492S415.797 238 404.112 238c-11.895 0-23.163 1.278-33.805 3.833s-20.006 6.544-28.093 11.967c-8.086 5.424-14.476 12.333-19.171 20.729-4.695 8.395-7.043 18.433-7.043 30.114 0 14.914 4.304 27.638 12.912 38.172 8.607 10.533 21.675 19.45 39.204 26.751 6.886 2.816 13.303 5.579 19.25 8.291s11.086 5.528 15.415 8.448c4.33 2.92 7.747 6.101 10.252 9.543 2.504 3.441 3.756 7.352 3.756 11.733 0 3.233-.783 6.231-2.348 8.995s-3.939 5.162-7.121 7.196-7.147 3.624-11.894 4.771c-4.748 1.148-10.303 1.721-16.668 1.721-10.851 0-21.597-1.903-32.24-5.71-10.642-3.806-20.502-9.516-29.579-17.13zM232.78 284.082H297V243H118v41.082h63.906V467h50.874z" clip-rule="evenodd"></path></svg>

================
File: public/social-icons/facebook.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"></path>
    </svg>

================
File: public/social-icons/github.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"></path>
    </svg>

================
File: public/social-icons/google.svg
================
<svg
    className="mr-2 h-4 w-4"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 48 48"
    width="48px"
    height="48px"
>
    <path
        fill="#FFC107"
        d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
    />
    <path
        fill="#FF3D00"
        d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
    />
    <path
        fill="#4CAF50"
        d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
    />
    <path
        fill="#1976D2"
        d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
    />
</svg>

================
File: public/social-icons/instagram.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
  <path d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z" />
</svg>

================
File: public/social-icons/linkedin.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
</svg>

================
File: public/social-icons/mail.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
  <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
  <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
</svg>

================
File: public/social-icons/threads.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
  <path d="M12.186 24h-.007c-3.581-.024-6.334-1.205-8.184-3.509C2.35 18.44 1.5 15.586 1.472 12.01v-.017c.03-3.579.879-6.43 2.525-8.482C5.845 1.205 8.6.024 12.18 0h.014c2.746.02 5.043.725 6.826 2.098 1.677 1.29 2.858 3.13 3.509 5.467l-2.04.569c-1.104-3.96-3.898-5.984-8.304-6.015-2.91.022-5.11.936-6.54 2.717C4.307 6.504 3.616 8.914 3.589 12c.027 3.086.718 5.496 2.057 7.164 1.43 1.783 3.631 2.698 6.54 2.717 2.623-.02 4.358-.631 5.8-2.045 1.647-1.613 1.618-3.593 1.09-4.798-.31-.71-.873-1.3-1.634-1.75-.192 1.352-.622 2.446-1.284 3.272-.886 1.102-2.14 1.704-3.73 1.79-1.202.065-2.361-.218-3.259-.801-1.063-.689-1.685-1.74-1.752-2.964-.065-1.19.408-2.285 1.33-3.082.88-.76 2.119-1.207 3.583-1.291a13.853 13.853 0 0 1 3.02.142c-.126-.742-.375-1.332-.75-1.757-.513-.586-1.308-.883-2.359-.89h-.029c-.844 0-1.992.232-2.721 1.32L7.734 7.847c.98-1.454 2.568-2.256 4.478-2.256h.044c3.194.02 5.097 1.975 5.287 5.388.108.046.216.094.321.142 1.49.7 2.58 1.761 3.154 3.07.797 1.82.871 4.79-1.548 7.158-1.85 1.81-4.094 2.628-7.277 2.65Zm1.003-11.69c-.242 0-.487.007-.739.021-1.836.103-2.98.946-2.916 2.143.067 1.256 1.452 1.839 2.784 1.767 1.224-.065 2.818-.543 3.086-3.71a10.5 10.5 0 0 0-2.215-.221z" />
</svg>

================
File: public/social-icons/twitter.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
  <path
    fill="currentColor"
    d="M8 2H1l8.26 11.015L1.45 22H4.1l6.388-7.349L16 22h7l-8.608-11.478L21.8 2h-2.65l-5.986 6.886zm9 18L5 4h2l12 16z"
  />
</svg>

================
File: public/social-icons/youtube.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
  <path d="M23.499 6.203a3.008 3.008 0 00-2.089-2.089c-1.87-.501-9.4-.501-9.4-.501s-7.509-.01-9.399.501a3.008 3.008 0 00-2.088 2.09A31.258 31.26 0 000 12.01a31.258 31.26 0 00.523 5.785 3.008 3.008 0 002.088 2.089c1.869.502 9.4.502 9.4.502s7.508 0 9.399-.502a3.008 3.008 0 002.089-2.09 31.258 31.26 0 00.5-5.784 31.258 31.26 0 00-.5-5.808zm-13.891 9.4V8.407l6.266 3.604z"></path>
</svg>

================
File: public/logo.svg
================
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="blackGradient" x1="15%" y1="15%" x2="85%" y2="85%">
      <stop offset="0%" style="stop-color:#000000"/>
      <stop offset="100%" style="stop-color:#333333"/>
    </linearGradient>
  </defs>
  <g transform="translate(2 0) skewX(-12)">
    <path 
      d="M17 8.5C17 6.567 15.433 5 13.5 5H11C9.067 5 7.5 6.567 7.5 8.5C7.5 10.433 9.067 12 11 12H13C14.933 12 16.5 13.567 16.5 15.5C16.5 17.433 14.933 19 13 19H10.5C8.567 19 7 17.433 7 15.5"
      stroke="url(#blackGradient)"
      stroke-width="2.5"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </g>
</svg>

================
File: scripts/custom_stripe_billing_portal.js
================
const dotenv = require('dotenv');
const path = require('path');
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
// api reference: https://docs.stripe.com/api/customer_portal/configurations
const productsConfig = [
  {
    product: 'prod_S0jRIb2VItPe1h',
    prices: ['price_1R6hzaIK2g7aV4G79v5vqI1M', 'price_1R6hyXIK2g7aV4G7OsQbZUQ3']
  },
  {
    product: 'prod_S0jUHUk1ulljz3',
    prices: ['price_1R6i1NIK2g7aV4G7AICpCqhu', 'price_1R6i1uIK2g7aV4G7y4oo3Df0']
  }
];

const portalConfig = {
  features: {
    subscription_cancel: {
      mode: 'at_period_end',
      enabled: true
    },
    payment_method_update: {
      enabled: true
    },
    subscription_update: {
      enabled: true,
      default_allowed_updates: ['promotion_code', 'price'],
      products: productsConfig
    }
  }
};

// create a new billing portal configuration
async function createConfiguration() {
  try {
    const configuration = await stripe.billingPortal.configurations.create(portalConfig);
    console.log('New configuration created:');
    console.log(configuration);
    return configuration;
  } catch (error) {
    console.error('Failed to create configuration:', error);
  }
}

// update an existing billing portal configuration
async function updateConfiguration(configId) {
  if (!configId) {
    console.error('Configuration ID is required for update');
    return;
  }

  try {
    const configuration = await stripe.billingPortal.configurations.update(
      configId,
      portalConfig
    );
    console.log('Configuration updated:');
    console.log(configuration);
    return configuration;
  } catch (error) {
    console.error('Failed to update configuration:', error);
  }
}

// list all billing portal configurations
async function listConfigurations() {
  try {
    const configurations = await stripe.billingPortal.configurations.list();
    console.log('Existing configurations:');
    configurations.data.forEach(config => {
      console.log(`ID: ${config.id}, Active: ${config.active}`);
    });
    return configurations;
  } catch (error) {
    console.error('Failed to list configurations:', error);
  }
}

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const configId = args[1];

  switch (command) {
    case 'create':
      await createConfiguration();
      break;
    case 'update':
      await updateConfiguration(configId);
      break;
    case 'list':
      await listConfigurations();
      break;
    default:
      console.log('Usage: node create_stripe_billing_portal.js [create|update|list] [configId]');
      console.log('  create: Create a new billing portal configuration');
      console.log('  update [configId]: Update an existing billing portal configuration');
      console.log('  list: List all existing configurations');
  }
}

main();

================
File: styles/globals.css
================
@import 'tailwindcss';
/* @config "../tailwind.config.js" */

@custom-variant dark (&:is(.dark *));

@custom-variant dark (&:where(.dark, .dark *));

@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-gradient: gradient 8s linear infinite;

  @keyframes gradient {
    to {
      background-position: var(--bg-size) 0;
    }
  }

  @keyframes accordion-down {
    from {
      height: 0;
    }

    to {
      height: var(--radix-accordion-content-height);
    }
  }

  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }

    to {
      height: 0;
    }
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 2rem;

  @media (width >=--theme(--breakpoint-sm)) {
    max-width: none;
  }

  @media (width >=1400px) {
    max-width: 1400px;
  }
}

@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {

  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }
}

@utility accordion-down {
  animation: accordion-down 0.2s ease-out;
}

@utility accordion-up {
  animation: accordion-up 0.2s ease-out;
}

@utility gradient {
  animation: gradient 8s linear infinite;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;

    --chart-1: 12 76% 61%;

    --chart-2: 173 58% 39%;

    --chart-3: 197 37% 24%;

    --chart-4: 43 74% 66%;

    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@keyframes gradient {
  to {
    background-position: var(--bg-size) 0;
  }
}

@keyframes accordion-down {
  from {
    height: 0;
  }

  to {
    height: var(--radix-accordion-content-height);
  }
}

@keyframes accordion-up {
  from {
    height: var(--radix-accordion-content-height);
  }

  to {
    height: 0;
  }
}

================
File: styles/loading.css
================
.loading {
  display: inline-flex;
  align-items: center;
}

.loading .spacer {
  margin-right: 2px;
}

.loading span {
  animation-name: blink;
  animation-duration: 1.4s;
  animation-iteration-count: infinite;
  animation-fill-mode: both;
  width: 5px;
  height: 5px;
  border-radius: 50%;
  display: inline-block;
  margin: 0 1px;
}

.loading span:nth-of-type(2) {
  animation-delay: 0.2s;
}

.loading span:nth-of-type(3) {
  animation-delay: 0.4s;
}

@keyframes blink {
  0% {
    opacity: 0.2;
  }
  20% {
    opacity: 1;
  }
  100% {
    opacity: 0.2;
  }
}

================
File: .env.example
================
# ==============================================
# Public Site Configuration
# ==============================================
NEXT_PUBLIC_SITE_URL=https://your-domain.com
NEXT_PUBLIC_GOOGLE_ID=your_google_analytics_id

# ==============================================
# Database Configuration
# ==============================================
# Connection Settings
## PostgreSQL
# DATABASE_URL="postgresql://user:password@localhost:5432/mydb?schema=public"

# MySQL
DATABASE_URL="mysql://username:password@your-mysql-host:3306/your_database"

## MongoDB
# DATABASE_URL="mongodb://user:password@localhost:27017/mydb?authSource=admin"

# Connection Pool Settings
DATABASE_POOL_SIZE=20
DATABASE_CONNECTION_TIMEOUT=30

# Database Security Settings
DATABASE_DEBUG=false
DATABASE_SSL=false

# ==============================================
# Next Auth Configuration
# ==============================================
AUTH_DEBUG=true
AUTH_SECRET="your_auth_secret_key_here"
# NEXTAUTH_URL: Used as the base URL to build all authentication-related URLs, including the OAuth callback URL. 
# This is usually the domain name of your application.
NEXTAUTH_URL=https://your-domain.com
# Providers configuration
## Apple
APPLE_ID=your_apple_id
APPLE_SECRET=your_apple_secret

## Discord
DISCORD_CLIENT_ID=your_discord_client_id
DISCORD_CLIENT_SECRET=your_discord_client_secret

## Facebook
FACEBOOK_CLIENT_ID=your_facebook_client_id
FACEBOOK_CLIENT_SECRET=your_facebook_client_secret

## GitHub
AUTH_GITHUB_ID=your_github_id
AUTH_GITHUB_SECRET=your_github_secret

## Google
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

## LinkedIn
LINKEDIN_CLIENT_ID=your_linkedin_client_id
LINKEDIN_CLIENT_SECRET=your_linkedin_client_secret

## Pinterest
PINTEREST_ID=your_pinterest_id
PINTEREST_SECRET=your_pinterest_secret

## Reddit
REDDIT_CLIENT_ID=your_reddit_client_id
REDDIT_CLIENT_SECRET=your_reddit_client_secret

## Slack
SLACK_CLIENT_ID=your_slack_client_id
SLACK_CLIENT_SECRET=your_slack_client_secret

## Twitter
TWITTER_CLIENT_ID=your_twitter_client_id
TWITTER_CLIENT_SECRET=your_twitter_client_secret

## Email
AUTH_EMAIL_FROM=noreply@your-domain.com
MAGIC_LINK_TEMPLATE=your_magic_link_template
MAGIC_LINK_EMAIL_SUBJECT="Welcome to Your App"

# ==============================================
# Resend Configuration
# ==============================================
RESEND_API_KEY=re_xxxxxxxxxxxx_your_resend_api_key_here

# ==============================================
# Payment Configuration
# ==============================================
# Stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret
STRIPE_BILLING_PORTAL_CONFIGURATION_ID=your_stripe_billing_portal_configuration_id
# Paddle
PADDLE_API_KEY=your_paddle_api_key
NEXT_PUBLIC_PADDLE_CLIENT_TOKEN=your_paddle_client_token
NEXT_PUBLIC_PADDLE_ENV=sandbox
PADDLE_NOTIFICATION_WEBHOOK_SECRET=your_paddle_webhook_secret

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals",
  "rules": {
    "react/no-unescaped-entities": "off"
  }
}

================
File: .gitignore
================
### Node template
.idea
.DS_Store
dist

*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.temp
yarn.lock

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the assets line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# assets

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

/.vuepress/dist/

# sitemap
*/sitemap*.xml
*/robots.txt

# Prisma
/db/prisma/migrations/

================
File: .npmrc
================
# if use pnpm
enable-pre-post-scripts=true
public-hoist-pattern[]=*@nextui-org/*
registry=https://registry.npmmirror.com/

================
File: auth.ts
================
import { authConfig } from "@/config"
import { prisma } from "@/db/client"
import { resendVerificationRequest } from "@/lib/actions/auth"
import { PrismaAdapter } from "@auth/prisma-adapter"
import type { DefaultSession } from "next-auth"
import NextAuth from "next-auth"
import type { Adapter } from "next-auth/adapters"
import "next-auth/jwt"
import AppleProvider from "next-auth/providers/apple"
import DiscordProvider from "next-auth/providers/discord"
import FacebookProvider from "next-auth/providers/facebook"
import GitHubProvider from "next-auth/providers/github"
import GoogleProvider from "next-auth/providers/google"
import LinkedInProvider from "next-auth/providers/linkedin"
import ResendProvider from "next-auth/providers/resend"
import SlackProvider from "next-auth/providers/slack"
import TwitterProvider from "next-auth/providers/twitter"
export const { handlers, auth, signIn, signOut } = NextAuth({
  adapter: PrismaAdapter(prisma) as Adapter,
  debug: !!process.env.AUTH_DEBUG,
  pages: {
    signIn: authConfig.signInPage
  },
  providers: [
    AppleProvider({
      clientId: process.env.APPLE_ID!,
      clientSecret: process.env.APPLE_SECRET!,
    }),
    DiscordProvider({
      clientId: process.env.DISCORD_CLIENT_ID!,
      clientSecret: process.env.DISCORD_CLIENT_SECRET!,
    }),
    FacebookProvider({
      clientId: process.env.FACEBOOK_CLIENT_ID!,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!
    }),
    GitHubProvider({
      clientId: process.env.AUTH_GITHUB_ID!,
      clientSecret: process.env.AUTH_GITHUB_SECRET!,
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    LinkedInProvider({
      clientId: process.env.LINKEDIN_CLIENT_ID!,
      clientSecret: process.env.LINKEDIN_CLIENT_SECRET!,
    }),
    SlackProvider({
      clientId: process.env.SLACK_CLIENT_ID!,
      clientSecret: process.env.SLACK_CLIENT_SECRET!,
    }),
    TwitterProvider({
      clientId: process.env.TWITTER_CLIENT_ID!,
      clientSecret: process.env.TWITTER_CLIENT_SECRET!,
    }),
    ResendProvider({
      sendVerificationRequest: resendVerificationRequest as any
    }),
  ],
  session: { strategy: "jwt" },
  callbacks: {
    async jwt({ token, trigger, session, user }) {
      if (trigger === "update") {
        token.name = session.user.name
      } else if (trigger === "signIn") {
        // handle user sign in
      } else if (trigger === "signUp") {
        // handle new user sign up
      }

      if (user) {
        token.userId = user?.id
      }

      return token
    },

    async session({ session, user, token }) {
      let userId = user?.id
      if (token && token.userId) {
        userId = token.userId
      }
      return {
        ...session,
        user: {
          ...session.user,
          id: userId
        },
      }
    },
    async redirect({ url, baseUrl }) {
      // If URL is a relative path, concatenate with baseUrl
      if (url.startsWith("/")) {
        return `${baseUrl}${url}`;
      }
      // If URL is already absolute and belongs to the same domain, return directly
      else if (url.startsWith(baseUrl)) {
        return url;
      }
      // Default redirect to the configured callback URL
      return `${baseUrl}${authConfig.defaultAuthCallbackUrl}`;
    }
  }
})
declare module "next-auth/jwt" {
  interface JWT {
    userId?: string
  }
}

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
    } & DefaultSession["user"]
  }
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: faq.md
================
# how to upgrade to tailwindcss 4.0
1. npx @tailwindcss/upgrade refer: https://tailwindcss.com/docs/upgrade-guide
2. delete tailwind.config.ts and postcss.config.js

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: next-sitemap.config.js
================
/** @type {import('next-sitemap').IConfig} */

module.exports = {
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL,
  generateRobotsTxt: true,
  sitemapSize: 7000,
};

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "shipnow-boilerplate",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "postbuild": "next-sitemap",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:generate": "prisma generate",
    "db:studio": "prisma studio",
    "db:format": "prisma format",
    "db:migrate": "dotenv -e .env.local -- npx prisma migrate dev",
    "db:deploy": "prisma migrate deploy",
    "db:reset": "prisma migrate reset",
    "db:use:mysql": "cp db/prisma/variants/mysql.prisma db/prisma/schema.prisma && npm run db:generate",
    "db:use:postgresql": "cp db/prisma/variants/postgresql.prisma db/prisma/schema.prisma && npm run db:generate",
    "db:use:mongodb": "cp db/prisma/variants/mongodb.prisma db/prisma/schema.prisma && npm run db:generate",
    "postinstall": "prisma generate"
  },
  "prisma": {
    "schema": "db/prisma/schema.prisma"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.4.2",
    "@paddle/paddle-js": "^1.3.1",
    "@paddle/paddle-node-sdk": "^2.3.2",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.2",
    "@react-email/components": "^0.0.31",
    "@stripe/stripe-js": "^5.4.0",
    "@tabler/icons-react": "^3.28.1",
    "@types/winston": "^2.4.4",
    "@vercel/analytics": "^1.4.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.468.0",
    "next": "15.3.2",
    "next-auth": "beta",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-email": "^3.0.4",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.4.0",
    "react-syntax-highlighter": "^15.6.1",
    "resend": "^4.0.1",
    "stripe": "^17.5.0",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "winston": "^3.13.0",
    "winston-daily-rotate-file": "^5.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@prisma/client": "^6.1.0",
    "@tailwindcss/postcss": "^4.1.8",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-syntax-highlighter": "^15.5.13",
    "autoprefixer": "^10.4.19",
    "dotenv-cli": "^8.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.0.4",
    "next-sitemap": "^4.2.3",
    "postcss": "^8.5.4",
    "prisma": "^6.1.0",
    "tailwindcss": "^4.1.8",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

================
File: README-zh.md
================
🌍 *[English](README.md) ∙ [简体中文](README-zh.md)*


# [ShipNowKit](https://shipnowkit.com)

ShipNowKit 是一个用于构建您自己的 SaaS 的模版仓库，基于 Next.js 15 和 React 19 构建。它集成了身份验证、支付、邮件等功能，提供多个经典模板和丰富的组件，帮助您快速构建业务。

演示地址：
ShipNowLike：https://shipnow-demo1.vercel.app/
NotionLike：https://shipnow-notionlike.vercel.app/

[![ShipNowKit](https://shipnow-1253247883.cos.na-siliconvalley.myqcloud.com/shipnow-og.png)](https://shipnowkit.com)

## 技术栈

ShipNowKit 基于以下技术栈构建：

- Next.js 15 – 前端/后端
- TailwindCSS + shadcn – 样式和 UI
- NextAuth v5 – 身份验证（[支持多种登录方式](https://authjs.dev/getting-started/providers/42-school?framework=next-js)）
- Stripe & Paddle - 支付
- Prisma - 数据库 ORM（[支持多种数据库](https://www.prisma.io/docs/orm/reference/supported-databases)）
- Google Analytics - 数据分析
- React Email - 邮件模板
- Vercel - 托管部署

## 本地运行

1. 克隆仓库
2. 复制 `.env.example` 文件创建 `.env.local` 文件，并填写必要的字段
3. 安装依赖
```bash
npm install
```

4. 选择使用的数据库类型
```bash
# choose mysql
npm run db:use:mysql
# choose postgresql
npm run db:use:postgresql
# choose mongodb
npm run db:use:mongodb
```
5. 迁移数据库
```bash
npm run db:migrate
```
> tips：如果数据库中已经存在表，建议先备份数据，因为迁移会将变更应用到数据库中，可能会影响现有数据
6. 在命令行中运行应用程序，然后可以在 `http://localhost:3000` 访问
```bash
npm run dev
```

## 构建您的项目
### 1. 选择并应用模板
ShipNowKit 在 `app/_templates` 目录下提供了多个模板。您可以选择最适合您需求的一个：

```bash
# 例如，应用 NotionLike 模板
cp -r app/_templates/notion/signin app/
cp app/_templates/notion/page.tsx app/
```

### 2. 自定义落地页
修改 `app/page.tsx` 以匹配您的业务需求。该文件包含多个可配置的部分。

### 3. 更新网站配置
在 `config/site.ts` 文件中自定义您的网站设置，在 `config/index.ts` 文件中设置您的身份验证和支付配置。

### 4. 需要更新的重要文件
- `public/`：替换 logo 和网站图标
- `.env`：设置您的环境变量

记得在部署到生产环境之前在本地测试您的更改。

## 一键部署

使用 [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=vercel-examples) 部署示例：

[![使用 Vercel 部署](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/dante-is-shipping/shipnow.git&project-name=&repository-name=ship-now)

================
File: README.md
================
🌍 *[English](README.md) ∙ [简体中文](README-zh.md)*


# [ShipNowKit](https://shipnowkit.com)

ShipNowKit is a boilerplate for building your own SaaS, built with Next.js 15 & React 19. It comes packed with auth, payments, emails and more, featuring multiple classic templates and rich components to help you quickly build your business.

Demo address：
ShipNowLike：https://shipnow-demo1.vercel.app/
NotionLike：https://shipnow-notionlike.vercel.app/

[![ShipNowKit](https://shipnow-1253247883.cos.na-siliconvalley.myqcloud.com/shipnow-og.png)](https://shipnowkit.com)

## Tech Stack 

ShipNowKit is built on the following stack:

- Next.js 15 – Frontend/Backend
- TailwindCSS + shadcn – Styles & UI
- NextAuth v5 – Auth([support multiple providers](https://authjs.dev/getting-started/providers/42-school?framework=next-js))
- Stripe & Paddle - Payment
- Prisma - Database ORM([support multiple databases](https://www.prisma.io/docs/orm/reference/supported-databases))
- Google Analytics - Analytics
- React Email - Email Template
- Vercel - Hosting


## Running Locally

1. Clone the repo.
2. Copy the `.env.example` file to create a `.env.local` file and fill in the required fields.
3. Install dependencies.
```bash
npm install
```
4. Choose your database type
```bash
# choose mysql
npm run db:use:mysql
# choose postgresql
npm run db:use:postgresql
# choose mongodb
npm run db:use:mongodb
```
5. Migrate the database
```bash
npm run db:migrate
```
> tips: If tables already exist in the database, it's recommended to backup your data first, as migrations will apply changes to the database that may affect existing data
6. Run the application in the command line and it will be available at `http://localhost:3000`.
```bash
npm run dev
```

## Build Your Project
### 1. Choose and Apply Template
ShipNowKit provides multiple templates in the `app/_templates` directory. You can choose one that best fits your needs:

```bash
# For example, apply the NotionLike template
cp -r app/_templates/notion/signin app/
cp app/_templates/notion/page.tsx app/
```

### 2. Customize Landing Page
Modify `app/page.tsx` to match your business needs. The file contains several configurable sections.

### 3. Update Site Configuration
Customize your site settings in the `config/site.ts` file, and your auth and payment settings in the `config/index.ts` file.

### 4. Essential Files to Update
- `public/`: Replace logo and favicon
- `.env`: Set up your environment variables

Remember to test your changes locally before deploying to production.


## One-Click Deploy

Deploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=vercel-examples):

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/dante-is-shipping/shipnow.git&project-name=&repository-name=ship-now)

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./*"
      ],
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================================
End of Codebase
================================================================
